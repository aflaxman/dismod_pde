<html>
<head><title>dismod_pde: 
Estimation of Disease Mortality as a Stochastic Function of Age and Cohort</title></head>
<body>

<hr>
<center><b><big><big>dismod_pde: 
Estimation of Disease Mortality as a Stochastic Function of Age and Cohort</big></big></b></center>
<table><tr><td align='left'  valign='top'>
</td><td align='left'  valign='top'>
One web page per Section <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 All as one web page

</td></tr><tr><td align='left'  valign='top'>

	</td><td align='left'  valign='top'>
 (fast to load)           <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 (slow to load)
</td></tr><tr><td align='left'  valign='top'>
 
Math displayed using Latex
<code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <a href="index.htm" target="_top"><span style='white-space: nowrap'>index.htm</span></a>
   <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <a href="_printable.htm" target="_top"><span style='white-space: nowrap'>_printable.htm</span></a>

</td></tr><tr><td align='left'  valign='top'>

Math displayed using MathML
<code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <a href="index.xml" target="_top"><span style='white-space: nowrap'>index.xml</span></a>
   <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <a href="_printable.xml" target="_top"><span style='white-space: nowrap'>_printable.xml</span></a>

</td></tr>
</table>
<br>
<b><big><a name="a" id="a">a: Purpose</a></big></b>
<br>
Estimate disease incidence, remission, 
excess mortality, and other cause mortality, as 
<a href="#5.1.b">5.1.b: <span style='white-space: nowrap'>stochastic&nbsp;functions</span></a>
 of 
age and cohort.

<br>
<br>
<b><big><a name="b" id="b">b: Author</a></big></b>

<br>
<a href="http://www.seanet.com/~bradbell" target="_top"><span style='white-space: nowrap'>Bradley&nbsp;M.&nbsp;Bell</span></a>
 (http://www.seanet.com/~bradbell) 

<br>
<br>
<b><big><a name="c" id="c">c: Copyright</a></big></b>
<br>
Copyright (C) University of Washington

<br>
<br>
<b><big><a name="d" id="d">d: License</a></big></b>
<br>
This program is distributed under the terms of
<a href="http://www.opensource.org/licenses/gpl-3.0.html" target="_top"><span style='white-space: nowrap'>GPLv3</span></a>
 (http://www.opensource.org/licenses/gpl-3.0.html) 

<br>
<br>
<b><big><a name="e" id="e">e: Contents</a></big></b>
<br>
<div><a href="#1" target="_top">1:&nbsp;Table&nbsp;of&nbsp;Contents</a><br>
<a href="#2" target="_top">2:&nbsp;Changes&nbsp;and&nbsp;Additions&nbsp;to&nbsp;dismod_pde</a><br>
<a href="#3" target="_top">3:&nbsp;Installing&nbsp;dismod_pde</a><br>
<a href="#4" target="_top">4:&nbsp;The&nbsp;CSV&nbsp;File&nbsp;Interface&nbsp;to&nbsp;dismod_pde</a><br>
<a href="#5" target="_top">5:&nbsp;The&nbsp;C++&nbsp;Interface&nbsp;to&nbsp;dismod_pde</a><br>
<a href="#6" target="_top">6:&nbsp;dismod_pde&nbsp;Examples</a><br>
<a href="#7" target="_top">7:&nbsp;Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde</a><br>
<a href="#8" target="_top">8:&nbsp;List&nbsp;of&nbsp;Known&nbsp;Bugs</a><br>
<a href="#9" target="_top">9:&nbsp;Alphabetic&nbsp;Listing&nbsp;of&nbsp;Cross&nbsp;Reference&nbsp;Tags</a><br>
<a href="#10" target="_top">10:&nbsp;Keyword&nbsp;Index</a><br>
<a href="#11" target="_top">11:&nbsp;External&nbsp;Internet&nbsp;References</a><br>
</div>
<hr>Input File: dismod_pde.omh

<hr>
<center><b><big><big>
1: Table of Contents</big></big></b></center>

<pre>
dismod_pde: Estimation of Disease Mortality as a Stochastic Function of Age and Cohort: <a href="#">: dismod_pde</a>
    Table of Contents: <a href="#1">1: _contents</a>
    Changes and Additions to dismod_pde: <a href="#2">2: whats_new</a>
    Installing dismod_pde: <a href="#3">3: install</a>
    The CSV File Interface to dismod_pde: <a href="#4">4: csv</a>
        dismod_pde Command Line Program: <a href="#4.1">4.1: dismod_pde_csv</a>
        dismod_pde Python CSV Helper Scripts: <a href="#4.2">4.2: python_csv</a>
            Bubble Plots of Values in Csv File: <a href="#4.2.1">4.2.1: d4_bubble.py</a>
            Change The dismod_pde Stochastic Function Input File: <a href="#4.2.2">4.2.2: d4_change_sfun_in.py</a>
                d4_change_sfun_in.py: Example and Test: <a href="#4.2.2.1">4.2.2.1: change_sfun_in.sh</a>
            Compare sfun_out.csv and d4_simulate.py Solution File: <a href="#4.2.3">4.2.3: d4_compare_sfun.py</a>
            Contour Plots of Values in Csv File: <a href="#4.2.4">4.2.4: d4_contour.py</a>
            Plot the Cumulative Distribution for a Csv File Column: <a href="#4.2.5">4.2.5: d4_cumulative.py</a>
            Line and Point Plots of CSV Files: <a href="#4.2.6">4.2.6: d4_plot.py</a>
            Create Derived Stochastic Function Output Files: <a href="#4.2.7">4.2.7: d4_sfun_der.py</a>
            Convert From Age-Cohort Grid to Age-Time Rectangular Grid: <a href="#4.2.8">4.2.8: d4_sfun_grid.py</a>
                d4_sfun_grid.py: Example and Test: <a href="#4.2.8.1">4.2.8.1: sfun_grid.sh</a>
            Simulated dismod_pde Data and Solution Files: <a href="#4.2.9">4.2.9: d4_simulate.py</a>
    The C++ Interface to dismod_pde: <a href="#5">5: cpp</a>
        Optimization of dismod_pde Objective Function: <a href="#5.1">5.1: optimize</a>
            Description of Ipopt Tracing Output: <a href="#5.1.1">5.1.1: ipopt_trace</a>
            Example and Test of dismod_pde C++ Optimize Procedure: <a href="#5.1.2">5.1.2: optimize_xam.cpp</a>
            A dismod_pde C++ Optimize Example and Test: <a href="#5.1.3">5.1.3: dismoditis.cpp</a>
                Create C++ Files Corresponding to Dismod Data and Expected Results: <a href="#5.1.3.1">5.1.3.1: dismoditis.sh</a>
        Create an Age-Cohort Grid For a Measurement Set: <a href="#5.2">5.2: create_grid</a>
        Convert Between Age-Cohort Pairs and a Single Grid Index: <a href="#5.3">5.3: pair2index</a>
            Example and Test of dismod_pde pair2index Procedure: <a href="#5.3.1">5.3.1: pair2index.cpp</a>
        Read an Entire CSV File Into Memory: <a href="#5.4">5.4: csv_read</a>
            Example and Test of dismod_pde csv_read Procedure: <a href="#5.4.1">5.4.1: csv_read_tst.cpp</a>
        Convert a Sub-vector of a Character Vector to a String: <a href="#5.5">5.5: str_char_vec</a>
            Example and Test of Conversion from Ascii to String: <a href="#5.5.1">5.5.1: str_char_vec_tst.cpp</a>
        Convert a Sub-vector of a Character Vector to Double: <a href="#5.6">5.6: atof_char_vec</a>
            Example and Test of Conversion from Ascii to Double: <a href="#5.6.1">5.6.1: atof_char_vec_tst.cpp</a>
    dismod_pde Examples: <a href="#6">6: example</a>
        get_started.sh: Example and Test of dismod_pde_csv: <a href="#6.1">6.1: get_started.sh</a>
            get_started.py: Example and Test of dismod_pde_csv: <a href="#6.1.1">6.1.1: get_started.py</a>
        A Diabetes Incidence Estimation Example: <a href="#6.2">6.2: diabetes.sh</a>
        Simulate and Fit Where Incidence is Gaussian in Age an Cohort: <a href="#6.3">6.3: gaussian.sh</a>
    Wish List For Improvements to dismod_pde: <a href="#7">7: wish_list</a>
    List of Known Bugs: <a href="#8">8: bug_list</a>
    Alphabetic Listing of Cross Reference Tags: <a href="#9">9: _reference</a>
    Keyword Index: <a href="#10">10: _index</a>
    External Internet References: <a href="#11">11: _external</a>
</pre>
<hr>
<center><b><big><big><a name="2" id="2">2: Changes and Additions to dismod_pde</a>
</big></big></b></center>
<br>
<b><big><a name="2.a" id="2.a">2.a: 2013-11-30</a></big></b>

<ol type="1"><li>
The 
<a href="#3.d">3.d: <span style='white-space: nowrap'>external</span></a>
 install of 
<a href="https://projects.coin-or.org/Ipopt" target="_top"><span style='white-space: nowrap'>ipopt</span></a>
 (https://projects.coin-or.org/Ipopt) 
was failing because the netlib server no longer supports ftp; see
<a href="https://projects.coin-or.org/Ipopt/ticket/214" target="_top"><span style='white-space: nowrap'>https://projects.coin-or.org/Ipopt/ticket/214</span></a>
.
This has been fixed.
</li><li>

Use newer versions of the <code><font color="blue">ipopt</font></code> and <code><font color="blue">cppad</font></code> packages; see
<a href="#3.d">3.d: <span style='white-space: nowrap'>external</span></a>
.
The newer version of <code><font color="blue">ipopt</font></code> supported the change above.
The newer version of <code><font color="blue">cppad</font></code> avoided warnings during the
build of <code><font color="blue">dismod_ode</font></code>.
</li><li>

Remove attempt to use <code><font color="blue">c++11</font></code> in build is <code><font color="blue">dismod_ode</font></code> because
some old compilers do not support it.
</li><li>

Add an <a href="#3.d">3.d: <span style='white-space: nowrap'>external&nbsp;packages</span></a>
 entry
to the wish list.
</li></ol>


<br>
<br>
<b><big><a name="2.b" id="2.b">2.b: 2013-0404</a></big></b>
<br>
Fix a bug that caused the compiler error
<code><font color='blue'><pre style='display:inline'> 
	../../cpp/optimize.cpp:432: error: using 'typename' outside of template
</pre></font></code>

in both current version and version <code><font color="blue">2013.0000.1</font></code>.

<br>
<br>
<b><big><a name="2.c" id="2.c">2.c: 2013-0205</a></big></b>
<br>
Both the current version,
and version <code><font color="blue">2013.0.0</font></code> are now available for
<a href="#3.b">3.b: <span style='white-space: nowrap'>download</span></a>
.

<br>
<br>
<b><big><a name="2.d" id="2.d">2.d: 2013-0119</a></big></b>
<br>
The name of this program was changed from <code><font color="blue">dismod4</font></code> to
<code><font color="blue">dismod_pde</font></code> to distinguish it from a similar program that
models disease as a function of age only.

<br>
<br>
<b><big><a name="2.e" id="2.e">2.e: 2013-0101</a></big></b>
<br>
Use the new <code><font color="blue">CppAD::ipopt:solve</font></code> Ipopt solver
(instead of the <code><font color="blue">cppad_ipopt_nlp</font></code>  Ipopt interface).
The results test out to be the same.
Here is a comparison of the times reported by Ipopt
(where NDEBUG and -O2 were specified during compile time):

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cppad_ipopt_nlp</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Total&nbsp;CPU&nbsp;secs&nbsp;in&nbsp;IPOPT&nbsp;(w/o&nbsp;function&nbsp;evaluations)&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.606<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Total&nbsp;CPU&nbsp;secs&nbsp;in&nbsp;NLP&nbsp;function&nbsp;evaluations&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;32.287<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>CppAD::ipopt::solve</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Total&nbsp;CPU&nbsp;secs&nbsp;in&nbsp;IPOPT&nbsp;(w/o&nbsp;function&nbsp;evaluations)&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.465<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Total&nbsp;CPU&nbsp;secs&nbsp;in&nbsp;NLP&nbsp;function&nbsp;evaluations&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.795<br>
</span></font></code>
<br>
<b><big><a name="2.f" id="2.f">2.f: 2012-11-29</a></big></b>
<br>
Search for CppAD and Ipopt libraries in both <code><font color="blue">lib</font></code> and <code><font color="blue">lib64</font></code>
so that they will be found in either case.

<br>
<br>
<b><big><a name="2.g" id="2.g">2.g: 2012-11-15</a></big></b>
<br>
Document how to create an
<a href="#3.k">3.k: <span style='white-space: nowrap'>optimized&nbsp;version</span></a>

and fix warnings that occurred during the build of this version.

<br>
<br>
<b><big><a name="2.h" id="2.h">2.h: 2012-11-14</a></big></b>
<br>
The <a href="#6.1.1">6.1.1: <span style='white-space: nowrap'>get_started.py</span></a>
 example was failing because it was not
closing the python csv file <code><font color="blue">sfun_in.csv</font></code> before <code><font color="blue">dismod_csv</font></code>
attempted to read it.
This has been fixed by closing all the python files
(input and output) when they are completed (reading or writing).

<br>
<br>
<b><big><a name="2.i" id="2.i">2.i: 2012-11-11</a></big></b>
<br>
Remove use of the python <code><font color="blue">pandas</font></code>
(use <code><font color="blue">csv.DictReader</font></code> and <code><font color="blue">csv.writer</font></code> instead).

<br>
<br>
<b><big><a name="2.j" id="2.j">2.j: 2012-11-09</a></big></b>
<br>
There was a problem installing 
<a href="http://www.coin-or.org/CppAD/" target="_top"><span style='white-space: nowrap'>cppad</span></a>
 (http://www.coin-or.org/CppAD/) 
on Ubuntu 12.04.
This has been fixed and the new version 
(subversion revision number 2556 of cppad) is now used by dismod_pde.


<br>
<br>
<b><big><a name="2.k" id="2.k">2.k: 2012-10-24</a></big></b>
<br>
The <a href="#6.2">6.2: <span style='white-space: nowrap'>diabetes.sh</span></a>
 example was mistakenly using the
plots for <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
 plots for the 
<a href="#6.2.r">6.2.r: <span style='white-space: nowrap'>rate&nbsp;contour&nbsp;plots</span></a>
 of
the estimate for
other cause mortality 
<code><i><font color="black"><span style='white-space: nowrap'>omega</span></font></i></code>
, 
excess mortality 
<code><i><font color="black"><span style='white-space: nowrap'>chi</span></font></i></code>
,
and incidence 
<code><i><font color="black"><span style='white-space: nowrap'>iota</span></font></i></code>
.
This has been fixed.

<br>
<br>
<b><big><a name="2.l" id="2.l">2.l: 2012-10-20</a></big></b>
<br>
The <a href="#5.1.o.h">5.1.o.h: <span style='white-space: nowrap'>cross_residuals</span></a>

that started at age index zero were not being included in the objective.
This has been fixed.

<br>
<br>
<b><big><a name="2.m" id="2.m">2.m: 2012-10-13</a></big></b>
<br>
Improve error messaging when the file
<a href="#4.1.f">4.1.f: <span style='white-space: nowrap'>measure_in.csv</span></a>
 
does not satisfy the following conditions:

<code><i><font color="black"><span style='white-space: nowrap'>age_lower</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age_upper</span></font></i></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>time_lower</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_upper</span></font></i></code>
,

<code><font color="blue"><span style='white-space: nowrap'>0&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>meas_sigma</span></font></i></code>
, and

<code><font color="blue"><span style='white-space: nowrap'>0&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>meas_zeta</span></font></i></code>
.

<br>
<br>
<b><big><a name="2.n" id="2.n">2.n: 2012-10-04</a></big></b>

<ol type="1"><li>
Simplify <a href="#6.1">6.1: <span style='white-space: nowrap'>get_started.sh</span></a>
 using fact that we no longer need
an age grid value at zero.
</li><li>

Create <a href="#6.1.1">6.1.1: <span style='white-space: nowrap'>get_started.py</span></a>
 a python version of <a href="#6.1">6.1: <span style='white-space: nowrap'>get_started.sh</span></a>
.
</li><li>

Remove extra leading white space characters in 
<a href="#4.1.k">4.1.k: <span style='white-space: nowrap'>effect_out.csv</span></a>
.
</li></ol>


<br>
<br>
<b><big><a name="2.o" id="2.o">2.o: 2012-09-27</a></big></b>

<ol type="1"><li>
Change the data in the <a href="#6.2">6.2: <span style='white-space: nowrap'>diabetes.sh</span></a>
 example to all be between
the time limits 1980 and 2010.
</li><li>

Transfer simplifications in <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
 to <a href="#6.2">6.2: <span style='white-space: nowrap'>diabetes.sh</span></a>
.
</li></ol>


<br>
<br>
<b><big><a name="2.p" id="2.p">2.p: 2012-09-26</a></big></b>

<ol type="1"><li>
Simplify and reorganize <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
 so that it is easier
for a user to modify for her or his own simulation case.
</li><li>

Change <a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>
 so that it used the formula
<code>
<span style='white-space: nowrap'>&nbsp;\sigma_\ell&nbsp;=&nbsp;\log(1.0&nbsp;+&nbsp;cv_\ell&nbsp;)</span></code>
 where
<code>
<span style='white-space: nowrap'>&nbsp;cv_\ell</span></code>
 is the user specified coefficient of variation.
</li><li>

Fix a problem with changing the age and cohort grid spacing in
<a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
.
In addition, use a separate smoothing 
<code><i><font color="black"><span style='white-space: nowrap'>sigma</span></font></i></code>
 value for 
<code><i><font color="black"><span style='white-space: nowrap'>iota</span></font></i></code>
.
</li></ol>


<br>
<br>
<b><big><a name="2.q" id="2.q">2.q: 2012-09-21</a></big></b>
<br>
Remove scaling of residuals by the square root of the corresponding 
time difference; see
<a href="#5.1.o.d">5.1.o.d: <span style='white-space: nowrap'>age</span></a>
,
<a href="#5.1.o.f">5.1.o.f: <span style='white-space: nowrap'>cohort</span></a>
, and
<a href="#5.1.o.h">5.1.o.h: <span style='white-space: nowrap'>cross</span></a>
 residuals.
The scaling of the residuals with respect to time difference 
should be chosen by the user and included in the corresponding 
standard deviations.

<br>
<br>
<b><big><a name="2.r" id="2.r">2.r: 2012-09-20</a></big></b>

<ol type="1"><li>
Round off output values in <a href="#4.2.8">4.2.8: <span style='white-space: nowrap'>d4_sfun_grid.py</span></a>

so that the same time values always have the exact same representation
in the output file (even when not an integer).
</li><li>

Change <a href="#4.2.8">4.2.8: <span style='white-space: nowrap'>d4_sfun_grid.py</span></a>
 so that it outputs values corresponding
to first age value (used to be left output because it has special meaning).
</li></ol>



<br>
<br>
<b><big><a name="2.s" id="2.s">2.s: 2012-09-19</a></big></b>

<ol type="1"><li>
Use age-time instead of age-cohort bilinear interpolation in the
<a href="#5.1.p.b">5.1.p.b: <span style='white-space: nowrap'>measurement&nbsp;model</span></a>
.
</li><li>

Simplify
<a href="#5.3.m.b">5.3.m.b: <span style='white-space: nowrap'>computational&nbsp;grid</span></a>

to include fewer cohorts no special points at age zero.
(possible because of new interpolation scheme)
</li></ol>



<br>
<br>
<b><big><a name="2.t" id="2.t">2.t: 2012-09-17</a></big></b>
<br>
Add <a href="#5.1.o.h">5.1.o.h: <span style='white-space: nowrap'>cross&nbsp;residuals</span></a>

terms to the function smoothing.
While these terms seem useful,
we have not yet found an example case where this helps
and so we suggest the <a href="#5.1.j.s">5.1.j.s: <span style='white-space: nowrap'>cross_sigma</span></a>
 
be infinity.

<br>
<br>
<b><big><a name="2.u" id="2.u">2.u: 2012-05-30</a></big></b>
<br>
Add user API documentation for <a href="#5.5">5.5: <span style='white-space: nowrap'>str_char_vec</span></a>

(so it can be used by other packages).

<br>
<br>
<b><big><a name="2.v" id="2.v">2.v: 2012-05-25</a></big></b>
<br>
Add user API documentation for <a href="#5.6">5.6: <span style='white-space: nowrap'>atof_char_vec</span></a>

(so it can be used by other packages).

<br>
<br>
<b><big><a name="2.w" id="2.w">2.w: 2012-05-24</a></big></b>
<br>
Add user API documentation for <a href="#5.4">5.4: <span style='white-space: nowrap'>csv_read</span></a>

(so it can be used by other packages).

<br>
<br>
<b><big><a name="2.x" id="2.x">2.x: 2012-04-13</a></big></b>
<br>
The examples
<a href="#6.1">6.1: <span style='white-space: nowrap'>get_started.sh</span></a>
,
<a href="#6.2">6.2: <span style='white-space: nowrap'>diabetes.sh</span></a>
, and
<a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
,
are now included in the installation in the directory

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>/share/doc/dismod_pde-</span></font><i><font color="black"><span style='white-space: nowrap'>yyyymmdd</span></font></i><font color="blue"><span style='white-space: nowrap'>/example<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i></code>
 is the 
<a href="#3.j">3.j: <span style='white-space: nowrap'>prefix</span></a>
 
specified during the install procedure. 
<code><span style='white-space: nowrap'><br>
<br>
</span></code>The <a href="#6.1">6.1: <span style='white-space: nowrap'>get_started.sh</span></a>
 example was moved under the 
<a href="#6">6: <span style='white-space: nowrap'>example</span></a>
 section
and the <a href="#5.1.1">5.1.1: <span style='white-space: nowrap'>ipopt_trace</span></a>
 description was moved under the
<a href="#5.1">5.1: <span style='white-space: nowrap'>optimize</span></a>
 section.

<br>
<br>
<b><big><a name="2.y" id="2.y">2.y: 2012-04-11</a></big></b>
<br>
Update the <a href="#7">7: <span style='white-space: nowrap'>wish_list</span></a>
.

<br>
<br>
<b><big><a name="2.z" id="2.z">2.z: 2012-03-29</a></big></b>
<br>
Fix a mistake where changing the 
<a href="#3.j">3.j: <span style='white-space: nowrap'>prefix</span></a>
 did not install Ipopt
in the proper place.

<br>
<br>
<b><big><a name="2.aa" id="2.aa">2.aa: 2012-03-26</a></big></b>

<ol type="1"><li>
Change the <code><font color="blue">ChangeLog</font></code>, <code><font color="blue">NEWS</font></code>, and <code><font color="blue">INSTALL</font></code>
files to point to the web.
</li><li>

Remove the python files from the distribution because they are
created by the installation procedure 
<a href="#3.e">3.e: <span style='white-space: nowrap'>configure</span></a>

command.
</li><li>

The argument bubble size
<a href="#4.2.1.h.c">4.2.1.h.c: <span style='white-space: nowrap'>s_between</span></a>

was added and the labeling of the corresponding plots was improved.
</li></ol>


<br>
<br>
<b><big><a name="2.ab" id="2.ab">2.ab: 2012-03-20</a></big></b>
<br>
Fix documentation of the effects
<a href="#5.1.m.a">5.1.m.a: <span style='white-space: nowrap'>integrand</span></a>
,
<a href="#5.1.m.b">5.1.m.b: <span style='white-space: nowrap'>covariate</span></a>
,
and their connection to the 
<a href="#5.1.k">5.1.k: <span style='white-space: nowrap'>covariate_values</span></a>
.


<br>
<br>
<b><big><a name="2.ac" id="2.ac">2.ac: 2012-03-19</a></big></b>
<br>
Change 
<code><font color="blue">chi_model</font></code>, <code><font color="blue">omega_model</font></code>, <code><font color="blue">iota_model</font></code> and
<code><font color="blue">prevalence_model</font></code> to
<a href="#6.3.s.c">6.3.s.c: <span style='white-space: nowrap'>chi_estimate</span></a>
,
<a href="#6.3.s.a">6.3.s.a: <span style='white-space: nowrap'>omega_estimate</span></a>
,
<a href="#6.3.s.e">6.3.s.e: <span style='white-space: nowrap'>iota_estimate</span></a>
, and
<a href="#6.3.r">6.3.r: <span style='white-space: nowrap'>prevalence_estimate</span></a>
.

<br>
<br>
<b><big><a name="2.ad" id="2.ad">2.ad: 2012-03-15</a></big></b>

<ol type="1"><li>
In <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
, 
simulate linear trend for excess mortality and other cause mortality.
</li><li>

First version that fits same mode for <a href="#6.2">6.2: <span style='white-space: nowrap'>diabetes.sh</span></a>
 
and <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
.
</li></ol>



<br>
<br>
<b><big><a name="2.ae" id="2.ae">2.ae: 2012-03-10</a></big></b>

<ol type="1"><li>
Include a linear trend with respect to age and time in the 
<a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
 simulation.
</li><li>

Include plots of 
<a href="#6.3.s.b">6.3.s.b: <span style='white-space: nowrap'>omega_true</span></a>
 and
<a href="#6.3.s.d">6.3.s.d: <span style='white-space: nowrap'>chi_true</span></a>
 for the 
<code><font color="blue">gaussian.sh</font></code> simulation.
In addition, use a smaller step between contour lines.
</li></ol>



<br>
<br>
<b><big><a name="2.af" id="2.af">2.af: 2012-03-12</a></big></b>
<br>
Change <code><font color="blue">incidence_model</font></code> and <code><font color="blue">incidence_true</font></code> to
<code><font color="blue">iota_model</font></code> and
<code><font color="blue">iota_true</font></code> respectively
(so naming is similar to <code><font color="blue">omega_model</font></code>).

<br>
<br>
<b><big><a name="2.ag" id="2.ag">2.ag: 2012-03-01</a></big></b>

<ol type="1"><li>
Have <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
 and <a href="#6.2">6.2: <span style='white-space: nowrap'>diabetes.sh</span></a>
 plot
the model for other cause mortality <code><font color="blue">omega</font></code>
and excess mortality <code><font color="blue">chi</font></code>, instead of 
relative risk and all cause mortality.
This makes it easier to compare the differences between the 
diabetes simulation and the gaussian simulation.
</li><li>

Reduce the number of relative risk and all cause mortality
constraints in <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
 and <a href="#6.2">6.2: <span style='white-space: nowrap'>diabetes.sh</span></a>
.
</li></ol>



<br>
<br>
<b><big><a name="2.ah" id="2.ah">2.ah: 2012-02-29</a></big></b>

<ol type="1"><li>
Give example of changing PYTHON_PREFIX as a comment in <code><font color="blue">build.sh</font></code>.
</li><li>

Expand time limits for plots in <a href="#6.2">6.2: <span style='white-space: nowrap'>diabetes.sh</span></a>

so that residuals are not along left time axis of plot.
</li><li>

In <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
,
Sample constraints for all cause mortality and relative risk at twice the
computational grid spacing.
Also change to using order 2 smoothing for excess mortality and other cause
mortality in <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
.
</li><li>

Advance to using newer version of CppAD, <code><font color="blue">cppad-20120227</font></code>
(this builds and runs tests correctly on more systems).
</li><li>

Fix some problems in the <a href="#3">3: <span style='white-space: nowrap'>install</span></a>
 documentation.
</li><li>

Fix a problem with backward compatibility with 
version 2.5.4 of python. 
To be specific 
use <code><font color="blue">numpy.isnan</font></code> instead <code><font color="blue">math.isnan</font></code>.
</li></ol>


<br>
<br>
<b><big><a name="2.ai" id="2.ai">2.ai: 2012-02-26</a></big></b>
<br>
Change <a href="#4.2.4">4.2.4: <span style='white-space: nowrap'>d4_contour.py</span></a>
 to allow for both linear
and log scaling of contour levels.

<br>
<br>
<b><big><a name="2.aj" id="2.aj">2.aj: 2012-02-24</a></big></b>

<ol type="1"><li>
Start evolving the <a href="#6.2">6.2: <span style='white-space: nowrap'>diabetes.sh</span></a>
 and <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
 examples to
be more alike in the parameters they choose and the plots they make.
</li><li>

Widen error check of <code><font color="blue">effect_out.csv</font></code> in
<a href="#6.1.k">6.1.k: <span style='white-space: nowrap'>get_started.sh</span></a>

to account better for round-off and inversion approximation of solution.
</li></ol>


<br>
<br>
<b><big><a name="2.ak" id="2.ak">2.ak: 2012-02-19</a></big></b>
<br>
Changed <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
 to use second order smoothing 
with respect to all the rates by making <code>
<span style='white-space: nowrap'>&nbsp;\sigma</span></code>
 for <code>
<span style='white-space: nowrap'>&nbsp;\chi</span></code>

and <code>
<span style='white-space: nowrap'>&nbsp;\omega</span></code>
 less that <code>
<span style='white-space: nowrap'>&nbsp;\sigma</span></code>
 for <code>
<span style='white-space: nowrap'>&nbsp;\iota</span></code>
. 

<br>
<br>
<b><big><a name="2.al" id="2.al">2.al: 2012-02-18</a></big></b>
<br>
Added 
<a href="#4.2.9.o.e">4.2.9.o.e: <span style='white-space: nowrap'>sim_zeta</span></a>
 and
<a href="#4.2.9.o.f">4.2.9.o.f: <span style='white-space: nowrap'>fit_zeta</span></a>
 to the parameters
that can be controlled by
<a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>
.

<br>
<br>
<b><big><a name="2.am" id="2.am">2.am: 2012-02-17</a></big></b>
<br>
This program could crash during function evaluation
with a <code><font color="blue">hasnan</font></code> because
<a href="#5.1.j.f">5.1.j.f: <span style='white-space: nowrap'>prior_zeta</span></a>

was being used in a place where 
<a href="#5.1.j.a">5.1.j.a: <span style='white-space: nowrap'>optimize_zeta</span></a>

should have been used.
This has been fixed.


<br>
<br>
<b><big><a name="2.an" id="2.an">2.an: 2012-02-16</a></big></b>

<ol type="1"><li>
Separate
<a href="#5.1.j.a">5.1.j.a: <span style='white-space: nowrap'>optimize_zeta</span></a>

as a separate parameter instead of using
<a href="#5.1.j.f">5.1.j.f: <span style='white-space: nowrap'>prior_zeta</span></a>

for this value.
</li><li>

Improve convergence of <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>

by adjusting the value of 
<a href="#5.1.j.a">5.1.j.a: <span style='white-space: nowrap'>optimize_zeta</span></a>
.
</li></ol>


<br>
<br>
<b><big><a name="2.ao" id="2.ao">2.ao: 2012-02-04</a></big></b>

<ol type="1"><li>
Make the simulation values for the rates <code><font color="blue">iota</font></code>,
<code><font color="blue">rho</font></code>, <code><font color="blue">chi</font></code>, and <code><font color="blue">omega</font></code> the mean for the prior.
This way, even though the prior is not used, the prior residuals are
the error in the fit.
</li><li>

Echo the command line input values int the output generated by
<a href="#4.2.2">4.2.2: <span style='white-space: nowrap'>d4_change_sfun_in.py</span></a>
.
</li><li>

Add <code><font color="blue">max</font></code> to the list of functions allowed in 
<code><font color="blue">d4_simulate.py</font></code>
<a href="#4.2.9.n">4.2.9.n: <span style='white-space: nowrap'>expressions</span></a>
.
</li></ol>


<br>
<br>
<b><big><a name="2.ap" id="2.ap">2.ap: 2012-02-03</a></big></b>

<ol type="1"><li>
Change <a href="#6.1">6.1: <span style='white-space: nowrap'>get_started.sh</span></a>
 to use configuration settings for 
the <code><font color="blue">top_builddir</font></code> and <code><font color="blue">top_srcdir</font></code>,
(like what <a href="#6.2">6.2: <span style='white-space: nowrap'>diabetes.sh</span></a>
 and <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
 do).
</li><li>

Change the <code><font color="blue">dismod_pde_csv</font></code>
<a href="#4.1.g.a">4.1.g.a: <span style='white-space: nowrap'>output&nbsp;template</span></a>

to only define values for the fields that are not changed by user; i.e.,
<code><font color="blue">age</font></code>, <code><font color="blue">cohort</font></code>, and <code><font color="blue">function</font></code>.
All other numeric values and likelihood names now have a value
that is easy to recognize and must be changed.
</li></ol>



<br>
<br>
<b><big><a name="2.aq" id="2.aq">2.aq: 2012-02-02</a></big></b>

<ol type="1"><li>
Better detection of error status returned by <code><font color="blue">dismod_pde_csv</font></code> to
<a href="#6.2">6.2: <span style='white-space: nowrap'>diabetes.sh</span></a>
 and <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
.
</li><li>

The routine <code><font color="blue">print_results</font></code> was removed 
(because the <a href="#4.1.i">4.1.i: <span style='white-space: nowrap'>sfun_out.csv</span></a>
 
contains the same information in a specified format.
</li></ol>


<br>
<br>
<b><big><a name="2.ar" id="2.ar">2.ar: 2012-02-01</a></big></b>
<br>
Allow for different 
<a href="#4.2.9.o.g">4.2.9.o.g: <span style='white-space: nowrap'>sim_cv</span></a>
 and
<a href="#4.2.9.o.h">4.2.9.o.h: <span style='white-space: nowrap'>fit_cv</span></a>
 values
for each integrand.

<br>
<br>
<b><big><a name="2.as" id="2.as">2.as: 2012-01-31</a></big></b>
<br>
Change <a href="#4.2.3">4.2.3: <span style='white-space: nowrap'>d4_compare_sfun.py</span></a>
 to check not only the maximum deviation,
but also the average and median.
In addition, separate the expression into two parts; an
<a href="#4.2.3.g">4.2.3.g: <span style='white-space: nowrap'>include_expr</span></a>
 and a
<a href="#4.2.3.h">4.2.3.h: <span style='white-space: nowrap'>value_expr</span></a>
.

<br>
<br>
<b><big><a name="2.at" id="2.at">2.at: 2012-01-30</a></big></b>
<br>
Add more noise to the <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
 simulation
and fitting.

<br>
<br>
<b><big><a name="2.au" id="2.au">2.au: 2012-01-27</a></big></b>

<ol type="1"><li>
First version of <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
 that passes its 
<a href="#6.3.t">6.3.t: <span style='white-space: nowrap'>solution&nbsp;check</span></a>
.
</li><li>

Add the arguments 
<a href="#4.2.9.o.d">4.2.9.o.d: <span style='white-space: nowrap'>like</span></a>
,
<a href="#4.2.9.o.g">4.2.9.o.g: <span style='white-space: nowrap'>sim_cv</span></a>
, and
<a href="#4.2.9.o.h">4.2.9.o.h: <span style='white-space: nowrap'>fit_cv</span></a>

to the data simulator.
</li><li>

Fit <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
 with a small amount of Gaussian measurement noise.
</li></ol>


<br>
<br>
<b><big><a name="2.av" id="2.av">2.av: 2012-01-25</a></big></b>

<ol type="1"><li>
First version of <a href="#6.3">6.3: <span style='white-space: nowrap'>gaussian.sh</span></a>
, 
an example / test that simulates and fits a Gaussian function
of age and time.
This is not yet passing its correctness check and hence is
not yet included in the automated testing system.
</li><li>

Improve <a href="#6.2">6.2: <span style='white-space: nowrap'>diabetes.sh</span></a>
 by including the headers
<a href="#6.2.c">6.2.c: <span style='white-space: nowrap'>python_path</span></a>
 and
<a href="#6.2.d">6.2.d: <span style='white-space: nowrap'>dismod_pde_path</span></a>
.
</li></ol>


<br>
<br>
<b><big><a name="2.aw" id="2.aw">2.aw: 2012-01-23</a></big></b>

<ol type="1"><li>
Change <code><font color="blue">test/constant.sh</font></code> to test all of the possible
<a href="#4.1.f.b">4.1.f.b: <span style='white-space: nowrap'>integrands</span></a>
.
</li><li>

Enable <a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>
 to simulate data with lower and upper ages equal.
</li></ol>


<br>
<br>
<b><big><a name="2.ax" id="2.ax">2.ax: 2012-01-17</a></big></b>
<br>
The value <a href="#4.2.9.i">4.2.9.i: <span style='white-space: nowrap'>age_bound</span></a>

used to have to be greater than zero,
and 
<code><i><font color="black"><span style='white-space: nowrap'>age_max</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age_min</span></font></i></code>
 had to be greater than two.
This has been changed so that 
<code><i><font color="black"><span style='white-space: nowrap'>age_bound</span></font></i></code>

and 
<code><i><font color="black"><span style='white-space: nowrap'>age_max</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age_min</span></font></i></code>
 can be zero.

<br>
<br>
<b><big><a name="2.ay" id="2.ay">2.ay: 2012-01-13</a></big></b>

<ol type="1"><li>
Remove white space from 
<a href="#4.1.j">4.1.j: <span style='white-space: nowrap'>measure_out.csv</span></a>

so that it white space removal is not necessary for reading.
(Also done for <a href="#4.1.i">4.1.i: <span style='white-space: nowrap'>sfun_out.csv</span></a>
.)
</li><li>

Allow for all possible 
<a href="#4.1.f.b">4.1.f.b: <span style='white-space: nowrap'>integrands</span></a>

in <a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>
.
</li></ol>


<br>
<br>
<b><big><a name="2.az" id="2.az">2.az: 2011-11-11</a></big></b>
<br>
Change <a href="#6.1">6.1: <span style='white-space: nowrap'>get_started.sh</span></a>
 and <a href="#6.2">6.2: <span style='white-space: nowrap'>diabetes.sh</span></a>
 to use
prior, instead of limits, to set initial C value.


<br>
<br>
<b><big><a name="2.ba" id="2.ba">2.ba: 2011-11-10</a></big></b>

<ol type="1"><li>
Include all the 
<a href="#4.1.f">4.1.f: <span style='white-space: nowrap'>measure_in.csv</span></a>

data columns in the
<a href="#4.1.j">4.1.j: <span style='white-space: nowrap'>measure_out.csv</span></a>
 file.
</li><li>

Change the data column <code><font color="blue">measure</font></code> in 
<a href="#4.1.j">4.1.j: <span style='white-space: nowrap'>measure_out.csv</span></a>
 to
<a href="#4.1.f.h">4.1.f.h: <span style='white-space: nowrap'>meas_value</span></a>
 so it has
the same name as in 
<code><i><font color="black"><span style='white-space: nowrap'>measure_in.csv</span></font></i></code>
.
</li></ol>


<br>
<br>
<b><big><a name="2.bb" id="2.bb">2.bb: 2011-11-08</a></big></b>
<br>
Change assert in <code><font color="blue">pair2index</font></code> to allow for case where 

<code><i><font color="black"><span style='white-space: nowrap'>time_lower</span></font></i><font color="blue"><span style='white-space: nowrap'>==</span></font><i><font color="black"><span style='white-space: nowrap'>time_upper</span></font></i></code>
.

<br>
<br>
<b><big><a name="2.bc" id="2.bc">2.bc: 2011-11-04</a></big></b>
<br>
Changed the definition of CSV file to allow for double quotes
and not allow for trimming white space.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>Merged in following changes from effect branch:
<ol type="1"><li>
Change 
<code><i><font color="black"><span style='white-space: nowrap'>covariate_in.csv</span></font></i></code>
 to 
<a href="#4.1.h">4.1.h: <span style='white-space: nowrap'>effect_in.csv</span></a>
 and
change its column names from
<code><font color="blue">name, beta_lower, beta_initial, beta_upper</font></code>, to
<code><font color="blue">covariate, lower, initial, upper</font></code>.
</li><li>

Change 
<code><i><font color="black"><span style='white-space: nowrap'>covariate_out.csv</span></font></i></code>
 to 
<a href="#4.1.k">4.1.k: <span style='white-space: nowrap'>effect_out.csv</span></a>
 and
change its column names from
<code><font color="blue">covariate, beta_estimate</font></code> to <code><font color="blue">covariate estimate</font></code>.
</li><li>

No longer require 
<code><i><font color="black"><span style='white-space: nowrap'>covariate_in.csv</span></font></i></code>
 when computing 
template for <a href="#4.1.g">4.1.g: <span style='white-space: nowrap'>sfun_in.csv</span></a>
.
</li><li>

Change the order of the arguments in the <code><font color="blue">dismod_pde_csv</font></code>
<a href="#4.1.a">4.1.a: <span style='white-space: nowrap'>syntax</span></a>
.
</li><li>

Change beta (measurement effect) to be a multiplier for
each integrand, covariate pair (not just for each covariate).
</li></ol>


<br>
<br>
<b><big><a name="2.bd" id="2.bd">2.bd: 2011-10-27</a></big></b>
<br>
Allow for multiple 
<a href="#4.1.f.j">4.1.f.j: <span style='white-space: nowrap'>comment</span></a>
 columns
in the measurement input file.

<br>
<br>
<b><big><a name="2.be" id="2.be">2.be: 2011-10-20</a></big></b>

<ol type="1"><li>
Change the <a href="#5.1.l.a">5.1.l.a: <span style='white-space: nowrap'>integrand&nbsp;names</span></a>

and extend the list of possible integrands.
</li><li>

Fix an order of initialization bug that came up when using
<code><font color="blue">gcc</font></code> version 4.6.1.
</li><li>

Major improvement of <a href="#6.1">6.1: <span style='white-space: nowrap'>get_started.sh</span></a>
 example.
</li></ol>


<br>
<br>
<b><big><a name="2.bf" id="2.bf">2.bf: 2011-10-14</a></big></b>
<br>
Put time on horizontal axis for all plots in <a href="#6.2">6.2: <span style='white-space: nowrap'>diabetes.sh</span></a>
.

<br>
<br>
<b><big><a name="2.bg" id="2.bg">2.bg: 2011-10-09</a></big></b>
<br>
Use <code>
<span style='white-space: nowrap'>&nbsp;\omega</span></code>
 instead of <code>
<span style='white-space: nowrap'>&nbsp;\mu</span></code>
 for the rate
of other cause mortality (because omega begins with o).

<br>
<br>
<b><big><a name="2.bh" id="2.bh">2.bh: 2011-10-07</a></big></b>
<br>
Use <a href="www.mortality.org" target="_top"><span style='white-space: nowrap'>www.mortality.org</span></a>
 for all cause mortality data
in <a href="#6.2">6.2: <span style='white-space: nowrap'>diabetes.sh</span></a>
 example; see <code><font color="blue">example/diabetes/measure_in.sh</font></code>.

<br>
<br>
<b><big><a name="2.bi" id="2.bi">2.bi: 2011-10-03</a></big></b>

<ol type="1"><li>
Document the <a href="#6.2">6.2: <span style='white-space: nowrap'>diabetes.sh</span></a>
 example and use
it to replace the <code><font color="blue">hep_c.sh</font></code> example.
</li><li>

Move <code><font color="blue">example/dismod_pde_csv.sh</font></code> to 
<a href="#6.1">6.1: <span style='white-space: nowrap'>example/get_started</span></a>
.
</li></ol>


<br>
<br>
<b><big><a name="2.bj" id="2.bj">2.bj: 2011-10-02</a></big></b>

<ol type="1"><li>
Add <a href="#5.1.j.b">5.1.j.b: <span style='white-space: nowrap'>lower</span></a>

and <a href="#5.1.j.d">5.1.j.d: <span style='white-space: nowrap'>upper</span></a>
 limits
to the 
<a href="#5.1.r.b">5.1.r.b: <span style='white-space: nowrap'>optimization&nbsp;problem</span></a>
.
In addition, group these with the optimizer
<a href="#5.1.j.c">5.1.j.c: <span style='white-space: nowrap'>initial</span></a>
 value
(starting value).
</li><li>

Remove the uniform distribution from the possible
<a href="#5.1.j.e">5.1.j.e: <span style='white-space: nowrap'>prior_like</span></a>
 options
(use lower and upper limits instead).
</li><li>

Add lower and upper bounds to <a href="#4.2.2">4.2.2: <span style='white-space: nowrap'>d4_change_sfun_in.py</span></a>
 and
organize input by the column groups,
<code><font color="blue">optimize</font></code>, <code><font color="blue">prior</font></code>, <code><font color="blue">age</font></code> and <code><font color="blue">cohort</font></code> 
instead of organizing by name.
For example
<code><font color="blue">-iota_prior</font></code> was changed to <code><font color="blue">-prior_iota</font></code>
and the new group <code><font color="blue">-optimize_iota</font></code> was added.
In addition, use <code><font color="blue">-comment</font></code> alone (without variable name)
for comments.
</li></ol>



<br>
<br>
<b><big><a name="2.bk" id="2.bk">2.bk: 2011-09-27</a></big></b>
<br>
Change diabetes example to use uniform, instead of Gaussian, distribution
for the prior on remission <code>
<span style='white-space: nowrap'>&nbsp;\rho</span></code>
.
Since the lower and upper limits for the uniform were equal,
this reduced the number of variables in the optimization problem by 
about 18 percent.


<br>
<br>
<b><big><a name="2.bl" id="2.bl">2.bl: 2011-09-26</a></big></b>

<ol type="1"><li>
Some values that were equal to 
<a href="#4.1.d">4.1.d: <span style='white-space: nowrap'>infinity</span></a>
 were being written as <code><font color="blue">1e19</font></code>
instead of <code><font color="blue">inf</font></code>.  This has been fixed.
</li><li>

Use 
<code><i><font color="black"><span style='white-space: nowrap'>plot_file</span></font></i><font color="blue"><span style='white-space: nowrap'>='screen'</span></font></code>
 
for plots to the screen (not <code><font color="blue">''</font></code>).
</li><li>

There was a bug in <code><font color="blue">example/diabetes/plot_measure.sh</font></code> and it
was plotting <code><font color="blue">prevalence</font></code> no matter what variable was chosen.
This has been fixed.
</li><li>

Change <a href="#4.2.6">4.2.6: <span style='white-space: nowrap'>d4_plot.py</span></a>
 to only draw one figure
and to allow for plots to either the screen of a file
(not just the screen).
</li></ol>


<br>
<br>
<b><big><a name="2.bm" id="2.bm">2.bm: 2011-09-25</a></big></b>
<br>
The <code><font color="blue">bound</font></code> option has been changed to <code><font color="blue">uniform</font></code>
(for the uniform distribution)
and the role of <code><font color="blue">mean</font></code> and <code><font color="blue">sigma</font></code>, for this case, has been switch.
In addition, lower as well as upper bounds have been included 
and this option has been added to the dismod_pde API; see
<a href="#5.1.f.a">5.1.f.a: <span style='white-space: nowrap'>Huber&nbsp;loss&nbsp;function</span></a>
 
and
<a href="#5.1.o.b">5.1.o.b: <span style='white-space: nowrap'>prior&nbsp;residual</span></a>
.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>The bounds API entry, stiff integration entry, and
optimization limits entry were removed from
the <a href="#7">7: <span style='white-space: nowrap'>wish_list</span></a>
 (they have been completed).
<code><span style='white-space: nowrap'><br>
<br>
</span></code>The returned residuals were changed from zero to <code>
<span style='white-space: nowrap'>&nbsp;\infty</span></code>

in the undefined cases; e.g., see the <code>
<span style='white-space: nowrap'>&nbsp;\infty</span></code>
 cases for
<a href="#5.1.o.d">5.1.o.d: <span style='white-space: nowrap'>age_residual</span></a>
 and
<a href="#5.1.o.e">5.1.o.e: <span style='white-space: nowrap'>age_scaled</span></a>
.

<br>
<br>
<b><big><a name="2.bn" id="2.bn">2.bn: 2011-08-16</a></big></b>
<br>
Add feature where for prior likelihood is <code><font color="blue">bound</font></code>,
the prior mean is an upper bound for the corresponding variable.
(Just in testing phase and not yet documented).

<br>
<br>
<b><big><a name="2.bo" id="2.bo">2.bo: 2011-08-09</a></big></b>

<ol type="1"><li>
Fix bug in <code><font color="blue">d4_cumulative.py</font></code>
(the <a href="#4.2.5.d">4.2.5.d: <span style='white-space: nowrap'>f_name</span></a>
 argument was not working
correctly). 
</li><li>

Change the sign of the covariate multipliers in the 
<a href="#5.1.p.a">5.1.p.a: <span style='white-space: nowrap'>adjusted</span></a>
 data equation
so that a positive multiplier means a positive correlation between
the covariate and the corresponding data value.
</li></ol>


<br>
<br>
<b><big><a name="2.bp" id="2.bp">2.bp: 2011-08-05</a></big></b>
<br>
Change the
<a href="#5.1.o.d">5.1.o.d: <span style='white-space: nowrap'>age&nbsp;residual</span></a>
 calculation
to use the semi-stiff integrator
<a href="http://www.coin-or.org/CppAD/Doc/rosen34.xml" target="_top"><span style='white-space: nowrap'>Rosen34</span></a>
 (http://www.coin-or.org/CppAD/Doc/rosen34.xml) ,
instead of the non-stiff integrator
<a href="http://www.coin-or.org/CppAD/Doc/runge45.xml" target="_top"><span style='white-space: nowrap'>Runge45</span></a>
 (http://www.coin-or.org/CppAD/Doc/runge45.xml) .
This avoids the occurrence of not a number (nan), 
and corresponding abort,
when the optimizer tries a large and not realistic value for 
the rate constants in the ODE for <code>
<span style='white-space: nowrap'>&nbsp;S</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;C</span></code>
.

<br>
<br>
<b><big><a name="2.bq" id="2.bq">2.bq: 2011-08-04</a></big></b>
<br>
The <a href="#4.2.4">4.2.4: <span style='white-space: nowrap'>d4_contour.py</span></a>
 command line arguments

<code><i><font color="black"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x_min,&nbsp;x_max,&nbsp;y_min,&nbsp;y_max<br>
</span></font></i></code>
were not being used to limit the plot ranges.
This has been fixed.

<br>
<br>
<b><big><a name="2.br" id="2.br">2.br: 2011-08-02</a></big></b>
<br>
Use new version of CppAD <code><font color="blue">PrintFor</font></code> command
that enables us to print bad results during zero order forward mode.
This way it is not necessary to recompile and run
with retape <code><font color="blue">true</font></code> to get error message (this was a slow process).

<br>
<br>
<b><big><a name="2.bs" id="2.bs">2.bs: 2011-07-27</a></big></b>

<ol type="1"><li>
Improve debugging output when approximation for <code>
<span style='white-space: nowrap'>&nbsp;S</span></code>
 or <code>
<span style='white-space: nowrap'>&nbsp;C</span></code>

becomes negative.
</li><li>

Add the 
<a href="#5.1.h.e">5.1.h.e: <span style='white-space: nowrap'>debug_output</span></a>
 parameter
which improves the users ability to track down problems.
</li></ol>


<br>
<br>
<b><big><a name="2.bt" id="2.bt">2.bt: 2011-07-14</a></big></b>
<br>
Add a <code><font color="blue">comment</font></code> column to the 

<code><i><font color="black"><span style='white-space: nowrap'>measure_in.csv</span></font></i></code>
 file.

<br>
<br>
<b><big><a name="2.bu" id="2.bu">2.bu: 2011-05-11</a></big></b>
<br>
The correction on <a href="#2.bw">2.bw: <span style='white-space: nowrap'>2011-05-03</span></a>

introduced a bug whereby the <code>
<span style='white-space: nowrap'>&nbsp;\sigma</span></code>
 values  
were not being set correctly. This has been fixed

<br>
<br>
<b><big><a name="2.bv" id="2.bv">2.bv: 2011-05-04</a></big></b>

<ol type="1"><li>
Change the <code><font color="blue">hep_c.sh</font></code> example data from excess mortality
to relative risk.
(The <code><font color="blue">hep_c.sh</font></code> example has been replaced; see 
<a href="#2.bi">2.bi: <span style='white-space: nowrap'>2011-10-03</span></a>
).

</li><li>

Advance to a newer version of CppAD (20110505) which detects and reports
nans and infinities during the optimization procedure.

</li></ol>


<br>
<br>
<b><big><a name="2.bw" id="2.bw">2.bw: 2011-05-03</a></big></b>
<br>
Values written to the <a href="#4.1">4.1: <span style='white-space: nowrap'>dismod_pde_csv</span></a>
 output files
were being rounded off so that they fit in a certain number of
columns and the columns lined up.
This lead to later errors where time was not equal to age plus cohort.
The error has been fixed by no longer lining up the columns of the output files 
(which is not a problem because one usually uses a spread sheet to 
view the output files).

<br>
<br>
<b><big><a name="2.bx" id="2.bx">2.bx: 2011-05-02</a></big></b>

<ol type="1"><li>
The optimizer would sometimes detect a <code><font color="blue">Nan</font></code>.
This was due was a bug in the evaluations of the constraint equations
during optimization.
(Constraint equations corresponding <code>
<span style='white-space: nowrap'>&nbsp;\sigma&nbsp;=&nbsp;0</span></code>
 in the <a href="#5.1.f.a">5.1.f.a: <span style='white-space: nowrap'>Huber&nbsp;Loss&nbsp;Function</span></a>
.)

</li><li>

Another source of the <code><font color="blue">Nan</font></code> was that the ODE solver step size
(of one year) was too large for some problems and the corresponding
solution for S and C was negative.
Therefore a <code><font color="blue">stiff ODE solver</font></code> 
entry was added to the wish list 
(complete on <a href="#2.bm">2.bm: <span style='white-space: nowrap'>2011-09-25</span></a>
).
In addition, this problem could be detected if we used
<a href="#7.b">7.b: <span style='white-space: nowrap'>retaping</span></a>
.

</li><li>

Add <code><font color="blue">exp</font></code> to the functions available to the expressions in
<a href="#4.2.2">4.2.2: <span style='white-space: nowrap'>d4_change_sfun_in.py</span></a>
.

</li><li>

The error messaging during reading the <a href="#4.1">4.1: <span style='white-space: nowrap'>dismod_pde_csv</span></a>

input files has been improved.

</li></ol>



<br>
<br>
<b><big><a name="2.by" id="2.by">2.by: 2011-04-28</a></big></b>
<br>
Fix unix <code><font color="blue">sed</font></code> command error on install for Mac systems.

<br>
<br>
<b><big><a name="2.bz" id="2.bz">2.bz: 2011-04-27</a></big></b>

<ol type="1"><li>
Make all of the installed <a href="#4.2">4.2: <span style='white-space: nowrap'>python_csv</span></a>
 scripts
automatically use the version of python chosen during the 
<a href="#3.e">3.e: <span style='white-space: nowrap'>configure</span></a>
 command.
</li><li>

Improve the <a href="#6">6: <span style='white-space: nowrap'>example</span></a>
 and its documentation. 
</li><li>

Group all the <a href="#4.2">4.2: <span style='white-space: nowrap'>python_csv</span></a>
 scripts together
and include the <a href="#4.2.5">4.2.5: <span style='white-space: nowrap'>d4_cumulative.py</span></a>
 documentation
(which was missing in previous versions).
</li></ol>


<br>
<br>
<b><big><a name="2.ca" id="2.ca">2.ca: 2011-04-26</a></big></b>
<br>
The <code><font color="blue">hep_c.sh</font></code>, <code><font color="blue">prevalence.csv.csv</font></code>, 
and <code><font color="blue">all_cause.csv</font></code> files 
were missing from the distribution.
Fix this by reorganizing the <code><font color="blue">hep_c</font></code> example.

<br>
<br>
<b><big><a name="2.cb" id="2.cb">2.cb: 2011-04-25</a></big></b>
<br>
Fix warning about using <code><font color="blue">abs</font></code> where should use <code><font color="blue">fabs</font></code>
in <a href="#5.1.2">5.1.2: <span style='white-space: nowrap'>optimize_xam.cpp</span></a>
 source code.

<br>
<br>
<b><big><a name="2.cc" id="2.cc">2.cc: 2011-04-23</a></big></b>

<ol type="1"><li>
Change python script names to all begin with <code><font color="blue">d4_</font></code> 
(for dismod_pde) and install them in the dismod_pde
<a href="#3.j">3.j: <span style='white-space: nowrap'>prefix</span></a>
 directory; see

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>/bin/d4_</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>.py<br>
</span></font></code>
.

</li><li>

Change 
<code><i><font color="black"><span style='white-space: nowrap'>term</span></font></i><font color="blue"><span style='white-space: nowrap'>_name</span></font></code>
 to 
<code><i><font color="black"><span style='white-space: nowrap'>term_like</span></font></i></code>
 for

<code><i><font color="black"><span style='white-space: nowrap'>term</span></font></i></code>
 equal to <code><font color="blue">meas</font></code>, <code><font color="blue">prior</font></code>, <code><font color="blue">age</font></code>, and
<code><font color="blue">cohort</font></code>.

</li><li>

Improve <code><font color="blue">hep_c</font></code> documentation
and include links to the input prevalence and all cause mortality data.

</li></ol>


<br>
<br>
<b><big><a name="2.cd" id="2.cd">2.cd: 2011-04-10</a></big></b>
<br>
Add the <code><font color="blue">PYTHON_PREFIX</font></code> argument to the configure command line
so that we can use dismod_pde on omak (which by default uses a very old version 
of python).

<br>
<br>
<b><big><a name="2.ce" id="2.ce">2.ce: 2011-04-08</a></big></b>
<br>
The model for the Hepatitis C real data example <code><font color="blue">hep_c.sh</font></code> has been
improved and it now runs on both with and without excess mortality
and on the age and cohort grid spacings of 15, 10, and 5 years.
(The <code><font color="blue">hep_c.sh</font></code> example has been replaced; see 
<a href="#2.bi">2.bi: <span style='white-space: nowrap'>2011-10-03</span></a>
).

<br>
<br>
<b><big><a name="2.cf" id="2.cf">2.cf: 2011-04-06</a></big></b>
<br>
Make the parameters in 
<a href="#4.1.e">4.1.e: <span style='white-space: nowrap'>parameter.csv</span></a>
 optional; 
i.e., they get their default value if not present.

<br>
<br>
<b><big><a name="2.cg" id="2.cg">2.cg: 2011-04-05</a></big></b>
<br>
The old version of the paper has been removed from the distribution.
It is out of date and a new paper is being written for submission
as a journal article.

<br>
<br>
<b><big><a name="2.ch" id="2.ch">2.ch: 2011-04-03</a></big></b>
<br>
Add the real data <code><font color="blue">hep_c.sh</font></code> example and test.

<br>
<br>
<b><big><a name="2.ci" id="2.ci">2.ci: 2011-03-31</a></big></b>
<br>
Add the <a href="#4.2.8">4.2.8: <span style='white-space: nowrap'>d4_sfun_grid.py</span></a>
 routine
for interpolating the <a href="#4.1.i">4.1.i: <span style='white-space: nowrap'>sfun_out.csv</span></a>
 
values to a rectangular grid in age and time.

<br>
<br>
<b><big><a name="2.cj" id="2.cj">2.cj: 2011-03-29</a></big></b>

<ol type="1"><li>
Make all the residuals use the same transformation; i.e.,
use the <code><font color="blue">zeta</font></code> offset with all residuals and 
make the scaled residual just the residual divided by the 
corresponding <code><font color="blue">sigma</font></code>.
</li><li>

Extensive improvements to the 
<a href="#4.1">4.1: <span style='white-space: nowrap'>dismod_pde_csv</span></a>
 and <a href="#5.1">5.1: <span style='white-space: nowrap'>optimize</span></a>
 documentation.
</li><li>

Remove the <code><font color="blue">check_opt</font></code> routine because it was not a reliable test
(used difference of penalty functions for constraint checking).
</li><li>

Add test of residuals returned by <code><font color="blue">optimize</font></code>;
see <a href="#5.1.2">5.1.2: <span style='white-space: nowrap'>optimize_xam.cpp</span></a>
.
</li><li>

Change second order residuals so that they are defined
in terms of first order residuals (simplifies notation).
</li></ol>


<br>
<br>
<b><big><a name="2.ck" id="2.ck">2.ck: 2011-03-25</a></big></b>

<ol type="1"><li>
For 
<code><i><font color="black"><span style='white-space: nowrap'>param</span></font></i></code>
 equal to <code><font color="blue">name</font></code>, <code><font color="blue">zeta</font></code> and <code><font color="blue">sigma</font></code>,
change 
<code><font color="blue"><span style='white-space: nowrap'>likelihood_</span></font><i><font color="black"><span style='white-space: nowrap'>param</span></font></i></code>
 to 
<code><font color="blue"><span style='white-space: nowrap'>meas_</span></font><i><font color="black"><span style='white-space: nowrap'>param</span></font></i></code>
.
This better distinguishes them from the other names, zetas, and sigmas.
</li><li>

Change the <code><font color="blue">value</font></code> column to the <code><font color="blue">meas_value</font></code> column in
<a href="#4.1.f">4.1.f: <span style='white-space: nowrap'>measure_in.csv</span></a>

(so it looks more like <code><font color="blue">meas_like</font></code>, <code><font color="blue">meas_zeta</font></code>, ...).
</li></ol>



<br>
<br>
<b><big><a name="2.cl" id="2.cl">2.cl: 2011-03-23</a></big></b>
<br>
Fix bug in the second order age difference
when it starts at <code>
<span style='white-space: nowrap'>&nbsp;(0,&nbsp;k)</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;(1,&nbsp;k)</span></code>
 is not in the 
computational grid.
The <code><font color="blue">test/age2_from0.sh</font></code> test now passes.

<br>
<br>
<b><big><a name="2.cm" id="2.cm">2.cm: 2011-03-21</a></big></b>
<br>
Add <code><font color="blue">test/age2_form0.sh</font></code>,
a new test that demonstrates a bug in the second order age difference
when it starts at <code>
<span style='white-space: nowrap'>&nbsp;(0,&nbsp;k)</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;(1,&nbsp;k)</span></code>
 is not in the
computational grid.

<br>
<br>
<b><big><a name="2.cn" id="2.cn">2.cn: 2011-03-17</a></big></b>
<br>
Run the Hepatitis-C example in 
the <code><font color="blue">build</font></code> subdirectory as part of the
<a href="#3.h">3.h: <span style='white-space: nowrap'>make&nbsp;test_all</span></a>
 command.
(We are not yet checking the output, just making sure it runs.)

<br>
<br>
<b><big><a name="2.co" id="2.co">2.co: 2011-02-12</a></big></b>
<br>
More derived file generator to <a href="#4.2.7">4.2.7: <span style='white-space: nowrap'>d4_sfun_der.py</span></a>
 and 
change interface so an use any sfun_out values to define derived
quantities.

<br>
<br>
<b><big><a name="2.cp" id="2.cp">2.cp: 2011-02-10</a></big></b>
<br>
Create the <code><font color="blue">derived_csv.py</font></code> program so that we can plot
derived quantities like the estimate for prevalence.

<br>
<br>
<b><big><a name="2.cq" id="2.cq">2.cq: 2011-02-09</a></big></b>
<br>
The <a href="#4.2.6">4.2.6: <span style='white-space: nowrap'>d4_plot.py</span></a>
 program has been extended to
control when <code><font color="blue">--lines</font></code> or just <code><font color="blue">--points</font></code> are plotted,
and to used limits as well as values for 
<a href="#4.2.6.i">4.2.6.i: <span style='white-space: nowrap'>connections</span></a>
.


<br>
<br>
<b><big><a name="2.cr" id="2.cr">2.cr: 2011-01-27</a></big></b>
<br>
Remove mistaken comma at the end of each line in 
<a href="#4.1.i">4.1.i: <span style='white-space: nowrap'>sfun_out.csv</span></a>
.

<br>
<br>
<b><big><a name="2.cs" id="2.cs">2.cs: 2011-01-25</a></big></b>

<ol type="1"><li>
There was a bug in the <a href="#4">4: <span style='white-space: nowrap'>csv</span></a>
 file reader when the 
last field in line was completely empty; i.e., when a line ended 
in a comma. This has been fixed.
</li><li>

The date in the columns <code><font color="blue">model</font></code> and <code><font color="blue">corrected</font></code>
were switch in the file
<a href="#4.1.j">4.1.j: <span style='white-space: nowrap'>measure_out.csv</span></a>
.
This has been fixed.
</li></ol>



<br>
<br>
<b><big><a name="2.ct" id="2.ct">2.ct: 2011-01-21</a></big></b>
<br>
There was an error message bug that aborted <a href="#4.1">4.1: <span style='white-space: nowrap'>dismod_pde_csv</span></a>

when ever there was one and only one covariate column specified by

<code><i><font color="black"><span style='white-space: nowrap'>covariate_in.csv</span></font></i></code>
.

<br>
<br>
<b><big><a name="2.cu" id="2.cu">2.cu: 2010-10-16</a></big></b>

<ol type="1"><li>
Major changes were made to the <a href="#7">7: <span style='white-space: nowrap'>wish_list</span></a>
.
Completed entries were removed,
new entries were added,
and then some entries were combined under one heading.
</li><li>

One of the tests in <code><font color="blue">test/check_opt_tst.cpp/</font></code> did not work 
under fedora (while it did work under cygwin).
This is because the maximum number of iterations was to small
(for the actual simulated noise sequence).
This has been fixed.
</li><li>

Add time to the columns output by <a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>

and change the column order from <code><font color="blue">cohort</font></code>, <code><font color="blue">age</font></code>, ...,
to <code><font color="blue">age</font></code>, <code><font color="blue">cohort</font></code>, ...
</li></ol>


<br>
<br>
<b><big><a name="2.cv" id="2.cv">2.cv: 2010-10-14</a></big></b>

<ol type="1"><li>
The <a href="#4.2.6">4.2.6: <span style='white-space: nowrap'>d4_plot.py</span></a>
 option <code><font color="blue">--filter</font></code> was changed
to <a href="#4.2.6.g">4.2.6.g: <span style='white-space: nowrap'>--string</span></a>
 and the
<a href="#4.2.6.h">4.2.6.h: <span style='white-space: nowrap'>--numeric</span></a>
 option was added.
This new option allows one to use expressions for the selection.
So, for example, one can exclude age zero from the plots
(there is often a large gap between age zero and the next point
on the computational grid).

</li><li>

Change <a href="#4.2.3">4.2.3: <span style='white-space: nowrap'>d4_compare_sfun.py</span></a>
 so that the acceptance is
an expression that can depend on the time and other factors
(not just an absolute and relative tolerance that are constant).

</li><li>

Add non-monotonic test case that passes test
(called <code><font color="blue">test/gaussian.sh</font></code> because incidence is Gaussian
w.r.t. age).

</li></ol>



<br>
<br>
<b><big><a name="2.cw" id="2.cw">2.cw: 2010-10-13</a></big></b>

<ol type="1"><li>
Enable <a href="#4.2.6">4.2.6: <span style='white-space: nowrap'>d4_plot.py</span></a>
 to plot multiple figures.
</li><li>

Add 
<code><i><font color="black"><span style='white-space: nowrap'>symbol</span></font></i></code>
 to  <code><font color="blue">--pair</font></code>
<code><font color="blue">d4_plot.py</font></code> plots.
</li><li>

A bilinear test case is now passing; see <code><font color="blue">test/bilinear.sh</font></code>.
</li></ol>



<br>
<br>
<b><big><a name="2.cx" id="2.cx">2.cx: 2010-10-12</a></big></b>
<br>
There was a bug for the last (largest) age and cohort differences
when first and second 
<a href="#4.1.g.g">4.1.g.g: <span style='white-space: nowrap'>order</span></a>

differences were mixed between variables; e.g., 
<code><font color="blue">iota</font></code> used second difference and <code><font color="blue">rho</font></code> used first differences.
This has been fixed.


<br>
<br>
<b><big><a name="2.cy" id="2.cy">2.cy: 2010-10-11</a></big></b>

<ol type="1"><li>
The <code><font color="blue">age_order</font></code> field was added
to the stochastic function input information in
<a href="#5.1.j">5.1.j: <span style='white-space: nowrap'>sfun_in</span></a>
 and
<a href="#4.1.g">4.1.g: <span style='white-space: nowrap'>sfun_in.csv</span></a>
.
This enables one to use either first or second differences 
with respect to age when modeling the stochastic functions.

</li><li>

The <a href="#4.2.2">4.2.2: <span style='white-space: nowrap'>d4_change_sfun_in.py</span></a>
 was extended so that 
the likelihood <a href="#4.2.2.j">4.2.2.j: <span style='white-space: nowrap'>name</span></a>

can depend on the age and cohort values.

</li></ol>



<br>
<br>
<b><big><a name="2.cz" id="2.cz">2.cz: 2010-10-10</a></big></b>
<br>
Move <code><font color="blue">check_sfun_out.py</font></code>
to <a href="#4.2.3">4.2.3: <span style='white-space: nowrap'>d4_compare_sfun.py</span></a>
 and change it from just a checker
to program that outputs as csv file for comparison between
estimate and true solution.

<br>
<br>
<b><big><a name="2.da" id="2.da">2.da: 2010-10-09</a></big></b>


<ol type="1"><li>
Add <a href="#10">10: <span style='white-space: nowrap'>_index</span></a>
 entries to the user documentation.

</li><li>

Remove which space 
the template version of 
<a href="#4.1.g.a">4.1.g.a: <span style='white-space: nowrap'>sfun_in.csv</span></a>

so that each output row is less than 80 columns.

</li><li>

Add <a href="#4.2.2.1">4.2.2.1: <span style='white-space: nowrap'>change_sfun_in.sh</span></a>
,
an example and test of <a href="#4.2.2">4.2.2: <span style='white-space: nowrap'>d4_change_sfun_in.py</span></a>
.

</li></ol>




<br>
<br>
<b><big><a name="2.db" id="2.db">2.db: 2010-10-08</a></big></b>

<ol type="1"><li>
Split up the user documentation into separate sections for the 
<a href="#4">4: <span style='white-space: nowrap'>csv</span></a>
 and <a href="#5">5: <span style='white-space: nowrap'>c++</span></a>
 interfaces.

</li><li>

Added <a href="#4.2.6">4.2.6: <span style='white-space: nowrap'>d4_plot.py</span></a>
 for quick plots of the results in 
<a href="#4.1.i">4.1.i: <span style='white-space: nowrap'>sfun_out.csv</span></a>
.

</li><li>

Update the <a href="#7">7: <span style='white-space: nowrap'>wish_list</span></a>
.

</li><li>

Add documentation about the forward difference 
standard deviation factor
(this was later made unnecessary by including the factor in the 
definition of the 
<a href="#5.1.o.d">5.1.o.d: <span style='white-space: nowrap'>age</span></a>
 and
<a href="#5.1.o.f">5.1.o.f: <span style='white-space: nowrap'>cohort</span></a>

residuals.

</li></ol>


<br>
<br>
<b><big><a name="2.dc" id="2.dc">2.dc: 2010-10-07</a></big></b>
<br>
Add the command line arguments
<a href="#4.2.9.o.c">4.2.9.o.c: <span style='white-space: nowrap'>number</span></a>
 and
<a href="#4.2.9.o.b">4.2.9.o.b: <span style='white-space: nowrap'>integrand</span></a>
 to
the data simulator.


<br>
<br>
<b><big><a name="2.dd" id="2.dd">2.dd: 2010-10-06</a></big></b>

<ol type="1"><li>
Create the python script <code><font color="blue">check_sfun_out.py</font></code>
that check solutions by <a href="#4.1">4.1: <span style='white-space: nowrap'>dismod_pde_csv</span></a>

of problems simulated by <a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>
.

</li><li>

Change names used inside of <a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>
 to agree
with data file column names; e.g.,

<code><i><font color="black"><span style='white-space: nowrap'>age_lower</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>age_upper</span></font></i></code>
. 

</li><li>

Run <a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>
 tests with larger values than one
for 
<code><i><font color="black"><span style='white-space: nowrap'>age_upper</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age_lower</span></font></i></code>
 and

<code><i><font color="black"><span style='white-space: nowrap'>time_upper</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_lower</span></font></i></code>
.
This turned up a bug in the setting of the 

<code><i><font color="black"><span style='white-space: nowrap'>age_lower</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>age_upper</span></font></i></code>

for a simulated measurement (which has been fixed).

</li><li>

Add the following command line arguments to the data simulator
<a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>
: 
<table><tr><td align='left'  valign='top'>

age_bound   <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
   
	bound on age_upper - age_lower for a measurement (integer &gt; 0)
</td></tr><tr><td align='left'  valign='top'>

cohort_step <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>

	step size for cohort in solution.csv (positive integer)
</td></tr><tr><td align='left'  valign='top'>

time_min    <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>

	minimum lower time limit for a measurements (integer &gt; 0)
</td></tr><tr><td align='left'  valign='top'>

time_max    <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>

	maximum upper time limit for a measurements (integer &gt; 0)
</td></tr><tr><td align='left'  valign='top'>

time_bound  <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>

	bound on time_upper - time_lower for a measurement (integer &gt; 0)
</td></tr><tr><td align='left'  valign='top'>

iota_exp    <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>

	expression for <code>
<span style='white-space: nowrap'>&nbsp;\iota&nbsp;(&nbsp;\cdot&nbsp;)</span></code>
 
	as a function of 
<code><i><font color="black"><span style='white-space: nowrap'>a</span></font></i></code>
  and 
<code><i><font color="black"><span style='white-space: nowrap'>c</span></font></i></code>
 (age and cohort)
</td></tr><tr><td align='left'  valign='top'>

rho_exp     <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>

	expression for <code>
<span style='white-space: nowrap'>&nbsp;\rho&nbsp;(&nbsp;\cdot&nbsp;)</span></code>
 
	as a function of 
<code><i><font color="black"><span style='white-space: nowrap'>a</span></font></i></code>
  and 
<code><i><font color="black"><span style='white-space: nowrap'>c</span></font></i></code>
 (age and cohort)
</td></tr><tr><td align='left'  valign='top'>

chi_exp     <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>

	expression for <code>
<span style='white-space: nowrap'>&nbsp;\iota&nbsp;(&nbsp;\cdot&nbsp;)</span></code>
 
	as a function of 
<code><i><font color="black"><span style='white-space: nowrap'>a</span></font></i></code>
  and 
<code><i><font color="black"><span style='white-space: nowrap'>c</span></font></i></code>
 (age and cohort)
</td></tr><tr><td align='left'  valign='top'>

mu_exp      <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>

	expression for <code>
<span style='white-space: nowrap'>&nbsp;\mu&nbsp;(&nbsp;\cdot&nbsp;)</span></code>
 
	as a function of 
<code><i><font color="black"><span style='white-space: nowrap'>a</span></font></i></code>
  and 
<code><i><font color="black"><span style='white-space: nowrap'>c</span></font></i></code>
 (age and cohort)
</td></tr>
</table>
</li></ol>
<br>
<b><big><a name="2.de" id="2.de">2.de: 2010-10-05</a></big></b>
<br>
Improve documentation and automated testing in <a href="#6.1">6.1: <span style='white-space: nowrap'>get_started.sh</span></a>
.

<br>
<br>
<b><big><a name="2.df" id="2.df">2.df: 2010-09-30</a></big></b>

<ol type="1"><li>
Added covariates input and output information.
For the new csv <a href="#4.1">4.1: <span style='white-space: nowrap'>dismod_pde_csv</span></a>
 interface, see

<code><i><font color="black"><span style='white-space: nowrap'>covariate_in.csv</span></font></i></code>
 and

<code><i><font color="black"><span style='white-space: nowrap'>covariate_out.csv</span></font></i></code>
.
For the new <a href="#5.1">5.1: <span style='white-space: nowrap'>optimize</span></a>
 interface, see
<code><font color="blue">covariate_in</font></code> and
<code><font color="blue">covariate_out</font></code> in <a href="#5.1">5.1: <span style='white-space: nowrap'>optimize</span></a>
.
</li><li>

Added <a href="#6.1">6.1: <span style='white-space: nowrap'>get_started.sh</span></a>
, and example 
and test for <a href="#4.1">4.1: <span style='white-space: nowrap'>dismod_pde_csv</span></a>
.
</li><li>

The anorexia example, 
and its supporting scripts,
were removed because we do not know the true answer
(and hence it just serves to confuse).
</li><li>

The <a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>
 script was moved to the 
<code><font color="blue">src</font></code> directory because it is used by programs
in both the <code><font color="blue">example</font></code> and <code><font color="blue">test</font></code> directories.
The name of its input and output files 
were changed to be command line arguments.
</li></ol>


<br>
<br>
<b><big><a name="2.dg" id="2.dg">2.dg: 2010-09-28</a></big></b>

<ol type="1"><li>
Change the default 
<a href="#3.j">3.j: <span style='white-space: nowrap'>prefixes</span></a>

used to build the 
<a href="#3.d">3.d: <span style='white-space: nowrap'>external&nbsp;packages</span></a>

from the build subdirectory to 
<code><font color="blue"><span style='white-space: nowrap'>$HOME/prefix/</span></font><i><font color="black"><span style='white-space: nowrap'>package</span></font></i></code>
.
This way one need not rebuild all the packages 
each time they get a new version of dismod_pde.

</li><li>

Add some missing items to the list of 
<a href="#3.a">3.a: <span style='white-space: nowrap'>requirements</span></a>
.

</li><li>

Change <code>
<span style='white-space: nowrap'>&nbsp;\beta</span></code>
 and <code><font color="blue">beta</font></code> to
<code>
<span style='white-space: nowrap'>&nbsp;\zeta</span></code>
 and <code><font color="blue">zeta</font></code>; for example, see
<a href="#5.1.j.j">5.1.j.j: <span style='white-space: nowrap'>age_zeta</span></a>
.

</li><li>

In the csv files, 
change 
<code><font color="blue"><span style='white-space: nowrap'>age_like.</span></font><i><font color="black"><span style='white-space: nowrap'>field</span></font></i></code>
 to 
<code><font color="blue"><span style='white-space: nowrap'>age_like_</span></font><i><font color="black"><span style='white-space: nowrap'>field</span></font></i></code>
, and
change 
<code><font color="blue"><span style='white-space: nowrap'>cohort_like.</span></font><i><font color="black"><span style='white-space: nowrap'>field</span></font></i></code>
 to 
<code><font color="blue"><span style='white-space: nowrap'>cohort_like_</span></font><i><font color="black"><span style='white-space: nowrap'>field</span></font></i></code>
; e.g.,
see <a href="#4.1.g">4.1.g: <span style='white-space: nowrap'>sfun_in.csv</span></a>
.

</li><li>

Do not allow single quote, double quote, back quote, or semi-colon
<a href="#4.a">4.a: <span style='white-space: nowrap'>dismod_pde&nbsp;csv&nbsp;files</span></a>
.

</li><li>

Use <code><font color="blue">inf</font></code> instead of <code><font color="blue">1e+19</font></code> for plus 
<a href="#4.1.d">4.1.d: <span style='white-space: nowrap'>infinity</span></a>
 in CSV input files.

</li></ol>


 

<br>
<br>
<b><big><a name="2.dh" id="2.dh">2.dh: 2010-09-27</a></big></b>

<ol type="1"><li>
Include all four versions of the documentation and put a link to them
on the <a href="#">: <span style='white-space: nowrap'>title&nbsp;page</span></a>
 of the documentation.
</li><li>

First version that installs from a tarball 
(in addition to installing from a clone of the git repository).
</li><li>

Add instructions for <a href="#3">3: <span style='white-space: nowrap'>installing</span></a>
 from a tarball. 
</li><li>

Avoid the last test in <code><font color="blue">test/check_opt_tst.cpp</font></code>.
It is failing by a small amount on some machines and we need to determine why.
</li></ol>


<br>
<br>
<b><big><a name="2.di" id="2.di">2.di: 2010-09-24</a></big></b>

<ol type="1"><li>
Changed <code><font color="blue">DISMOD4_N_STOCHASTIC</font></code> to
<code><font color="blue">dismod_pde::stochastic_enum.name().size()</font></code>; see
<a href="#5.1.c">5.1.c: <span style='white-space: nowrap'>Stochastic_Enum</span></a>

</li><li>

Changed <code><font color="blue">DISMOD4_N_INTEGRAND</font></code> to
<code><font color="blue">dismod_pde::integrand_enum.name().size()</font></code>; see
<a href="#5.1.l.b">5.1.l.b: <span style='white-space: nowrap'>Integrand_Enum</span></a>
.
</li><li>

Added mappings from each of the enum types to the corresponding string; see
also <a href="#5.1.f.b">5.1.f.b: <span style='white-space: nowrap'>Likelihood_Enum</span></a>
.
</li><li>

Changed <code><font color="blue">Likelihood_Name_Enum</font></code> to <code><font color="blue">Likelihood_Enum</font></code>
so it was like the other enum types listed above.
</li></ol>



<br>
<br>
<b><big><a name="2.dj" id="2.dj">2.dj: 2010-09-23</a></big></b>

<ol type="1"><li>
Build program in the <code><font color="blue">build</font></code> subdirectory of the 
top level git repository directory.
</li><li>

Add the shell scripts 
<code><font color="blue">get_ipopt.sh</font></code>, 
<code><font color="blue">get_cppad.sh</font></code>, and
<code><font color="blue">get_omhelp.sh</font></code> which downloads and install
externals that are necessary for building dismod_pde on an arbitrary machine.
</li><li>

First successful distribution of <a href="#4.1">4.1: <span style='white-space: nowrap'>dismod_pde_csv</span></a>
 to 
<code><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></code> 
<code><font color="blue">omak.ihme.washington.edu:/tmp/dismod_pde.0923/build/bin/dismod_pde_csv</font></code>
</li><li>

Fix bug in <a href="#4.1.j">4.1.j: <span style='white-space: nowrap'>measure_out.csv</span></a>
,
the <code><font color="blue">integrand</font></code> column was missing.
</li></ol>


<br>
<br>
<b><big><a name="2.dk" id="2.dk">2.dk: 2010-09-22</a></big></b>

<ol type="1"><li>
The <a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>
 program has been extended so that
the lower and upper age limits as well as the step size in age
are now command line arguments.
This enables running <code><font color="blue">d4_simulate.py</font></code> with different parameters
to do more extensive testing.
(More parameters will become command line arguments as more tests
are needed.)

</li><li>

There was a bug in <code><font color="blue">dismod_pde_csv</font></code> when 
<code><font color="blue">delta_age</font></code> was greater
than the minimum value for 

<code><font color="blue"><span style='white-space: nowrap'>age_lower,&nbsp;age_upper</span></font></code>
 
in the 
<code><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i></code>
 file.
This has been fixed so it is no longer a problem for <code><font color="blue">dismod_pde_csv</font></code>.

</li><li>

The <a href="#5.1">5.1: <span style='white-space: nowrap'>optimize</span></a>
 has been improved to detect 
when the first age grid point is larger than the minimum measurement age.
In this case, it now aborts with an error message.

</li><li>

A <a href="#7.i">7.i: <span style='white-space: nowrap'>covariate</span></a>
 wish list item has been added.

</li></ol>



<br>
<br>
<b><big><a name="2.dl" id="2.dl">2.dl: 2010-09-21</a></big></b>
<br>
First release of <a href="#4.1">4.1: <span style='white-space: nowrap'>dismod_pde_csv</span></a>
, a program that uses CSV files
for input to and output from <a href="#5.1">5.1: <span style='white-space: nowrap'>optimize</span></a>
.

<br>
<br>
<b><big><a name="2.dm" id="2.dm">2.dm: 2010-09-20</a></big></b>

<ol type="1"><li>
Change 
<code><i><font color="black"><span style='white-space: nowrap'>grid_in</span></font></i></code>
 to <a href="#5.1.j">5.1.j: <span style='white-space: nowrap'>sfun_in</span></a>
 and
<code><font color="blue">Grid_Input_Struct</font></code> to <code><font color="blue">Sfun_Input_Struct</font></code>.
</li><li>

Change 
<code><i><font color="black"><span style='white-space: nowrap'>grid_out</span></font></i></code>
 to <a href="#5.1.o">5.1.o: <span style='white-space: nowrap'>sfun_out</span></a>
 and
<code><font color="blue">Grid_Output_Struct</font></code> to <code><font color="blue">Sfun_Output_Struct</font></code>.
</li><li>

Return both the residuals and scaled residuals.
This removed the field 
<code><i><font color="black"><span style='white-space: nowrap'>parameter</span></font></i><font color="blue"><span style='white-space: nowrap'>.scale_residuals</span></font></code>
.
It split 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i><font color="blue"><span style='white-space: nowrap'>.prior</span></font></code>
 
<a href="#5.1.o.b">5.1.o.b: <span style='white-space: nowrap'>prior_residual</span></a>
 and
<a href="#5.1.o.c">5.1.o.c: <span style='white-space: nowrap'>prior_scaled</span></a>
.
It also split 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i><font color="blue"><span style='white-space: nowrap'>.age</span></font></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i><font color="blue"><span style='white-space: nowrap'>.cohort</span></font></code>
.
</li></ol>



<br>
<br>
<b><big><a name="2.dn" id="2.dn">2.dn: 2010-09-19</a></big></b>
<br>
The <code><font color="blue">set_age_cohort.hpp</font></code> include file has been folded into the
newly created and documented routine <a href="#5.2">5.2: <span style='white-space: nowrap'>create_grid</span></a>
.

<br>
<br>
<b><big><a name="2.do" id="2.do">2.do: 2010-09-17</a></big></b>
<br>
Have <a href="#5.1">5.1: <span style='white-space: nowrap'>optimize</span></a>
 return the model, the residual, and the scaled
residual for each measurement
and have <code><font color="blue">print_result</font></code> output all of them.

<br>
<br>
<b><big><a name="2.dp" id="2.dp">2.dp: 2010-09-16</a></big></b>

<ol type="1"><li>
The routine that automatically determines the age and cohort grid
has been moved to its own file <code><font color="blue">example/set_age_cohort.hpp</font></code>
so that it does not need to be repeated in each example.
</li><li>

The routine <code><font color="blue">print_result</font></code> now sorts the measurement output by age.
In addition, the grid output is ordered first by age and then cohort 
(used to be by cohort and then age).
</li></ol>


<br>
<br>
<b><big><a name="2.dq" id="2.dq">2.dq: 2010-09-15</a></big></b>
<br>
An option to used first or second order differences in the cohort direction
<a href="#5.1.j.p">5.1.j.p: <span style='white-space: nowrap'>cohort_order</span></a>
 has been added.

<br>
<br>
<b><big><a name="2.dr" id="2.dr">2.dr: 2010-09-13</a></big></b>

<ol type="1"><li>
The number of ode steps

<code><i><font color="black"><span style='white-space: nowrap'>parameter</span></font></i><font color="blue"><span style='white-space: nowrap'>.number_ode_step</span></font></code>
 
has been replace by the maximum ode step
<a href="#5.1.h.a">5.1.h.a: <span style='white-space: nowrap'>max_ode_step</span></a>
.
This scales the number of steps to be large for large
age intervals; e.g., between age zero and the next
valid age for each cohort.
</li><li>

Add the <a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>
 program to the user documentation.
This includes <a href="#5.1.3.1">5.1.3.1: <span style='white-space: nowrap'>dismoditis.sh</span></a>
 and <a href="#5.1.3">5.1.3: <span style='white-space: nowrap'>dismoditis.cpp</span></a>

as an example of its use. 
</li><li>

Change <a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>
 data so that start year 1990 and end year 1991 has
a span of one year (not two). This makes it the same as age limits
and is easier for the user to keep track of.
</li><li>

Fix a bug in the determination of 

<code><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'>.age_lower</span></font></code>
,
which maps a cohort index to the corresponding first non-zero 
age index in the 
<a href="#5.3.m.b">5.3.m.b: <span style='white-space: nowrap'>computational&nbsp;grid</span></a>
.
</li><li>

Add <a href="#5.1.3">5.1.3: <span style='white-space: nowrap'>dismoditis.cpp</span></a>
 to the list of automated tests that work.
</li></ol>



<br>
<br>
<b><big><a name="2.ds" id="2.ds">2.ds: 2010-09-11</a></big></b>

<ol type="1"><li>
Improve the documentation for

<code><i><font color="black"><span style='white-space: nowrap'>k(l,&nbsp;j)</span></font></i></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>k(u,&nbsp;j)</span></font></i></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>j(l,&nbsp;k)</span></font></i></code>
, and

<code><i><font color="black"><span style='white-space: nowrap'>j(u,&nbsp;k)</span></font></i></code>
.
Fix the cohort index limits in the definition of <code><font color="blue">f_a</font></code>.
</li><li>

Change 
<code><font color="blue"><span style='white-space: nowrap'>Grid_</span></font><i><font color="black"><span style='white-space: nowrap'>*</span></font></i><font color="blue"><span style='white-space: nowrap'>_Struct</span></font></code>
 to 
<code><font color="blue"><span style='white-space: nowrap'>Optimize_</span></font><i><font color="black"><span style='white-space: nowrap'>*</span></font></i><font color="blue"><span style='white-space: nowrap'>_Struct</span></font></code>

where 
<code><i><font color="black"><span style='white-space: nowrap'>*</span></font></i></code>
 is <code><font color="blue">Input</font></code> and <code><font color="blue">Output</font></code>.
This is in preparation for using it off the grid.
</li><li>

Change the <a href="#5.3.c">5.3.c: <span style='white-space: nowrap'>age</span></a>
 grid
so that 
<code><i><font color="black"><span style='white-space: nowrap'>age</span></font></i><font color="blue"><span style='white-space: nowrap'>[0]</span></font></code>
 must be zero and

<code><i><font color="black"><span style='white-space: nowrap'>age</span></font></i><font color="blue"><span style='white-space: nowrap'>[1]</span></font></code>
 is the lower limit for the region of interest.
This enables us to initialize the ODE in age at age zero
with <code>
<span style='white-space: nowrap'>&nbsp;S(0,&nbsp;c)&nbsp;=&nbsp;1</span></code>
, and <code>
<span style='white-space: nowrap'>&nbsp;C(0,&nbsp;c)&nbsp;=&nbsp;0</span></code>
.
This in turn fixed the <code><font color="blue">example/dismoditis.cpp</font></code> simulation
program so that it inverts properly.
</li></ol>



<br>
<br>
<b><big><a name="2.dt" id="2.dt">2.dt: 2010-09-10</a></big></b>
<br>
Add the special case <code>
<span style='white-space: nowrap'>&nbsp;\sigma&nbsp;=&nbsp;+&nbsp;\infty</span></code>
 to drop terms
from the likelihood function; e.g., see 
<a href="#5.1.f.a">5.1.f.a: <span style='white-space: nowrap'>Huber&nbsp;Loss&nbsp;Function</span></a>
.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>Changed the <a href="#5.1.2">5.1.2: <span style='white-space: nowrap'>optimize_xam.cpp</span></a>
 example so that it does not
use any direct prior information, 
just the measured values are used to do the inversion.

<br>
<br>
<b><big><a name="2.du" id="2.du">2.du: 2010-09-08</a></big></b>
<br>
Add the special case <code>
<span style='white-space: nowrap'>&nbsp;\sigma&nbsp;=&nbsp;0</span></code>
 to convert likelihood functions
into constraints; e.g., see the discussion of 
<a href="#5.1.f.a">5.1.f.a: <span style='white-space: nowrap'>Huber&nbsp;Loss&nbsp;Function</span></a>
.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>Change <code><font color="blue">example/d4_simulate.py</font></code> to sort its output csv file
by average age corresponding to the measurements.
This improves the printing of the measurement residuals after a fit.

<br>
<br>
<b><big><a name="2.dv" id="2.dv">2.dv: 2010-09-07</a></big></b>

<ol type="1"><li>
Change 
<code><i><font color="black"><span style='white-space: nowrap'>grid_res</span></font></i></code>
 to <a href="#5.1.o">5.1.o: <span style='white-space: nowrap'>sfun_out</span></a>
 and 
<code><font color="blue">Residual_Struct</font></code> to <code><font color="blue">Sfun_Output_Struct</font></code>.
</li><li>

Move 
<code><i><font color="black"><span style='white-space: nowrap'>grid_est</span></font></i></code>
 into the 
<a href="#5.1.o.a">5.1.o.a: <span style='white-space: nowrap'>estimate</span></a>
 field of 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i></code>
.
</li><li>

Move age and cohort residual information from 
<a href="#5.1.h">5.1.h: <span style='white-space: nowrap'>parameter</span></a>
 to
<a href="#5.1.j">5.1.j: <span style='white-space: nowrap'>sfun_in</span></a>

so they can depend on
stochastic function index as well as computational grid point.
</li><li>

Add a <code>
<span style='white-space: nowrap'>&nbsp;\zeta</span></code>
 offset before taking the log in the 
age and cohort residuals.
This makes them more versatile (because one can always use <code>
<span style='white-space: nowrap'>&nbsp;zeta&nbsp;=&nbsp;0</span></code>

to get the log-normal case).
</li></ol>


<br>
<br>
<b><big><a name="2.dw" id="2.dw">2.dw: 2010-09-06</a></big></b>

<ol type="1"><li>
Add the dismoditis test case (simulated data in a csv file). 
Adding this example found another problem with the choice of
which age-cohort pairs to include in the computation.
This has been fixed.
</li><li>

Include <code>
<span style='white-space: nowrap'>&nbsp;\zeta_\ell</span></code>
 inside the log for
both the data and model terms in <code>
<span style='white-space: nowrap'>&nbsp;R_\ell&nbsp;(s)</span></code>
; see
<a href="#5.1.p">5.1.p: <span style='white-space: nowrap'>measure_out</span></a>
.
</li><li>

Remove 
<code><i><font color="black"><span style='white-space: nowrap'>age</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i></code>
 from 
<a href="#5.1">5.1: <span style='white-space: nowrap'>optimize</span></a>
, <code><font color="blue">print_result</font></code> and <code><font color="blue">check_opt</font></code>
(not needed because 
<code><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i></code>
 has that information).
</li><li>

Change 
<code><i><font color="black"><span style='white-space: nowrap'>prior</span></font></i></code>
 to 
<a href="#5.1.j">5.1.j: <span style='white-space: nowrap'>sfun_in</span></a>
 and include the initial value 
of the estimate there. 
Change 
<code><i><font color="black"><span style='white-space: nowrap'>estimate</span></font></i></code>
 to 

<code><i><font color="black"><span style='white-space: nowrap'>grid_est</span></font></i></code>
 to emphasize that 
it uses <a href="#5.1.i">5.1.i: <span style='white-space: nowrap'>grid</span></a>
 for accessing elements.
In addition, change the order so that the grid arguments
and measurement arguments are grouped together in
<a href="#5.1">5.1: <span style='white-space: nowrap'>optimize</span></a>
, <code><font color="blue">print_result</font></code> and <code><font color="blue">check_opt</font></code>.
</li></ol>



<br>
<br>
<b><big><a name="2.dx" id="2.dx">2.dx: 2010-09-04</a></big></b>
<br>
The anorexia case is now running on the non-rectangular grid.
Getting this real data case to work demonstrated that a change
was needed to the <a href="#5.3">5.3: <span style='white-space: nowrap'>pair2index</span></a>
 routine to make it easier for the user.
In addition, error messages have been added to aid the user when choosing
rectangular limits in age and time (that correspond to non-rectangular
limits in age and cohort).
<code><span style='white-space: nowrap'><br>
<br>
</span></code>The <a href="#5.1.2">5.1.2: <span style='white-space: nowrap'>optimize_xam.cpp</span></a>
 example was extended to have arguments
so that separate code is no longer needed for the cases in the test
directory (which now also run).


<br>
<br>
<b><big><a name="2.dy" id="2.dy">2.dy: 2010-09-03</a></big></b>
<br>
First version of non-rectangular computational grid is working.
Only one test has been converted so far. Also need to chang mathematical
write-up to match code.


<br>
<br>
<b><big><a name="2.dz" id="2.dz">2.dz: 2010-09-01</a></big></b>

<ol type="1"><li>
Use the method of multiple shooting, instead of the trapezoidal rule,
when solving the ODE for <code>
<span style='white-space: nowrap'>&nbsp;S(&nbsp;\cdot&nbsp;)&nbsp;</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;C(&nbsp;\cdot&nbsp;)&nbsp;</span></code>
 
with respect to age.
</li><li>

Add the following parameters to the optimization procedure:

<code><i><font color="black"><span style='white-space: nowrap'>parameter</span></font></i><font color="blue"><span style='white-space: nowrap'>.number_ode_step</span></font></code>
,
<a href="#5.1.h.d">5.1.h.d: <span style='white-space: nowrap'>converge_tolerance</span></a>
, and
<a href="#5.1.h.c">5.1.h.c: <span style='white-space: nowrap'>max_iteration</span></a>
.
</li></ol>



<br>
<br>
<b><big><a name="2.ea" id="2.ea">2.ea: 2010-08-29</a></big></b>

<ol type="1"><li>
Extend the list of possible measurements to include all cause mortality.
</li><li>

Add the <a href="#5.1.h.b">5.1.h.b: <span style='white-space: nowrap'>print_level</span></a>
 
parameter which can be used to trace the optimization procedure.
</li><li>


</li></ol>



<br>
<br>
<b><big><a name="2.eb" id="2.eb">2.eb: 2010-08-28</a></big></b>
<br>
Residuals are very helpful when building a model.
The <a href="#5.1.o">5.1.o: <span style='white-space: nowrap'>sfun_out</span></a>
 
and <a href="#5.1.p">5.1.p: <span style='white-space: nowrap'>measure_out</span></a>
 
arguments to <code><font color="blue">optimize</font></code>
returns the model residuals corresponding to its estimate.

<br>
<br>
<b><big><a name="2.ec" id="2.ec">2.ec: 2010-08-26</a></big></b>
<br>
Convert the difference equation in age from an Euler's method to the 
trapezoidal method which is more accurate and a stiff solver.
(Euler's method seemed to be unstable in initial testing.)

<br>
<br>
<b><big><a name="2.ed" id="2.ed">2.ed: 2010-08-25</a></big></b>

<ol type="1"><li>
The model for the measurements was missing the normalization term
that converts from absolute counts to rates
(both in dismod_pde and its tests).
This has been fixed.
</li><li>

The midpoint approximation drops out the population density.
This has been documented in the dismod_pde report.
In addition, 
<code><i><font color="black"><span style='white-space: nowrap'>density</span></font></i></code>
 was
removed from the <a href="#5.1">5.1: <span style='white-space: nowrap'>optimize</span></a>
 argument list
(which makes it easier to use).
</li><li>

Improve <a href="#5.1.2">5.1.2: <span style='white-space: nowrap'>optimize_xam.cpp</span></a>
, as an example of how to use <a href="#5.1">5.1: <span style='white-space: nowrap'>optimize</span></a>

(<code><font color="blue">test/optimize_tst.cpp</font></code> does more extensive testing).
</li><li>

Looking at the sample data,
incidence, remission, and other rates look log normally
or log exponentially distributed.
Change the 
<a href="#5.1.o.d">5.1.o.d: <span style='white-space: nowrap'>age_residual</span></a>

and
<a href="#5.1.o.f">5.1.o.f: <span style='white-space: nowrap'>cohort_residual</span></a>

for
<code>
<span style='white-space: nowrap'>&nbsp;\iota&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;\rho&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;\chi&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;</span></code>
, and
<code>
<span style='white-space: nowrap'>&nbsp;\mu&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;</span></code>
 to be in terms of their logarithms.
</li></ol>



<br>
<br>
<b><big><a name="2.ee" id="2.ee">2.ee: 2010-08-24</a></big></b>
<br>
The measurement values (and system dynamics) do not depend on
<code>
<span style='white-space: nowrap'>&nbsp;D(&nbsp;\cdot&nbsp;)</span></code>
 or <code>
<span style='white-space: nowrap'>&nbsp;O(&nbsp;\cdot&nbsp;)</span></code>
.
Hence they were eliminated from the estimation procedure.
This reduced the number of state variables per age-cohort grid
point from eight to six.


<br>
<br>
<b><big><a name="2.ef" id="2.ef">2.ef: 2010-08-23</a></big></b>
<br>
Change measurement limits of integration from rectangular in
age and cohort to rectangular in age and time.
In addition, the new measurement model is much more accurate because
it interpolates the limits of integration and is exact for 
bilinear functions.


<br>
<br>
<b><big><a name="2.eg" id="2.eg">2.eg: 2010-08-22</a></big></b>
<br>
Change the following symbols:
<table><tr><td align='left'  valign='top'>

<b>Old Value</b>       <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code></td><td align='left'  valign='top'>
 <b>New Value</b> <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code></td><td align='left'  valign='top'>
 
	<b>Reason</b>
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">sigma_age</font></code>       <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code></td><td align='left'  valign='top'>
 <code><font color="blue">age_sigma</font></code>  <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code></td><td align='left'  valign='top'>

	Emphasize connection to <a href="#5.1.i.b">5.1.i.b: <span style='white-space: nowrap'>age</span></a>
 
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">sigma_cohort</font></code>    <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code></td><td align='left'  valign='top'>
 <code><font color="blue">cohort_sigma</font></code>  <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code></td><td align='left'  valign='top'>

	Emphasize connection to <a href="#5.1.i.c">5.1.i.c: <span style='white-space: nowrap'>cohort</span></a>
 
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">Optimize_Struct</font></code> <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code></td><td align='left'  valign='top'>
 
	<code><font color="blue">Optimize_Parameter_Struct</font></code> <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code></td><td align='left'  valign='top'>

	Emphasize connection to <a href="#5.1.h">5.1.h: <span style='white-space: nowrap'>parameter</span></a>
 
</td></tr>
</table>
<br>
<b><big><a name="2.eh" id="2.eh">2.eh: 2010-08-21</a></big></b>
<br>
Initial version that passes its tests.


<hr>Input File: omh/whats_new.omh

<hr>




<center><b><big><big><a name="3" id="3">3: Installing dismod_pde</a>
</big></big></b></center>
<br>
<b><big><a name="3.a" id="3.a">3.a: Requirements</a></big></b>



<ol type="1"><li>
The following standard unix utilities:
<code><font color="blue">bash</font></code> scripting shell, 
<code><font color="blue">tar</font></code> archiving program,
<code><font color="blue">wget</font></code> web downloading program, and the
<code><font color="blue">patch</font></code> source code patching program.
</li><li>

A Fortran, C, C++ compiler and Python (&gt;=2.5) interpreter.
</li><li>

The <code><font color="blue">doxygen</font></code> documentation program.
</li><li>

Python is required to used the python utilities.
In addition, these utilities use the following packages not in the python
<a href="http://docs.python.org/library/" target="_top"><span style='white-space: nowrap'>standard&nbsp;library</span></a>
 (http://docs.python.org/library/) :
<code><font color="blue">numpy</font></code>, <code><font color="blue">matplotlib</font></code>.
</li></ol>


<br>
<br>
<b><big><a name="3.b" id="3.b">3.b: Download</a></big></b>



<table><tr><td align='left'  valign='top'>

<a href="dismod_pde-2013.1130.tgz" target="_top"><span style='white-space: nowrap'>dismod_pde-2013.1130.tgz</span></a>
 </td><td align='left'  valign='top'>
 most recent version of dismod_pde
</td></tr><tr><td align='left'  valign='top'>

<a href="dismod_pde-2013.0000.1.tgz" target="_top"><span style='white-space: nowrap'>dismod_pde-2013.0000.1.tgz</span></a>
  </td><td align='left'  valign='top'>
 version at beginning of 2013
</td></tr>
</table>
<br>
<b><big><a name="3.c" id="3.c">3.c: Unpack Distribution</a></big></b>
<br>
Let 
<code><i><font color="black"><span style='white-space: nowrap'>version</span></font></i></code>
 be either <code><font color="blue">2013.1130</font></code> or <code><font color="blue">2013.0000.1</font></code>.
The following commands will create the distribution directory

<code><font color="blue"><span style='white-space: nowrap'>dismod_pde-</span></font><i><font color="black"><span style='white-space: nowrap'>version</span></font></i></code>
 and change into that directory:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tar&nbsp;-xzf&nbsp;dismod_pde-</span></font><i><font color="black"><span style='white-space: nowrap'>version</span></font></i><font color="blue"><span style='white-space: nowrap'>.tgz<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cd&nbsp;dismod_pde-</span></font><i><font color="black"><span style='white-space: nowrap'>version</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
If you are using version <code><font color="blue">2013.0000.1</font></code>, you should now switch
to the instructions in 
<code><font color='blue'><pre style='display:inline'> 
	dismod_pde-2013.0000.1/doc/install.htm
</pre></font></code>

Otherwise, continue with the instructions below.
	

<br>
<br>
<b><big><a name="3.d" id="3.d">3.d: External Packages</a></big></b>


<br>
dismod_pde uses the packages
<a href="https://projects.coin-or.org/Ipopt" target="_top"><span style='white-space: nowrap'>ipopt</span></a>
 (https://projects.coin-or.org/Ipopt) ,
<a href="http://www.coin-or.org/CppAD" target="_top"><span style='white-space: nowrap'>cppad</span></a>
 (http://www.coin-or.org/CppAD) ,
and
<a href="http://www.seanet.com/~bradbell/omhelp/overview.xml" target="_top"><span style='white-space: nowrap'>omhelp</span></a>
 (http://www.seanet.com/~bradbell/omhelp/overview.xml) .
The following command:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;./build.sh&nbsp;external<br>
</span></font></code>
will download and compile these packages in the 
<code><font color="blue">dismod_pde-2013.1130/external</font></code> directory.
It will then install the packages using the prefixes
<code><font color="blue">$HOME/prefix/ipopt</font></code>,
<code><font color="blue">$HOME/prefix/cppad</font></code>, and
<code><font color="blue">$HOME/prefix/omhelp</font></code>, respectively
If this command succeeds, its last output line will be

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OK&nbsp;build.sh&nbsp;external<br>
</span></font></code>
This step can take some time
and you do not need to preform this step if you already have these packages
installed.

<br>
<br>
<b><big><a name="3.e" id="3.e">3.e: Configure</a></big></b>
<br>
The following command will configure dismod_pde to compile and run
on your system:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;./build.sh&nbsp;configure<br>
</span></font></code>
If this command succeeds, its last output line will be

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OK&nbsp;build.sh&nbsp;configure<br>
</span></font></code>
If your systems default python interpreter version is less than 2.5,
in the file <code><font color="blue">build.sh</font></code> you will have to make the change

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PYTHON_PREFIX=`which&nbsp;python</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>`&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>-&gt;</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;PYTHON_PREFIX=</span></font><i><font color="black"><span style='white-space: nowrap'>python_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>python_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>/bin/python</span></font></code>
 is a Python executable
with version number &gt;= 2.5.

<br>
<br>
<b><big><a name="3.f" id="3.f">3.f: make</a></big></b>
<br>
The following command will compile dismod_pde and all its tests:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;./build.sh&nbsp;make<br>
</span></font></code>
If this command succeeds, its last output line will be

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OK&nbsp;build.sh&nbsp;make<br>
</span></font></code>
<br>
<b><big><a name="3.g" id="3.g">3.g: Documentation</a></big></b>


<br>
The following command will build the dismod_pde 
developer documentation:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;./build.sh&nbsp;doxydoc<br>
</span></font></code>
If this command succeeds, its last output line will be

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OK&nbsp;build.sh&nbsp;doxydoc<br>
</span></font></code>
<br>
<b><big><a name="3.h" id="3.h">3.h: Test</a></big></b>


<br>
The  following command will run all the dismod_pde tests:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;./build.sh&nbsp;test<br>
</span></font></code>
If this command succeeds, its last output line will be

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OK&nbsp;build.sh&nbsp;test&nbsp;<br>
</span></font></code>
<br>
<b><big><a name="3.i" id="3.i">3.i: Install</a></big></b>
<br>
The following command will install dismod_pde using the prefix
<code><font color="blue">$HOME/prefix/dismod_pde</font></code>:
<code><font color='blue'><pre style='display:inline'> 
	cd build
	make install
</pre></font></code>

The <a href="#4.1">4.1: <span style='white-space: nowrap'>dismod_pde_csv</span></a>
 executable file, 

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>/bin/dismod_pde_csv<br>
</span></font></code>
The <a href="#4.2">4.2: <span style='white-space: nowrap'>python_csv</span></a>
 scripts

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>/bin/d4_</span></font><i><font color="black"><span style='white-space: nowrap'>*</span></font></i><font color="blue"><span style='white-space: nowrap'>.py<br>
</span></font></code>
The library file,
and include directory, for using the <a href="#5.1">5.1: <span style='white-space: nowrap'>optimize</span></a>
 routine,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>/lib/libdismod_pde.a<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>/include/dismod_pde<br>
</span></font></code>
The user documentation directory, 
the example directory,
and the developer documentation directory,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>/share/doc/dismod_pde-2013.1130/doc<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>/share/doc/dismod_pde-2013.1130/example<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>/share/doc/dismod_pde-2013.1130/doxydoc<br>
</span></font></code>
<br>
<b><big><a name="3.j" id="3.j">3.j: Prefix</a></big></b>
<br>
You can change the 
<code><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i></code>
 by 
opening the file

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dismod_pde-2013.1130/build.sh<br>
</span></font></code>
in your editor and making the following change:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DISMOD4_PREFIX=&quot;$HOME/prefix/dismod_pde&quot;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>-&gt;</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;DISMOD4_PREFIX=</span></font><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i></code>
 is the directory you choose.
Then return to the <code><font color="blue">dismod_pde-2013.1130</font></code> directory and 
execute the commands

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;./build.sh&nbsp;configure<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cd&nbsp;build<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;make&nbsp;install<br>
</span></font></code>
Note that you can also change the other prefixes set at the top of
<code><font color="blue">build.sh</font></code>.

<br>
<br>
<b><big><a name="3.k" id="3.k">3.k: Optimized Version</a></big></b>
<br>
By default <code><font color="blue">dismod_pde</font></code> is compiled with debugging.
You can compile a version that is faster,
but that does not have as good error detection and reporting.
In your editor, make the following change:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DISMOD4_DEBUG='true'&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>-&gt;</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;DISMOD4_DEBUG='false'<br>
</span></font></code>
and rerun the <code><font color="blue">build.sh</font></code> commands.
(It is not necessary to re-build the documentation.)



<hr>Input File: omh/install.omh

<hr>



<center><b><big><big><a name="4" id="4">4: The CSV File Interface to dismod_pde</a>
</big></big></b></center>
<br>
<b><big><a name="4.a" id="4.a">4.a: dismod_pde CSV Files</a></big></b>



<br>
The following are the specifications for a dismod_pde CSV file:

<ol type="1"><li>
It is an ascii file that does not contain any of the following characters:
single quote, double quote, back quote, or semi-colon.

</li><li>
 
The comma is a special character because it separates columns in the file.
There is no comma after the last column in a line.

</li><li>

The newline is a special character because it separates lines in the file.

</li><li>

The first line of a csv file contains the names for the corresponding columns,
each subsequent line contains one value for each column.

</li><li>

The carriage return is a special character because on Windows systems,
it is combined with the newline to form an end of line.
Therefore, a carriage return newline will be the same as a newline.
On MAC OS, the carriage return is used in place of a newline,
so if a carriage return is not followed by a newline, it is converted 
to a newline.;

</li><li>

The double quote is a special character because,
when surrounded by a pair of double quote characters, 
the special meaning of the comma and newline (see above) are suppressed.
When present,
the double quote must be both the first and last character in the field
and are not included in the field data.

</li></ol>


<br>
<br>
<b><big><a name="4.b" id="4.b">4.b: Contents</a></big></b>
<br>
<div><a href="#4.1" target="_top">4.1:&nbsp;dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program</a><br>
<a href="#4.2" target="_top">4.2:&nbsp;dismod_pde&nbsp;Python&nbsp;CSV&nbsp;Helper&nbsp;Scripts</a><br>
</div>
<hr>Input File: omh/csv.omh

<hr>
<center><b><big><big><a name="4.1" id="4.1">4.1: dismod_pde Command Line Program</a>
</big></big></b></center>
<br>
<b><big><a name="4.1.a" id="4.1.a">4.1.a: Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>dismod_pde_csv</span></font></code>


<code><i><font color="black"><span style='white-space: nowrap'>parameter.csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_in.csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in.csv</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>dismod_pde_csv&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>parameter.csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_in.csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_out.csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in.csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_out.csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>effect_in.csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>effect_out.csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
</span></font></code>
<br>
<b><big><a name="4.1.b" id="4.1.b">4.1.b: Purpose</a></big></b>
<br>
Runs <a href="#5.1">5.1: <span style='white-space: nowrap'>dismod_pde::optimize</span></a>
 with inputs
and outputs from and to csv files.

<br>
<br>
<b><big><a name="4.1.c" id="4.1.c">4.1.c: CSV Files</a></big></b>
<br>
Each of the <code><font color="blue">dismod_pde_csv</font></code> command line arguments
specify a <a href="#4.a">4.a: <span style='white-space: nowrap'>dismod_pde&nbsp;csv&nbsp;file</span></a>
.
This dismod_pde_csv uses the following csv files for its input and output:
<table><tr><td align='left'  valign='top'>

<a href="#4.1.e">4.1.e: <span style='white-space: nowrap'>parameter.csv</span></a>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>

	a small set of control parameters
</td></tr><tr><td align='left'  valign='top'>

<a href="#4.1.h">4.1.h: <span style='white-space: nowrap'>effect_in.csv</span></a>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>

	measurement effects, limits, and initial values during fitting
</td></tr><tr><td align='left'  valign='top'>

<a href="#4.1.f">4.1.f: <span style='white-space: nowrap'>measure_in.csv</span></a>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 
	defines the measurements
</td></tr><tr><td align='left'  valign='top'>

<a href="#4.1.g">4.1.g: <span style='white-space: nowrap'>sfun_in.csv</span></a>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 
	stochastic function input values
</td></tr><tr><td align='left'  valign='top'>

<a href="#4.1.i">4.1.i: <span style='white-space: nowrap'>sfun_out.csv</span></a>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 
	stochastic function output values
</td></tr><tr><td align='left'  valign='top'>

<a href="#4.1.j">4.1.j: <span style='white-space: nowrap'>measure_out.csv</span></a>
  <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>

	fitting residuals for each measurement 
</td></tr>
</table>
<br>
<b><big><a name="4.1.d" id="4.1.d">4.1.d: Infinity</a></big></b>

<br>
These data files use the special values <code><font color="blue">inf</font></code> and <code><font color="blue">-inf</font></code> to denote
plus and minus infinity.



<br>
<br>
<b><big><a name="4.1.e" id="4.1.e">4.1.e: parameter.csv</a></big></b>

<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>parameter.csv</span></font></i></code>
 specifies
the parameter file.
This file has only two columns, the first column name is <code><font color="blue">name</font></code>
and the second column name is <code><font color="blue">value</font></code>.
For each name, the following table contains a description of the
corresponding value (that the modeler chooses).
The order of the lines in 
<code><i><font color="black"><span style='white-space: nowrap'>parameter.csv</span></font></i></code>
 is not important.
All of the names must appear once and only once.
Example value,
used by <a href="#6.1">6.1: <span style='white-space: nowrap'>get_started.sh</span></a>
, are listed below for each parameter.
<table><tr><td align='left'  valign='top'>

<b>name</b>         <code><span style='white-space: nowrap'>&nbsp;</span></code> </td><td align='left'  valign='top'>
 
	<b>Default</b> <code><span style='white-space: nowrap'>&nbsp;</span></code> </td><td align='left'  valign='top'>
 
	<b>Description</b> 
</td></tr><tr><td align='left'  valign='top'>

<a href="#4.1.e.a">4.1.e.a: <span style='white-space: nowrap'>age_grid</span></a>
 <code><span style='white-space: nowrap'>&nbsp;</span></code> </td><td align='left'  valign='top'>

	0 5 20 <code><span style='white-space: nowrap'>&nbsp;</span></code> </td><td align='left'  valign='top'>

	Age values in the computational grid.
</td></tr><tr><td align='left'  valign='top'>

<a href="#4.1.e.b">4.1.e.b: <span style='white-space: nowrap'>cohort_grid</span></a>
 <code><span style='white-space: nowrap'>&nbsp;</span></code> </td><td align='left'  valign='top'>

	1940 1960 1980 200 2020 2040 <code><span style='white-space: nowrap'>&nbsp;</span></code> </td><td align='left'  valign='top'>

	Cohort values in the computational grid.
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.h.a">5.1.h.a: <span style='white-space: nowrap'>max_ode_step</span></a>
  <code><span style='white-space: nowrap'>&nbsp;</span></code> </td><td align='left'  valign='top'>

	1 <code><span style='white-space: nowrap'>&nbsp;</span></code> </td><td align='left'  valign='top'>

	Maximum step to use in age when solving for 
	<code>
<span style='white-space: nowrap'>&nbsp;S(\cdot)</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;C(\cdot)</span></code>
.
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.h.b">5.1.h.b: <span style='white-space: nowrap'>print_level</span></a>
  <code><span style='white-space: nowrap'>&nbsp;</span></code> </td><td align='left'  valign='top'>

	5 <code><span style='white-space: nowrap'>&nbsp;</span></code> </td><td align='left'  valign='top'>

	Level of 
	<a href="#5.1.1">5.1.1: <span style='white-space: nowrap'>tracing&nbsp;printed&nbsp;by&nbsp;optimization</span></a>
 (0 for no tracing).
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.h.c">5.1.h.c: <span style='white-space: nowrap'>max_iteration</span></a>
  <code><span style='white-space: nowrap'>&nbsp;</span></code> </td><td align='left'  valign='top'>

	80 <code><span style='white-space: nowrap'>&nbsp;</span></code> </td><td align='left'  valign='top'>

	Maximum number of iterations the optimizer should attempt
	before giving up.
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.h.d">5.1.h.d: <span style='white-space: nowrap'>converge_tolerance</span></a>
  <code><span style='white-space: nowrap'>&nbsp;</span></code> </td><td align='left'  valign='top'>

	1e-6 <code><span style='white-space: nowrap'>&nbsp;</span></code> </td><td align='left'  valign='top'>

	Optimizer convergence tolerance.
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.h.e">5.1.h.e: <span style='white-space: nowrap'>debug_output</span></a>
  <code><span style='white-space: nowrap'>&nbsp;</span></code> </td><td align='left'  valign='top'>

	0 <code><span style='white-space: nowrap'>&nbsp;</span></code> </td><td align='left'  valign='top'>

	More debugging output.
</td></tr>
</table>
<br>
<b><a name="4.1.e.a" id="4.1.e.a">4.1.e.a: age_grid</a></b>


<br>
The value corresponding to the name <code><font color="blue">age_grid</font></code>
is a vector with elements separated by one or more spaces.
It must be monotone increasing.

<br>
<br>
<b><a name="4.1.e.b" id="4.1.e.b">4.1.e.b: cohort_grid</a></b>


<br>
The value corresponding to the name <code><font color="blue">cohort_grid</font></code>
is a vector with elements separated by one or more spaces.
It must be monotone increasing.
The limits of the cohort grid must be large enough to surround the
data in time.


<br>
<br>
<b><a name="4.1.e.c" id="4.1.e.c">4.1.e.c: debug_output</a></b>
<br>
In 
<code><i><font color="black"><span style='white-space: nowrap'>parameter.csv</span></font></i></code>
 file,
this value must be either <code><font color="blue">0</font></code> (false) or <code><font color="blue">1</font></code> (true).
If it is <code><font color="blue">1</font></code>, more debugging output is displayed 
(possibly at the expense of slower execution).



<br>
<br>
<b><big><a name="4.1.f" id="4.1.f">4.1.f: measure_in.csv</a></big></b>

<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>measure_in.csv</span></font></i></code>
 specifies
the measurement file which must contain the following columns:

<table><tr><td align='left'  valign='top'>

<b>Name</b> </td><td align='left'  valign='top'>
 <b>Value</b> </td></tr><tr><td align='left'  valign='top'>

<a href="#4.1.f.b">4.1.f.b: <span style='white-space: nowrap'>integrand</span></a>
 </td><td align='left'  valign='top'>

	The <a href="#5.1.l.a">5.1.l.a: <span style='white-space: nowrap'>integrand</span></a>

	used to model this measurement.
</td></tr><tr><td align='left'  valign='top'>

<a href="#4.1.f.c">4.1.f.c: <span style='white-space: nowrap'>age_lower,&nbsp;age_upper</span></a>
 </td><td align='left'  valign='top'>
 
	The age limits for this measurement.
</td></tr><tr><td align='left'  valign='top'>

<a href="#4.1.f.d">4.1.f.d: <span style='white-space: nowrap'>time_lower,&nbsp;time_upper</span></a>
 </td><td align='left'  valign='top'>
 
	The time limits for this measurement.
</td></tr><tr><td align='left'  valign='top'>

<a href="#4.1.f.e">4.1.f.e: <span style='white-space: nowrap'>meas_like</span></a>
 </td><td align='left'  valign='top'>

	name of the likelihood for this measurement.
</td></tr><tr><td align='left'  valign='top'>

<a href="#4.1.f.f">4.1.f.f: <span style='white-space: nowrap'>meas_zeta</span></a>
 </td><td align='left'  valign='top'>

	offset that is added before log scaling this measurement.
</td></tr><tr><td align='left'  valign='top'>

<a href="#4.1.f.g">4.1.f.g: <span style='white-space: nowrap'>meas_sigma</span></a>
 </td><td align='left'  valign='top'>

	standard deviation for this measurement.
</td></tr><tr><td align='left'  valign='top'>

<a href="#4.1.f.h">4.1.f.h: <span style='white-space: nowrap'>meas_value</span></a>
 </td><td align='left'  valign='top'>

	The value for this measurement. 
</td></tr><tr><td align='left'  valign='top'>

<a href="#4.1.f.i">4.1.f.i: <span style='white-space: nowrap'>Covariates</span></a>
 </td><td align='left'  valign='top'>

	Zero or more covariate columns.
</td></tr><tr><td align='left'  valign='top'>

<a href="#4.1.f.j">4.1.f.j: <span style='white-space: nowrap'>Comments</span></a>
  </td><td align='left'  valign='top'>

	Zero or more comment columns.
</td></tr>
</table>
<table><tr><td align='left'  valign='top'>
<b>Name</b> </td><td align='left'  valign='top'>
 <b>Value</b> </td></tr><tr><td align='left'  valign='top'>


<code><font color="blue"><span style='white-space: nowrap'>x_</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 </td><td align='left'  valign='top'>

	value of the specified covariate for this measurement
</td></tr>
</table>
<br>
<b><a name="4.1.f.a" id="4.1.f.a">4.1.f.a: ell</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;\ell</span></code>
 to denote an index that starts at zero
with the first value for each column.
Since the first line contains the names for each column
the first value for each column is in line number two; 
i.e. <code>
<span style='white-space: nowrap'>&nbsp;\ell&nbsp;=&nbsp;0</span></code>
 corresponds to line number two.

<br>
<br>
<b><a name="4.1.f.b" id="4.1.f.b">4.1.f.b: integrand</a></b>

<br>
The column with name <code><font color="blue">integrand</font></code> 
must have one of the following values:
<code><font color="blue">incidence</font></code>,
<code><font color="blue">remission</font></code>.
<code><font color="blue">m_excess</font></code>,
<code><font color="blue">m_other</font></code>,
<code><font color="blue">m_with</font></code>,
<code><font color="blue">prevalence</font></code>
<code><font color="blue">m_prevalence</font></code>,
<code><font color="blue">m_specific</font></code>,
<code><font color="blue">m_all</font></code>,
<code><font color="blue">m_standard</font></code>,
<code><font color="blue">relative_risk</font></code>.
We use <code>
<span style='white-space: nowrap'>&nbsp;i&nbsp;(&nbsp;\ell&nbsp;)</span></code>
 to denote the value for the integrand; see
optimizer <a href="#5.1.l.a">5.1.l.a: <span style='white-space: nowrap'>integrand</span></a>
.

<br>
<br>
<b><a name="4.1.f.c" id="4.1.f.c">4.1.f.c: age_lower, age_upper</a></b>



<br>
The column with name <code><font color="blue">age_lower</font></code> (<code><font color="blue">age_upper</font></code>) 
contains the lower (upper) limit for integration with respect to age
for this measurement.
The lower age limit must be greater than zero.
We use <code>
<span style='white-space: nowrap'>&nbsp;a_{l,&nbsp;\ell}</span></code>
 (<code>
<span style='white-space: nowrap'>&nbsp;a_{u,\ell}</span></code>
) to denote the
corresponding limits; see optimizer 
<a href="#5.1.l.c">5.1.l.c: <span style='white-space: nowrap'>age_lower,&nbsp;age_upper</span></a>
.

<br>
<br>
<b><a name="4.1.f.d" id="4.1.f.d">4.1.f.d: time_lower, time_upper</a></b>



<br>
The column with name <code><font color="blue">time_lower</font></code> (<code><font color="blue">time_upper</font></code>) 
contains the lower (upper) limit for integration with respect to time
for this measurement.
We use <code>
<span style='white-space: nowrap'>&nbsp;t_{l,&nbsp;\ell}</span></code>
 (<code>
<span style='white-space: nowrap'>&nbsp;t_{u,\ell}</span></code>
) to denote the
corresponding limits; see optimizer
<a href="#5.1.l.d">5.1.l.d: <span style='white-space: nowrap'>time_lower,&nbsp;time_upper</span></a>
.

<br>
<br>
<b><a name="4.1.f.e" id="4.1.f.e">4.1.f.e: meas_like</a></b>


<br>
The column with name <code><font color="blue">meas_like</font></code> 
must have one of the following values:
<code><font color="blue">gaussian</font></code> (<code>
<span style='white-space: nowrap'>&nbsp;h_\ell&nbsp;=&nbsp;2</span></code>
), or 
<code><font color="blue">laplace</font></code> (<code>
<span style='white-space: nowrap'>&nbsp;h_\ell&nbsp;=&nbsp;1</span></code>
).
We use <code>
<span style='white-space: nowrap'>&nbsp;h_\ell</span></code>
 to denote which likelihood we are using; 
see optimizer <a href="#5.1.l.e">5.1.l.e: <span style='white-space: nowrap'>meas_like</span></a>
.

<br>
<br>
<b><a name="4.1.f.f" id="4.1.f.f">4.1.f.f: meas_zeta</a></b>


<br>
The column with name <code><font color="blue">meas_zeta</font></code> 
contains the offset <code>
<span style='white-space: nowrap'>&nbsp;\zeta_\ell</span></code>

that is added to the measurement, and the model,
before taking the log;
see optimizer <a href="#5.1.l.f">5.1.l.f: <span style='white-space: nowrap'>meas_zeta</span></a>
.

<br>
<br>
<b><a name="4.1.f.g" id="4.1.f.g">4.1.f.g: meas_sigma</a></b>


<br>
The column with name <code><font color="blue">meas_sigma</font></code> 
contains the standard deviation <code>
<span style='white-space: nowrap'>&nbsp;\sigma_\ell</span></code>
 for this measurement;
see optimizer <a href="#5.1.l.g">5.1.l.g: <span style='white-space: nowrap'>meas_sigma</span></a>
.
If <code>
<span style='white-space: nowrap'>&nbsp;\sigma_\ell</span></code>
 is <a href="#4.1.d">4.1.d: <span style='white-space: nowrap'>infinity</span></a>
,
the measurement is not included in the fit.
If <code>
<span style='white-space: nowrap'>&nbsp;\sigma_\ell</span></code>
 is zero,
The measurement is treated like a constraint; i,e.,
the fit must agree with no residual.

<br>
<br>
<b><a name="4.1.f.h" id="4.1.f.h">4.1.f.h: meas_value</a></b>
<br>
The column with name <code><font color="blue">meas_value</font></code> contains the values
for this measurement <code>
<span style='white-space: nowrap'>&nbsp;z_\ell</span></code>
;
see optimizer <a href="#5.1.l.h">5.1.l.h: <span style='white-space: nowrap'>meas_value</span></a>
.

<br>
<br>
<b><a name="4.1.f.i" id="4.1.f.i">4.1.f.i: Covariates</a></b>

<br>
Columns in the file 
<code><i><font color="black"><span style='white-space: nowrap'>measure_in.csv</span></font></i></code>
 that have
names beginning with the two characters <code><font color="blue">x_</font></code>
are covariate columns and corresponding measurement effects
can be estimated; see
<a href="#4.1.h">4.1.h: <span style='white-space: nowrap'>effect_in.csv</span></a>
.

<br>
<br>
<b><a name="4.1.f.j" id="4.1.f.j">4.1.f.j: Comments</a></b>

<br>
The file 
<code><i><font color="black"><span style='white-space: nowrap'>measure_in.csv</span></font></i></code>
 may contain
one or more comment columns.
The corresponding column names begin with the characters 
<code><font color="blue">c_</font></code>:



<br>
<br>
<b><big><a name="4.1.g" id="4.1.g">4.1.g: sfun_in.csv</a></big></b>



<br>
<br>
<b><a name="4.1.g.a" id="4.1.g.a">4.1.g.a: Output Template</a></b>


<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_in.csv</span></font></i></code>
 is the last command line argument,
this is an output file and its contents only depend on the values
in 
<code><i><font color="black"><span style='white-space: nowrap'>parameter.csv</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>measurement.csv</span></font></i></code>
.
In this case, 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_in.csv</span></font></i></code>
 it is a template for 
the corresponding input file (when it is not the last command line argument).
See the heading Input File directly below.

<br>
<br>
<b><a name="4.1.g.b" id="4.1.g.b">4.1.g.b: Input File</a></b>


<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_in.csv</span></font></i></code>
 is not the last command line argument,
it is an input file with the column names listed below.
You cannot change any of the column names; i.e., 
the names in the first row of the template version of 

<code><i><font color="black"><span style='white-space: nowrap'>sfun_in.csv</span></font></i></code>
 (see the heading Output Template directly above).
The following values are fixed for each line and should not be changed:
<table><tr><td align='left'  valign='top'>

<b>Name</b> 
	</td><td align='left'  valign='top'>
 <b>Value</b> 
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.i.b">5.1.i.b: <span style='white-space: nowrap'>age</span></a>
   
	</td><td align='left'  valign='top'>
 age <code>
<span style='white-space: nowrap'>&nbsp;a</span></code>
 corresponding to this line
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.i.c">5.1.i.c: <span style='white-space: nowrap'>cohort</span></a>
   
	</td><td align='left'  valign='top'>
 cohort <code>
<span style='white-space: nowrap'>&nbsp;c</span></code>
 corresponding to this line
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">time</font></code>  
	</td><td align='left'  valign='top'>
 time <code>
<span style='white-space: nowrap'>&nbsp;t&nbsp;=&nbsp;a&nbsp;+&nbsp;c</span></code>
 corresponding to this line
</td></tr><tr><td align='left'  valign='top'>

<a href="#4.1.g.c">4.1.g.c: <span style='white-space: nowrap'>function</span></a>
 
	</td><td align='left'  valign='top'>
 stochastic function index <code>
<span style='white-space: nowrap'>&nbsp;q</span></code>
 corresponding to this line
</td></tr>
</table>
The following values are input for each line 
and should be chosen by the modeler:
<table><tr><td align='left'  valign='top'>

<b>Name</b> 
	</td><td align='left'  valign='top'>
 <b>Value</b> 
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.a">5.1.j.a: <span style='white-space: nowrap'>optimize_zeta</span></a>
 
	</td><td align='left'  valign='top'>
 offset added before log scaling of optimization problem
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.b">5.1.j.b: <span style='white-space: nowrap'>optimize_lower</span></a>
 
	</td><td align='left'  valign='top'>
 lower bound for <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>
 
		during the optimization procedure
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.c">5.1.j.c: <span style='white-space: nowrap'>optimize_initial</span></a>
 
	</td><td align='left'  valign='top'>
 initial value for <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>
 
		where the optimization procedure begins 
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.d">5.1.j.d: <span style='white-space: nowrap'>optimize_upper</span></a>
 
	</td><td align='left'  valign='top'>
 upper bound for <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>
 
		during the optimization procedure
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.e">5.1.j.e: <span style='white-space: nowrap'>prior_like</span></a>
 
	</td><td align='left'  valign='top'>
 direct prior likelihood name for <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.f">5.1.j.f: <span style='white-space: nowrap'>prior_zeta</span></a>
 
	</td><td align='left'  valign='top'>
 offset added before log in direct prior residual for
	<code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>
 
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.g">5.1.j.g: <span style='white-space: nowrap'>prior_sigma</span></a>
 
	</td><td align='left'  valign='top'>
 standard deviation for direct prior residual for
	<code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>
 
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.h">5.1.j.h: <span style='white-space: nowrap'>prior_mean</span></a>
 
	</td><td align='left'  valign='top'>
 direct prior value for 
	<code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>
 
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.i">5.1.j.i: <span style='white-space: nowrap'>age_like</span></a>
 
	</td><td align='left'  valign='top'>
 age direction forward difference likelihood for 
	<code>
<span style='white-space: nowrap'>&nbsp;s^q(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.j">5.1.j.j: <span style='white-space: nowrap'>age_zeta</span></a>
 
	</td><td align='left'  valign='top'>
 added before log for age direction forward differences for 
	<code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.k">5.1.j.k: <span style='white-space: nowrap'>age_sigma</span></a>
 
	</td><td align='left'  valign='top'>
 standard deviation for age direction forward differences for 
	<code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.l">5.1.j.l: <span style='white-space: nowrap'>age_order</span></a>
 
	</td><td align='left'  valign='top'>
 order for age direction forward differences for <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.m">5.1.j.m: <span style='white-space: nowrap'>cohort_like</span></a>
 
	</td><td align='left'  valign='top'>
 cohort direction forward difference likelihood for 
	<code>
<span style='white-space: nowrap'>&nbsp;s^q(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.n">5.1.j.n: <span style='white-space: nowrap'>cohort_zeta</span></a>
 
	</td><td align='left'  valign='top'>
 added before log for cohort direction forward differences for 
	<code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.o">5.1.j.o: <span style='white-space: nowrap'>cohort_sigma</span></a>
 
	</td><td align='left'  valign='top'>
 standard deviation for cohort direction forward differences 
	for <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.p">5.1.j.p: <span style='white-space: nowrap'>cohort_order</span></a>
 
	</td><td align='left'  valign='top'>
 order for cohort direction forward differences for 
	<code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.q">5.1.j.q: <span style='white-space: nowrap'>cross_like</span></a>
 
	</td><td align='left'  valign='top'>
 cross term forward difference likelihood for 
	<code>
<span style='white-space: nowrap'>&nbsp;s^q(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.r">5.1.j.r: <span style='white-space: nowrap'>cross_zeta</span></a>
 
	</td><td align='left'  valign='top'>
 added before log for cross term forward differences for 
	<code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.j.s">5.1.j.s: <span style='white-space: nowrap'>cross_sigma</span></a>
 
	</td><td align='left'  valign='top'>
 standard deviation for cross term forward differences 
	for <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>

</td></tr>
</table>
<br>
<b><a name="4.1.g.c" id="4.1.g.c">4.1.g.c: function</a></b>



<br>
The value in the column with name <code><font color="blue">function</font></code> specifies the function 
for the corresponding line 
and has one of the following values :
<code><font color="blue">S</font></code>,
<code><font color="blue">C</font></code>,
<code><font color="blue">iota</font></code>,
<code><font color="blue">rho</font></code>,
<code><font color="blue">chi</font></code>, or
<code><font color="blue">omega</font></code>.
For more details, see the 
<a href="#5.1.b">5.1.b: <span style='white-space: nowrap'>stochastic&nbsp;functions</span></a>
 
discussion in the optimizer documentation.

<br>
<br>
<b><a name="4.1.g.d" id="4.1.g.d">4.1.g.d: name</a></b>


<br>
The columns with names
<code><font color="blue">prior_like</font></code>,
<code><font color="blue">age_like</font></code>, and
<code><font color="blue">cohort_like</font></code>,
must value <code><font color="blue">gaussian</font></code> or <code><font color="blue">laplace</font></code>.
This specifies the corresponding likelihood for the residuals.

<br>
<br>
<b><a name="4.1.g.e" id="4.1.g.e">4.1.g.e: zeta</a></b>

<br>
The columns with names
<code><font color="blue">prior_zeta</font></code>,
<code><font color="blue">age_zeta</font></code>, and
<code><font color="blue">cohort_zeta</font></code>,
contains the offset added before taking the log
during the computation of the corresponding residuals.

<br>
<br>
<b><a name="4.1.g.f" id="4.1.g.f">4.1.g.f: sigma</a></b>

<br>
The columns with names
<code><font color="blue">prior_sigma</font></code>,
<code><font color="blue">age_sigma</font></code>, and
<code><font color="blue">cohort_sigma</font></code>,
contains the standard deviation for the corresponding residuals.

<br>
<br>
<b><a name="4.1.g.g" id="4.1.g.g">4.1.g.g: order</a></b>



<br>
The columns with name <code><font color="blue">age_order</font></code> and <code><font color="blue">cohort_order</font></code> 
must have value <code><font color="blue">1</font></code> or <code><font color="blue">2</font></code>.
These specify the order for the forward differences
in the age and cohort directions.
Note that the functions <code><font color="blue">S</font></code> and <code><font color="blue">C</font></code>
can only use order <code><font color="blue">1</font></code> in the age direction.



<br>
<br>
<b><big><a name="4.1.h" id="4.1.h">4.1.h: effect_in.csv</a></big></b>

<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>effect_in.csv</span></font></i></code>
 specifies
the measurement effect input information .
This file has five columns with the following names:
<code><font color="blue">integrand</font></code>, 
<code><font color="blue">covariate</font></code>, 
<code><font color="blue">lower</font></code>,
<code><font color="blue">initial</font></code>, and 
<code><font color="blue">upper</font></code>.

<br>
<br>
<b><a name="4.1.h.a" id="4.1.h.a">4.1.h.a: integrand</a></b>

<br>
The column with name <code><font color="blue">integrand</font></code> 
must have one of the following values:
<code><font color="blue">incidence</font></code>,
<code><font color="blue">m_all</font></code>,
<code><font color="blue">m_excess</font></code>,
<code><font color="blue">m_other</font></code>,
<code><font color="blue">m_prevalence</font></code>,
<code><font color="blue">m_specific</font></code>,
<code><font color="blue">relative_risk</font></code>, or
<code><font color="blue">remission</font></code>.
We use <code>
<span style='white-space: nowrap'>&nbsp;i&nbsp;(&nbsp;m&nbsp;)</span></code>
 to denote the integrand
for the <i>m</i>-th effect; see optimizer 
<a href="#5.1.m.a">5.1.m.a: <span style='white-space: nowrap'>integrand</span></a>
.

<br>
<br>
<b><a name="4.1.h.b" id="4.1.h.b">4.1.h.b: covariate</a></b>



<br>
Each value in the <code><font color="blue">covariate</font></code> column
must be one of the 
<a href="#4.1.f.i">4.1.f.i: <span style='white-space: nowrap'>covariate</span></a>
 names in
the 
<code><i><font color="black"><span style='white-space: nowrap'>measure_in.csv</span></font></i></code>
 file
(hence it must begin with the characters <code><font color="blue">x_</font></code>).
Only covariate effects that appear in the 
<code><i><font color="black"><span style='white-space: nowrap'>effect_in.csv</span></font></i></code>
 file are
included in the fit.
We use <code>
<span style='white-space: nowrap'>&nbsp;n(m)</span></code>
 to denote the covariate
for the <i>m</i>-th effect; see optimizer 
<a href="#5.1.m.b">5.1.m.b: <span style='white-space: nowrap'>covariate</span></a>
.

<br>
<br>
<b><a name="4.1.h.c" id="4.1.h.c">4.1.h.c: lower</a></b>



<br>
The lower limit 
(constraint on fit) for this covariate effect. 
The value <code><font color="blue">-inf</font></code> can be used to denote minus 
<a href="#4.1.d">4.1.d: <span style='white-space: nowrap'>infinity</span></a>
; i.e.,
no lower limit.

<br>
<br>
<b><a name="4.1.h.d" id="4.1.h.d">4.1.h.d: initial</a></b>



<br>
The initial value (where the optimization procedure begins)
for this covariate effect.
For each covariate effect, 
<code><i><font color="black"><span style='white-space: nowrap'>initial</span></font></i></code>
 must satisfy

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>lower</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>initial</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>upper</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><a name="4.1.h.e" id="4.1.h.e">4.1.h.e: upper</a></b>



<br>
The upper limit 
(constraint on fit) for this covariate effect. 
The value <code><font color="blue">inf</font></code> can be used to denote plus 
<a href="#4.1.d">4.1.d: <span style='white-space: nowrap'>infinity</span></a>
; i.e.,
no lower limit.
It is ok if 

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>lower</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>initial</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>upper</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
in which case the corresponding value is used for this covariate effect,
and it is not included in the optimization procedure.





<br>
<br>
<b><big><a name="4.1.i" id="4.1.i">4.1.i: sfun_out.csv</a></big></b>

<br>
If this command line argument is present,
this is an output file that contains information for each point
on the computational grid.
<table><tr><td align='left'  valign='top'>

<b>Name</b> 
	</td><td align='left'  valign='top'>
 <b>Value</b> 
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">age</font></code>   
	</td><td align='left'  valign='top'>
 age <code>
<span style='white-space: nowrap'>&nbsp;a</span></code>
 for this line of the file
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">cohort</font></code> 
	</td><td align='left'  valign='top'>
 cohort <code>
<span style='white-space: nowrap'>&nbsp;c</span></code>
 for this line of the file
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">time</font></code>  
	</td><td align='left'  valign='top'>
 time <code>
<span style='white-space: nowrap'>&nbsp;t&nbsp;=&nbsp;a&nbsp;+&nbsp;c</span></code>
 for this line of the file
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">function</font></code> 
	</td><td align='left'  valign='top'>
 stochastic function index <code>
<span style='white-space: nowrap'>&nbsp;q</span></code>
 for this line of the file,
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.o.a">5.1.o.a: <span style='white-space: nowrap'>estimate</span></a>
 
	</td><td align='left'  valign='top'>
 final optimal estimate for <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>
 
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.o.b">5.1.o.b: <span style='white-space: nowrap'>prior_residual</span></a>
 
	</td><td align='left'  valign='top'>
 direct prior residual for <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.o.c">5.1.o.c: <span style='white-space: nowrap'>prior_scaled</span></a>
 
	</td><td align='left'  valign='top'>
 scaled direct prior residual for <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.o.d">5.1.o.d: <span style='white-space: nowrap'>age_residual</span></a>
 
	</td><td align='left'  valign='top'>
 age direction residual for <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.o.e">5.1.o.e: <span style='white-space: nowrap'>age_scaled</span></a>
 
	</td><td align='left'  valign='top'>
 scaled age direction residual for <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.o.f">5.1.o.f: <span style='white-space: nowrap'>cohort_residual</span></a>
 
	</td><td align='left'  valign='top'>
 cohort direction residual for <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.o.g">5.1.o.g: <span style='white-space: nowrap'>cohort_scaled</span></a>
 
	</td><td align='left'  valign='top'>
 scaled cohort direction residual for <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.o.h">5.1.o.h: <span style='white-space: nowrap'>cross_residual</span></a>
 
	</td><td align='left'  valign='top'>
 cross term residual for <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.o.i">5.1.o.i: <span style='white-space: nowrap'>cross_scaled</span></a>
 
	</td><td align='left'  valign='top'>
 scaled cross term residual for <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>

</td></tr>
</table>
Note that the output file has special structure in the following way:

<ol type="1"><li>
Output lines are in groups of six with the same value for <code>
<span style='white-space: nowrap'>&nbsp;(a,&nbsp;c)</span></code>
;
i.e., they corresponding to <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>
 
for <code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;5</span></code>
.
</li><li>

The function index <code>
<span style='white-space: nowrap'>&nbsp;q</span></code>
 on each line in a group of six is different
corresponds to one of the following stochastic functions:
<code><font color="blue">S</font></code>, <code><font color="blue">C</font></code>, <code><font color="blue">iota</font></code>, <code><font color="blue">rho</font></code>, <code><font color="blue">chi</font></code>, or <code><font color="blue">omega</font></code>.
</li></ol>



<br>
<br>
<b><a name="4.1.i.a" id="4.1.i.a">4.1.i.a: Scaled Residuals</a></b>



<ol type="1"><li>
If a corresponding standard deviation <code>
<span style='white-space: nowrap'>&nbsp;\sigma&nbsp;=&nbsp;0&nbsp;</span></code>
 or
<code>
<span style='white-space: nowrap'>&nbsp;\sigma&nbsp;=&nbsp;\infty</span></code>
, the scaled residual is zero.
</li><li>

Residuals that are not defined are set to zero.
For example, the forward difference age residuals at the 
maximum age value.
</li><li>

If <code>
<span style='white-space: nowrap'>&nbsp;0&nbsp;&lt;&nbsp;\sigma&nbsp;&lt;&nbsp;\infty</span></code>
, and it corresponds to a prior residual,
the scaled residual is the residual divided <code>
<span style='white-space: nowrap'>&nbsp;\sigma</span></code>
.
</li><li>

If <code>
<span style='white-space: nowrap'>&nbsp;0&nbsp;&lt;&nbsp;\sigma&nbsp;&lt;&nbsp;\infty</span></code>
, and it corresponds to a defined
age (cohort) residual,
the scaled residual is the residual divided <code>
<span style='white-space: nowrap'>&nbsp;\sigma</span></code>

times the square root of the corresponding age (cohort) values.
</li></ol>




<br>
<br>
<b><big><a name="4.1.j" id="4.1.j">4.1.j: measure_out.csv</a></big></b>

<br>
If this command line argument is present,
all of the columns present in 
<a href="#4.1.f">4.1.f: <span style='white-space: nowrap'>measure_in.csv</span></a>
 
are copied to 
<code><i><font color="black"><span style='white-space: nowrap'>measure_out.csv</span></font></i></code>
.
In addition, this output file that contains information for each measurement.
<table><tr><td align='left'  valign='top'>

<b>Name</b> 
	</td><td align='left'  valign='top'>
 <b>Value</b> 
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>age</span></font></i></code>
   
	</td><td align='left'  valign='top'>
 midpoint of the age interval for this measurement
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i></code>
 
	</td><td align='left'  valign='top'>
 midpoint of the cohort interval for this measurement
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>time</span></font></i></code>
  
	</td><td align='left'  valign='top'>
 midpoint of the time interval for this measurement.
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.p.b">5.1.p.b: <span style='white-space: nowrap'>model</span></a>

		</td><td align='left'  valign='top'>
 model value for this measurement,
		corresponding to <a href="#5.1.o.a">5.1.o.a: <span style='white-space: nowrap'>estimate</span></a>

</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.p.a">5.1.p.a: <span style='white-space: nowrap'>adjusted</span></a>

		</td><td align='left'  valign='top'>
 covariate adjusted value for this measurement
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.p.c">5.1.p.c: <span style='white-space: nowrap'>residual</span></a>

		</td><td align='left'  valign='top'>
 residual value for this measurement,
		corresponding to estimate
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.p.d">5.1.p.d: <span style='white-space: nowrap'>scaled</span></a>

		</td><td align='left'  valign='top'>
 scaled residual for this measurement,
		corresponding to the estimate
</td></tr>
</table>
<br>
<b><big><a name="4.1.k" id="4.1.k">4.1.k: effect_out.csv</a></big></b>

<br>
If this command line argument is present,
each line of this file contains information for a measurement effect.
This file has three columns named 
<code><font color="blue">integrand</font></code>, <code><font color="blue">covariate</font></code> and <code><font color="blue">effect</font></code>

<br>
<br>
<b><a name="4.1.k.a" id="4.1.k.a">4.1.k.a: integrand</a></b>
<br>
The column named <code><font color="blue">integrand</font></code> specifies the
<a href="#4.1.f.b">4.1.f.b: <span style='white-space: nowrap'>integrand</span></a>
 
column in the 
<code><i><font color="black"><span style='white-space: nowrap'>measure_in.csv</span></font></i></code>
 file for this 
measurement effect.

<br>
<br>
<b><a name="4.1.k.b" id="4.1.k.b">4.1.k.b: covariate</a></b>
<br>
The column named <code><font color="blue">covariate</font></code> specifies the
<a href="#4.1.f.i">4.1.f.i: <span style='white-space: nowrap'>covariate</span></a>
 
column in the 
<code><i><font color="black"><span style='white-space: nowrap'>measure_in.csv</span></font></i></code>
 file for this 
measurement effect.

<br>
<br>
<b><a name="4.1.k.c" id="4.1.k.c">4.1.k.c: effect</a></b>



<br>
The value in the column named <code><font color="blue">estimate</font></code> is the 
MAP estimate for this measurement effect.

<br>
<br>
<b><big><a name="4.1.l" id="4.1.l">4.1.l: Example</a></big></b>
<br>
The bash script <a href="#6.1">6.1: <span style='white-space: nowrap'>get_started.sh</span></a>
 is a simple example and test
of <code><font color="blue">dismod_pde_csv</font></code>.


<hr>Input File: cpp/dismod_pde_csv.cpp

<hr>



<center><b><big><big><a name="4.2" id="4.2">4.2: dismod_pde Python CSV Helper Scripts</a>
</big></big></b></center>
The following scripts help in using the 
<a href="#4.1">4.1: <span style='white-space: nowrap'>dismod_pde_csv</span></a>
:

<br>
<br>
<b><big><a name="4.2.a" id="4.2.a">4.2.a: Contents</a></big></b>
<br>
<div><a href="#4.2.1" target="_top">4.2.1:&nbsp;Bubble&nbsp;Plots&nbsp;of&nbsp;Values&nbsp;in&nbsp;Csv&nbsp;File</a><br>
<a href="#4.2.2" target="_top">4.2.2:&nbsp;Change&nbsp;The&nbsp;dismod_pde&nbsp;Stochastic&nbsp;Function&nbsp;Input&nbsp;File</a><br>
<a href="#4.2.3" target="_top">4.2.3:&nbsp;Compare&nbsp;sfun_out.csv&nbsp;and&nbsp;d4_simulate.py&nbsp;Solution&nbsp;File</a><br>
<a href="#4.2.4" target="_top">4.2.4:&nbsp;Contour&nbsp;Plots&nbsp;of&nbsp;Values&nbsp;in&nbsp;Csv&nbsp;File</a><br>
<a href="#4.2.5" target="_top">4.2.5:&nbsp;Plot&nbsp;the&nbsp;Cumulative&nbsp;Distribution&nbsp;for&nbsp;a&nbsp;Csv&nbsp;File&nbsp;Column</a><br>
<a href="#4.2.6" target="_top">4.2.6:&nbsp;Line&nbsp;and&nbsp;Point&nbsp;Plots&nbsp;of&nbsp;CSV&nbsp;Files</a><br>
<a href="#4.2.7" target="_top">4.2.7:&nbsp;Create&nbsp;Derived&nbsp;Stochastic&nbsp;Function&nbsp;Output&nbsp;Files</a><br>
<a href="#4.2.8" target="_top">4.2.8:&nbsp;Convert&nbsp;From&nbsp;Age-Cohort&nbsp;Grid&nbsp;to&nbsp;Age-Time&nbsp;Rectangular&nbsp;Grid</a><br>
<a href="#4.2.9" target="_top">4.2.9:&nbsp;Simulated&nbsp;dismod_pde&nbsp;Data&nbsp;and&nbsp;Solution&nbsp;Files</a><br>
</div>
<hr>Input File: omh/python.omh

<hr>
<center><b><big><big><a name="4.2.1" id="4.2.1">4.2.1: Bubble Plots of Values in Csv File</a>
</big></big></b></center>
<br>
<b><big><a name="4.2.1.a" id="4.2.1.a">4.2.1.a: Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>d4_bubble.py&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>csv_file</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>plot_file</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>title</span></font></i></code>


<code><font color="blue"><span style='white-space: nowrap'>\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_name</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_min</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_max</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y_name</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y_min</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y_max</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s_name</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s_min</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s_between</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s_max</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f_name</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f_min</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f_max</span></font></i></code>


<br>
<br>
<b><big><a name="4.2.1.b" id="4.2.1.b">4.2.1.b: Purpose</a></big></b>
<br>
Make a bubble plot of the values in a csv file.

<br>
<br>
<b><big><a name="4.2.1.c" id="4.2.1.c">4.2.1.c: csv_file</a></big></b>
<br>
is the name of <a href="#4">4: <span style='white-space: nowrap'>csv</span></a>
 file to containing the values to be plotted.

<br>
<br>
<b><big><a name="4.2.1.d" id="4.2.1.d">4.2.1.d: plot_file</a></big></b>
<br>
Is the name of the plot file stored to disk. The extension
for this file will determine the output format; e.g., <code><font color="blue">.pdf</font></code>
or <code><font color="blue">.eps</font></code>.
If 
<code><i><font color="black"><span style='white-space: nowrap'>plot_file</span></font></i></code>
 is the string <code><font color="blue">'screen'</font></code>,
the plot is displayed on the screen, and <code><font color="blue">d4_bubble.py</font></code> waits 
for the user to close the plot before returning.

<br>
<br>
<b><big><a name="4.2.1.e" id="4.2.1.e">4.2.1.e: title</a></big></b>
<br>
is the title placed at the top of the plot.

<br>
<br>
<b><big><a name="4.2.1.f" id="4.2.1.f">4.2.1.f: x-axis</a></big></b>
<br>
This is the horizontal axis in the plot.

<br>
<br>
<b><a name="4.2.1.f.a" id="4.2.1.f.a">4.2.1.f.a: x_name</a></b>
<br>
name for the column corresponding to the x-axis.
This column must contain numeric data.

<br>
<br>
<b><a name="4.2.1.f.b" id="4.2.1.f.b">4.2.1.f.b: x_min</a></b>
<br>
lower limit for the x-axis in the plot
(x values less than 
<code><i><font color="black"><span style='white-space: nowrap'>x_min</span></font></i></code>
 are plotted as 
<code><i><font color="black"><span style='white-space: nowrap'>x_min</span></font></i></code>
).

<br>
<br>
<b><a name="4.2.1.f.c" id="4.2.1.f.c">4.2.1.f.c: x_max</a></b>
<br>
upper limit for the x-axis in the plot
(x values greater than 
<code><i><font color="black"><span style='white-space: nowrap'>x_max</span></font></i></code>
 are plotted as 
<code><i><font color="black"><span style='white-space: nowrap'>x_max</span></font></i></code>
).

<br>
<br>
<b><big><a name="4.2.1.g" id="4.2.1.g">4.2.1.g: y-axis</a></big></b>
<br>
This is the vertical axis in the plot.

<br>
<br>
<b><a name="4.2.1.g.a" id="4.2.1.g.a">4.2.1.g.a: y_name</a></b>
<br>
name for the column corresponding to the y-axis.
This column must contain numeric data.

<br>
<br>
<b><a name="4.2.1.g.b" id="4.2.1.g.b">4.2.1.g.b: y_min</a></b>
<br>
lower limit for the y-axis in the plot
(y values less than 
<code><i><font color="black"><span style='white-space: nowrap'>y_min</span></font></i></code>
 are plotted as 
<code><i><font color="black"><span style='white-space: nowrap'>y_min</span></font></i></code>
).

<br>
<br>
<b><a name="4.2.1.g.c" id="4.2.1.g.c">4.2.1.g.c: y_max</a></b>
<br>
upper limit for the y-axis in the plot
(y values greater than 
<code><i><font color="black"><span style='white-space: nowrap'>y_max</span></font></i></code>
 are plotted as 
<code><i><font color="black"><span style='white-space: nowrap'>y_max</span></font></i></code>
).

<br>
<br>
<b><big><a name="4.2.1.h" id="4.2.1.h">4.2.1.h: Bubble size</a></big></b>
<br>
These arguments determine the size of the bubbles in the plot.

<br>
<br>
<b><a name="4.2.1.h.a" id="4.2.1.h.a">4.2.1.h.a: s_name</a></b>
<br>
name for the column corresponding to the size of the bubbles in the plot.
This column must contain numeric data.

<br>
<br>
<b><a name="4.2.1.h.b" id="4.2.1.h.b">4.2.1.h.b: s_min</a></b>
<br>
absolute value corresponding to the minimum bubble size.
Values with smaller absolute value are plotted at this size.
Note that the value 
<code><i><font color="black"><span style='white-space: nowrap'>s_min</span></font></i></code>
 is used to label the corresponding 
bubble size.

<br>
<br>
<b><a name="4.2.1.h.c" id="4.2.1.h.c">4.2.1.h.c: s_between</a></b>
<br>
the value 
<code><i><font color="black"><span style='white-space: nowrap'>s_between</span></font></i></code>
 is used to label the corresponding 
bubble size where

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s_min</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s_between</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s_max</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><a name="4.2.1.h.d" id="4.2.1.h.d">4.2.1.h.d: s_max</a></b>
<br>
absolute value corresponding to the maximum bubble size.
Values with larger absolute value are plotted at this size.
Note that the value 
<code><i><font color="black"><span style='white-space: nowrap'>s_max</span></font></i></code>
 is used to label the corresponding 
bubble size.

<br>
<br>
<b><big><a name="4.2.1.i" id="4.2.1.i">4.2.1.i: Filter</a></big></b>
<br>
These arguments determine which lines in the csv file
should be included in the plot. 

<br>
<br>
<b><a name="4.2.1.i.a" id="4.2.1.i.a">4.2.1.i.a: f_name</a></b>
<br>
Is the name of the column used for determining which lines to include.

<br>
<br>
<b><a name="4.2.1.i.b" id="4.2.1.i.b">4.2.1.i.b: f_min</a></b>
<br>
Is the minimum value for the filtering column that corresponds to lines
that are included.

<br>
<br>
<b><a name="4.2.1.i.c" id="4.2.1.i.c">4.2.1.i.c: f_max</a></b>
<br>
Is the maximum value for the filtering column that corresponds to lines
that are included. 
If 
<code><i><font color="black"><span style='white-space: nowrap'>f_min</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f_max</span></font></i></code>
 as strings, then the filtering
column is treated as a string column and only those lines with that
same value are included.
Otherwise the filtering column must contain numeric data.

<br>
<br>
<b><big><a name="4.2.1.j" id="4.2.1.j">4.2.1.j: Nan</a></big></b>
<br>
If the value in column 
<code><i><font color="black"><span style='white-space: nowrap'>x_name</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>y_name</span></font></i></code>
 or 
<code><i><font color="black"><span style='white-space: nowrap'>s_name</span></font></i></code>

is not a number <code><font color="blue">nan</font></code>, the corresponding line is not included
in the plot. 


<hr>Input File: python/d4_bubble.py.in

<hr>
 
 


<center><b><big><big><a name="4.2.2" id="4.2.2">4.2.2: Change The dismod_pde Stochastic Function Input File</a>
</big></big></b></center>
<br>
<b><big><a name="4.2.2.a" id="4.2.2.a">4.2.2.a: Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>d4_change_sfun_in.py&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>input.csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>output.csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>[</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-comment&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>comment</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>]</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>[</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-optimize_</span></font><i><font color="black"><span style='white-space: nowrap'>sfun</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>zeta</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>lower</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>initial</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>upper</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>]</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>[</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-prior_</span></font><i><font color="black"><span style='white-space: nowrap'>sfun</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>zeta</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sigma</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>mean</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>]</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>[</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-age_</span></font><i><font color="black"><span style='white-space: nowrap'>sfun</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>zeta</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sigma</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>order</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>]</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>[</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-cohort_</span></font><i><font color="black"><span style='white-space: nowrap'>sfun</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>zeta</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sigma</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>order</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>]</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>[</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-cross_</span></font><i><font color="black"><span style='white-space: nowrap'>sfun</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>zeta</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sigma</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>]</span></font></i></code>


<br>
<br>
<b><big><a name="4.2.2.b" id="4.2.2.b">4.2.2.b: Expressions</a></big></b>
<br>
The expressions mentioned below uses the variables 
<code><font color="blue">a</font></code> for age, 
<code><font color="blue">c</font></code> for cohort, 
<code><font color="blue">t</font></code> for time which is equal to age plus cohort,
<code><font color="blue">inf</font></code> for plus infinity,
<code><font color="blue">gaussian</font></code> for <code><font color="blue">'gaussian'</font></code>, and
<code><font color="blue">laplace</font></code> for <code><font color="blue">'laplace'</font></code>.
The expressions are otherwise limited to the conditional expression syntax,
the operators <code><font color="blue">+</font></code>, <code><font color="blue">-</font></code>, <code><font color="blue">*</font></code>, <code><font color="blue">/</font></code>, <code><font color="blue">**</font></code>,
the <code><font color="blue">max</font></code> function, the <code><font color="blue">exp</font></code> function, and numeric constants.

<br>
<br>
<b><big><a name="4.2.2.c" id="4.2.2.c">4.2.2.c: input.csv</a></big></b>
<br>
is the first command line argument to <code><font color="blue">d4_change_sfun_in.py</font></code>.
It is a <a href="#4.1.g">4.1.g: <span style='white-space: nowrap'>sfun_in.csv</span></a>
 file
that is input to <code><font color="blue">d4_change_sfun_in.py</font></code>.

<br>
<br>
<b><big><a name="4.2.2.d" id="4.2.2.d">4.2.2.d: output.csv</a></big></b>
<br>
is the second command line argument to <code><font color="blue">d4_change_sfun_in.py</font></code>.
It is a  <a href="#4.1.g">4.1.g: <span style='white-space: nowrap'>sfun_in.csv</span></a>
 file that is 
output by <code><font color="blue">d4_change_sfun_in.py</font></code>. 
The values in this file are the same as in 
<code><i><font color="black"><span style='white-space: nowrap'>input.csv</span></font></i></code>
 
except that terms that appear on the 
command line are changed to the values specified on the command line.

<br>
<br>
<b><big><a name="4.2.2.e" id="4.2.2.e">4.2.2.e: sfun</a></big></b>
<br>
each appearance of 
<code><i><font color="black"><span style='white-space: nowrap'>sfun</span></font></i></code>
 in the syntax above
is one of the following:
<code><font color="blue">C</font></code>,
<code><font color="blue">S</font></code>,
<code><font color="blue">iota</font></code>, 
<code><font color="blue">rho</font></code>, 
<code><font color="blue">chi</font></code>, or
<code><font color="blue">omega</font></code>.

<br>
<br>
<b><big><a name="4.2.2.f" id="4.2.2.f">4.2.2.f: comment</a></big></b>

<br>
each appearance of 
<code><i><font color="black"><span style='white-space: nowrap'>comment</span></font></i></code>
 in the syntax above
is a comment about the corresponding stochastic function 
<code><i><font color="black"><span style='white-space: nowrap'>sfun</span></font></i></code>
.

<br>
<br>
<b><big><a name="4.2.2.g" id="4.2.2.g">4.2.2.g: lower</a></big></b>

<br>
each appearance of 
<code><i><font color="black"><span style='white-space: nowrap'>lower</span></font></i></code>
 in the syntax above
is an expression specifying the corresponding lower value for the 
optimization procedure.

<br>
<br>
<b><big><a name="4.2.2.h" id="4.2.2.h">4.2.2.h: initial</a></big></b>

<br>
each appearance of 
<code><i><font color="black"><span style='white-space: nowrap'>initial</span></font></i></code>
 in the syntax above
is an expression specifying the corresponding initial value for the 
optimization procedure.

<br>
<br>
<b><big><a name="4.2.2.i" id="4.2.2.i">4.2.2.i: upper</a></big></b>

<br>
each appearance of 
<code><i><font color="black"><span style='white-space: nowrap'>upper</span></font></i></code>
 in the syntax above
is an expression specifying the corresponding upper value for the 
optimization procedure.

<br>
<br>
<b><big><a name="4.2.2.j" id="4.2.2.j">4.2.2.j: name</a></big></b>

<br>
each appearance of 
<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 in the syntax above
is an expression that evaluates to one of the following:
<code><font color="blue">gaussian</font></code>, <code><font color="blue">laplace</font></code>.
It specifies which likelihood is used for the corresponding residuals.

<br>
<br>
<b><big><a name="4.2.2.k" id="4.2.2.k">4.2.2.k: zeta</a></big></b>

<br>
each appearance 
<code><i><font color="black"><span style='white-space: nowrap'>zeta</span></font></i></code>
 in the syntax above
is an expression for the <code>
<span style='white-space: nowrap'>&nbsp;\zeta</span></code>
 term in the scaling transformation;
i.e. the value that is added to the stochastic function before taking the 
log. In the case of 
<code><font color="blue"><span style='white-space: nowrap'>optimize_</span></font><i><font color="black"><span style='white-space: nowrap'>sfun</span></font></i></code>
 this is for the transformation
of the optimization problem. In the other cases, the log values are then 
subtracted to get the corresponding residuals.

<br>
<br>
<b><big><a name="4.2.2.l" id="4.2.2.l">4.2.2.l: sigma</a></big></b>

<br>
each appearance 
<code><i><font color="black"><span style='white-space: nowrap'>sigma</span></font></i></code>
 in the syntax above
is an expression for the standard deviation of the corresponding 
residual.

<br>
<br>
<b><big><a name="4.2.2.m" id="4.2.2.m">4.2.2.m: mean</a></big></b>

<br>
each appearance 
<code><i><font color="black"><span style='white-space: nowrap'>mean</span></font></i></code>
 in the syntax above
is an expression for direct prior mean of the corresponding 
stochastic function. 

<br>
<br>
<b><big><a name="4.2.2.n" id="4.2.2.n">4.2.2.n: order</a></big></b>

<br>
each appearance of 
<code><i><font color="black"><span style='white-space: nowrap'>order</span></font></i></code>
 is <code><font color="blue">1</font></code> or <code><font color="blue">2</font></code>.
It specifies the order for the corresponding differences.


<br>
<br>
<b><big><a name="4.2.2.o" id="4.2.2.o">4.2.2.o: Example</a></big></b>

<br>
The shell script <a href="#4.2.2.1">4.2.2.1: <span style='white-space: nowrap'>change_sfun_in.sh</span></a>
 is an example and test
of <code><font color="blue">d4_change_sfun_in.py</font></code>.


<hr>Input File: python/d4_change_sfun_in.py.in

<hr>
 

<center><b><big><big><a name="4.2.2.1" id="4.2.2.1">4.2.2.1: d4_change_sfun_in.py: Example and Test</a>
</big></big></b></center>
<br>
<b><big><a name="4.2.2.1.a" id="4.2.2.1.a">4.2.2.1.a: Syntax</a></big></b>

<code><font color="blue"><br>
change_sfun_in.sh</font></code>

<br>
<br>
<b><big><a name="4.2.2.1.b" id="4.2.2.1.b">4.2.2.1.b: Purpose</a></big></b>
<br>
This bash shell script is a simple example and test of
<code><font color="blue">d4_change_sfun_in.py</font></code>.
It exits with status zero if the test passes
and with status one if the test fails.

<br>
<br>
<b><big><a name="4.2.2.1.c" id="4.2.2.1.c">4.2.2.1.c: Abort on Any Error</a></big></b>

<code><font color='blue'><pre style='display:inline'> 
set -e
</pre></font></code>


<br>
<br>
<b><big><a name="4.2.2.1.d" id="4.2.2.1.d">4.2.2.1.d: parameter.csv</a></big></b>
<br>
The first thing we do is create the
<a href="#4.1.e">4.1.e: <span style='white-space: nowrap'>parameter.csv</span></a>
 file 
as follows:
<code><font color='blue'><pre style='display:inline'> 
cat &lt;&lt; EOF &gt; parameter.csv
name,value
age_grid,0 10 20
cohort_grid,1950 1990 2030 
max_ode_step,1
print_level,5
max_iteration,80
converge_tolerance,1e-6
EOF
</pre></font></code>

For this example,
we use large values for <code><font color="blue">delta_age</font></code> and <code><font color="blue">delta_cohort</font></code>
so that the resulting file <code><font color="blue">sfun_in.csv</font></code> is small.
Note that the first and last lines above are bash command that
instruct bash to create the file <code><font color="blue">parameter.csv</font></code> with the
contents between them.

<br>
<br>
<b><big><a name="4.2.2.1.e" id="4.2.2.1.e">4.2.2.1.e: measure_in.csv</a></big></b>
<br>
Next we create a very simple
<a href="#4.1.f">4.1.f: <span style='white-space: nowrap'>measure_in.csv</span></a>
 file.
<code><font color='blue'><pre style='display:inline'> 
cat &lt;&lt; EOF &gt; measure_in.csv
integrand,age_lower,age_upper,time_lower,time_upper,meas_like,meas_zeta,meas_sigma,meas_value,c_notes
remission,10,20,1990,2000,gaussian,1,1e-5,1e-1,no_comment
EOF
</pre></font></code>

The text above is in a form that makes it easier to read in this example,
but it does not conform to the csv file 
<a href="#4.a">4.a: <span style='white-space: nowrap'>specifications</span></a>
.  
The command <code><font color="blue">tr '\n;' ' \n'</font></code>
replaces all the new-lines by spaces and the semi-colons by new-lines 
which converts the text to csv format.
The command <code><font color="blue"> sed -e 's/  */ /g' -e '/^ *$/d'</font></code>
converts multiple contiguous spaces to a single space,
which is not necessary, but helps make the result readable in an editor.
It also deletes line that only have spaces in then.
(This is necessary for this example because the new-line after the last
semi-colon gets converted to a space.)

<br>
<br>
<b><big><a name="4.2.2.1.f" id="4.2.2.1.f">4.2.2.1.f: template.csv</a></big></b>
<br>
Remove the file 
<a href="#4.1.g.a">4.1.g.a: <span style='white-space: nowrap'>template.csv</span></a>
 
(if it exists) and then recreate it.
<code><font color='blue'><pre style='display:inline'> 
rm -f template.csv
../cpp/dismod_pde_csv \
	parameter.csv measure_in.csv template.csv
</pre></font></code>


<br>
<br>
<b><big><a name="4.2.2.1.g" id="4.2.2.1.g">4.2.2.1.g: Running d4_change_sfun_in.py</a></big></b>

<code><font color='blue'><pre style='display:inline'> 
$top_builddir/python/d4_change_sfun_in.py template.csv sfun_in.csv \
\
-comment            'zeta          lower      initial          upper' \
-optimize_S           1.0            0.0         1e-2            1.0 \
\
-comment            'name           zeta        sigma           mean' \
-prior_S         gaussian            1.0          inf            0.0  \
\
-comment            'name           zeta        sigma          order' \
-age_S           gaussian            1.0         2e-2              1  \
-cohort_S         laplace            1.0         3e-2              2  \
-cross_S          laplace            2.0         3e-2
</pre></font></code>


<br>
<br>
<b><a name="4.2.2.1.g.a" id="4.2.2.1.g.a">4.2.2.1.g.a: Check sfun_in.csv</a></b>

<code><font color='blue'><pre style='display:inline'> 
cat &lt;&lt; EOF &gt; check_sfun_in.py
import csv
import sys
file   = open('sfun_in.csv', 'r')
reader = csv.DictReader(file, skipinitialspace=True)
ok     = True
for row in reader :
	if row['function'] == 'S' : 
		ok = ok and float( row['optimize_lower'] )   == 0.0 
		ok = ok and float( row['optimize_initial'] ) == 0.01
		ok = ok and float( row['optimize_upper'] )   == 1.0 

		ok = ok and row['prior_like']                == 'gaussian'
		ok = ok and float(row['prior_zeta'])         == 1.
		ok = ok and row['prior_sigma']               == 'inf'
		ok = ok and float(row['prior_mean'] )        == 0.

		ok = ok and row['age_like']                  == 'gaussian'
		ok = ok and float(row['age_zeta'] )          == 1.
		ok = ok and float(row['age_sigma'] )         == .02
		ok = ok and int(row['age_order'])            == 1

		ok = ok and row['cohort_like']               == 'laplace'
		ok = ok and float(row['cohort_zeta'] )       == 1.
		ok = ok and float(row['cohort_sigma'] )      == .03
		ok = ok and int(row['cohort_order'])         == 2

		ok = ok and row['cross_like']                == 'laplace'
		ok = ok and float(row['cross_zeta'] )        == 2.0
		ok = ok and float(row['cross_sigma'] )       == .03
	if not ok :
		print row
		sys.exit('Error in d4_change_sfun_in.py')
sys.exit(None)
EOF
$top_builddir/python.sh \
	check_sfun_in.py
</pre></font></code>


<br>
<br>
<b><big><a name="4.2.2.1.h" id="4.2.2.1.h">4.2.2.1.h: Final Message</a></big></b>
<br>
If this shell script reaches here, then test has passed.
<code><font color='blue'><pre style='display:inline'> 
echo &quot;change_sfun_in.sh: OK&quot;
</pre></font></code>



<hr>Input File: example/change_sfun_in.sh

<hr>
 



<center><b><big><big><a name="4.2.3" id="4.2.3">4.2.3: Compare sfun_out.csv and d4_simulate.py Solution File</a>
</big></big></b></center>
<br>
<b><big><a name="4.2.3.a" id="4.2.3.a">4.2.3.a: Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>d4_compare_sfun.py&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--sfun_out&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_out.csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--solution&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>solution.csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--compare&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>compare.csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--include&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>include_expr</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>value_expr</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--median&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>median_bound</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--average&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>average_bound</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--maximum&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>maximum_bound</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="4.2.3.b" id="4.2.3.b">4.2.3.b: Purpose</a></big></b>
<br>
This program outputs a comparison of the stochastic function values
corresponding to a <a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>
 
solution file 
<code><i><font color="black"><span style='white-space: nowrap'>solution.csv</span></font></i></code>
 and a <code><font color="blue">dismod_pde_csv</font></code> 
<a href="#4.1.i">4.1.i: <span style='white-space: nowrap'>sfun_out.csv</span></a>
 result file.
 
<br>
<br>
<b><big><a name="4.2.3.c" id="4.2.3.c">4.2.3.c: sfun_out.csv</a></big></b>
<br>
This is an input file for <code><font color="blue">d4_compare_sfun.py</font></code> that was generate by
<code><font color="blue">dismod_pde_csv</font></code>; see <a href="#4.1.i">4.1.i: <span style='white-space: nowrap'>sfun_out.csv</span></a>
.

<br>
<br>
<b><big><a name="4.2.3.d" id="4.2.3.d">4.2.3.d: solution.csv</a></big></b>
<br>
This is an input file for <code><font color="blue">d4_compare_sfun.py</font></code> that was generated by
<code><font color="blue">d4_simulate.py</font></code>; 
see <a href="#4.2.9.e">4.2.9.e: <span style='white-space: nowrap'>d4_simulate.py</span></a>
.
We use piecewise bilinear interpolator of the values
in this solution file to obtain the values of the solution on 
the same age-cohort grid as 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_out.csv</span></font></i></code>
.

<br>
<br>
<b><big><a name="4.2.3.e" id="4.2.3.e">4.2.3.e: compare.csv</a></big></b>
<br>
This is the output file generated by <code><font color="blue">d4_compare_sfun.py</font></code>
with the same age-cohort grid as 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_out.csv</span></font></i></code>
.
It is a <a href="#4.a">4.a: <span style='white-space: nowrap'>dismod_pde&nbsp;csv&nbsp;file</span></a>
 with
the following columns:
<table><tr><td align='left'  valign='top'>

<b>field</b>  <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
	</td><td align='left'  valign='top'>
 <b>Description</b> 
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>function</span></font></i></code>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
	</td><td align='left'  valign='top'>
 stochastic <a href="#4.1.g.c">4.1.g.c: <span style='white-space: nowrap'>function</span></a>
; 
	i.e., <code><font color="blue">S</font></code>, <code><font color="blue">C</font></code>, <code><font color="blue">iota</font></code>, <code><font color="blue">rho</font></code>, <code><font color="blue">chi</font></code>, or
	<code><font color="blue">omega</font></code>.
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>age</span></font></i></code>
    <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
	</td><td align='left'  valign='top'>
 age for the corresponding line in csv file, <code>
<span style='white-space: nowrap'>&nbsp;a_j</span></code>

</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i></code>
  <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
	</td><td align='left'  valign='top'>
 cohort for the corresponding line in csv file, <code>
<span style='white-space: nowrap'>&nbsp;c_k</span></code>

</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>time</span></font></i></code>
  <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
	</td><td align='left'  valign='top'>
 time for the corresponding line in csv file, <code>
<span style='white-space: nowrap'>&nbsp;a_k&nbsp;+&nbsp;c_k</span></code>

</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i></code>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
	</td><td align='left'  valign='top'>
 interpolation of actual value used for simulation
	from 
<code><i><font color="black"><span style='white-space: nowrap'>solution.csv</span></font></i></code>
 to <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(&nbsp;a_j&nbsp;,&nbsp;c_k&nbsp;)</span></code>
.
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>estimate</span></font></i></code>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
	</td><td align='left'  valign='top'>
 the estimate in 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_out.csv</span></font></i></code>
 for <code>
<span style='white-space: nowrap'>&nbsp;s_{j,k}^q</span></code>
.
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>value</span></font></i></code>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
	</td><td align='left'  valign='top'>
 result of <a href="#4.2.3.h">4.2.3.h: <span style='white-space: nowrap'>value_expr</span></a>

	for this row.
</td></tr>
</table>
The output files is on the same grid as the 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_out.csv</span></font></i></code>
 file,
and the values corresponding to the 
<code><i><font color="black"><span style='white-space: nowrap'>solution.csv</span></font></i></code>
 file
are interpolated to that grid.

<br>
<br>
<b><big><a name="4.2.3.f" id="4.2.3.f">4.2.3.f: Expressions</a></big></b>
<br>
The following variables, corresponding to one row of the output file,
are available for use in 
<code><i><font color="black"><span style='white-space: nowrap'>include_expr</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>value_expr</span></font></i></code>
: 
<code><font color="blue">f</font></code> (
<code><i><font color="black"><span style='white-space: nowrap'>function</span></font></i></code>
),
<code><font color="blue">a</font></code> (
<code><i><font color="black"><span style='white-space: nowrap'>age</span></font></i></code>
), 
<code><font color="blue">c</font></code> (
<code><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i></code>
), 
<code><font color="blue">t</font></code> (
<code><i><font color="black"><span style='white-space: nowrap'>time</span></font></i></code>
), 
<code><font color="blue">s</font></code> (
<code><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i></code>
), and
<code><font color="blue">e</font></code> (
<code><i><font color="black"><span style='white-space: nowrap'>estimate</span></font></i></code>
).
In addition, <code><font color="blue">inf</font></code> is equal to the value plus infinity,
<code><font color="blue">nan</font></code> is not a number, 
<code><font color="blue">True</font></code> is equal to true, and
<code><font color="blue">False</font></code> is equal to false.
All of these variables are numeric, except for 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 which is a string.
The expression is otherwise limited to the conditional expression syntax,
the operators <code><font color="blue">+</font></code>, <code><font color="blue">-</font></code>, <code><font color="blue">*</font></code>, <code><font color="blue">/</font></code>, <code><font color="blue">**</font></code>,
the <code><font color="blue">max</font></code> and <code><font color="blue">abs</font></code> functions, and numeric constants.

<br>
<br>
<b><big><a name="4.2.3.g" id="4.2.3.g">4.2.3.g: include_expr</a></big></b>
<br>
The result of the expression

<code><i><font color="black"><span style='white-space: nowrap'>include_expr</span></font></i></code>
 must be <code><font color="blue">True</font></code> or <code><font color="blue">False</font></code>.
If it is true, the corresponding row of the 
output file 
<code><i><font color="black"><span style='white-space: nowrap'>compare.csv</span></font></i></code>
 is included in the bound comparisons.
For example, to include all results between 1950 and 2000, one could use
<code><font color='blue'><pre style='display:inline'> 
	-include '(1950 &lt;= t) and (t &lt;= 2000)'
</pre></font></code>


<br>
<br>
<b><big><a name="4.2.3.h" id="4.2.3.h">4.2.3.h: value_expr</a></big></b>
<br>
The result of the expression

<code><i><font color="black"><span style='white-space: nowrap'>value_expr</span></font></i></code>
 must be a float that gets included in the comparisons
(when 
<code><i><font color="black"><span style='white-space: nowrap'>include_expr</span></font></i></code>
 is true).
For example, to use the absolute relative error in the comparisons,
one could use
<code><font color='blue'><pre style='display:inline'> 
	-value 'abs( (s - e) / s )' 
</pre></font></code>


<br>
<br>
<b><big><a name="4.2.3.i" id="4.2.3.i">4.2.3.i: median_bound</a></big></b>
<br>
is an upper bound for the median of 
<code><i><font color="black"><span style='white-space: nowrap'>value_expr</span></font></i></code>

with respect to the rows where 
<code><i><font color="black"><span style='white-space: nowrap'>include_expr</span></font></i></code>
 is true.

<br>
<br>
<b><big><a name="4.2.3.j" id="4.2.3.j">4.2.3.j: average_bound</a></big></b>
<br>
is an upper bound for the average of 
<code><i><font color="black"><span style='white-space: nowrap'>value_expr</span></font></i></code>

with respect to the rows where 
<code><i><font color="black"><span style='white-space: nowrap'>include_expr</span></font></i></code>
 is true.

<br>
<br>
<b><big><a name="4.2.3.k" id="4.2.3.k">4.2.3.k: maximum_bound</a></big></b>
<br>
is an upper bound for the maximum of 
<code><i><font color="black"><span style='white-space: nowrap'>value_expr</span></font></i></code>

with respect to the rows where 
<code><i><font color="black"><span style='white-space: nowrap'>include_expr</span></font></i></code>
 is true.

<br>
<br>
<b><big><a name="4.2.3.l" id="4.2.3.l">4.2.3.l: Exit Status</a></big></b>
<br>
The return status is zero if every row of the output file is OK,
otherwise the return status is one.


<hr>Input File: python/d4_compare_sfun.py.in

<hr>
  



<center><b><big><big><a name="4.2.4" id="4.2.4">4.2.4: Contour Plots of Values in Csv File</a>
</big></big></b></center>
<br>
<b><big><a name="4.2.4.a" id="4.2.4.a">4.2.4.a: Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>d4_contour.py&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>csv_file</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>plot_file</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>title</span></font></i></code>


<code><font color="blue"><span style='white-space: nowrap'>\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_name</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_min</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_max</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y_name</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y_min</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y_max</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>z_name</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>z_min</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>z_max</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;[</span></font><i><font color="black"><span style='white-space: nowrap'>z_inc</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
<br>
<b><big><a name="4.2.4.b" id="4.2.4.b">4.2.4.b: Purpose</a></big></b>
<br>
Make a contour plot of the values in a csv file.

<br>
<br>
<b><big><a name="4.2.4.c" id="4.2.4.c">4.2.4.c: csv_file</a></big></b>
<br>
is the name of <a href="#4">4: <span style='white-space: nowrap'>csv</span></a>
 file to containing the values to be plotted.
The x, y, values must correspond to a rectangular array; i.e.
there is a vector <code>
<span style='white-space: nowrap'>&nbsp;x</span></code>
 of all x column input values,
and a vector <code>
<span style='white-space: nowrap'>&nbsp;y</span></code>
 of all y column input values and every
combination <code>
<span style='white-space: nowrap'>&nbsp;x_i</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;y_j</span></code>
 appears
in the file 
<code><i><font color="black"><span style='white-space: nowrap'>csv_file</span></font></i></code>
.

<br>
<br>
<b><big><a name="4.2.4.d" id="4.2.4.d">4.2.4.d: plot_file</a></big></b>
<br>
Is the name of the plot file stored to disk. The extension
for this file will determine the output format; e.g., <code><font color="blue">.pdf</font></code>
or <code><font color="blue">.eps</font></code>.
If 
<code><i><font color="black"><span style='white-space: nowrap'>plot_file</span></font></i></code>
 is the string <code><font color="blue">'screen'</font></code>,
the plot is displayed on the screen and <code><font color="blue">d4_contour.py</font></code> waits
for the user to close the plot before returning.

<br>
<br>
<b><big><a name="4.2.4.e" id="4.2.4.e">4.2.4.e: title</a></big></b>
<br>
is the title placed at the top of the plot.

<br>
<br>
<b><big><a name="4.2.4.f" id="4.2.4.f">4.2.4.f: x-axis</a></big></b>
<br>
This is the horizontal axis in the plot.

<br>
<br>
<b><a name="4.2.4.f.a" id="4.2.4.f.a">4.2.4.f.a: x_name</a></b>
<br>
name for the column corresponding to the x-axis.
This column must contain numeric data.

<br>
<br>
<b><a name="4.2.4.f.b" id="4.2.4.f.b">4.2.4.f.b: x_min</a></b>
<br>
lower limit for the x-axis in the plot.

<br>
<br>
<b><a name="4.2.4.f.c" id="4.2.4.f.c">4.2.4.f.c: x_max</a></b>
<br>
upper limit for the x-axis in the plot.

<br>
<br>
<b><big><a name="4.2.4.g" id="4.2.4.g">4.2.4.g: y-axis</a></big></b>
<br>
This is the vertical axis in the plot.

<br>
<br>
<b><a name="4.2.4.g.a" id="4.2.4.g.a">4.2.4.g.a: y_name</a></b>
<br>
name for the column corresponding to the y-axis.
This column must contain numeric data.

<br>
<br>
<b><a name="4.2.4.g.b" id="4.2.4.g.b">4.2.4.g.b: y_min</a></b>
<br>
lower limit for the y-axis in the plot.

<br>
<br>
<b><a name="4.2.4.g.c" id="4.2.4.g.c">4.2.4.g.c: y_max</a></b>
<br>
upper limit for the y-axis in the plot.

<br>
<br>
<b><big><a name="4.2.4.h" id="4.2.4.h">4.2.4.h: z-axis</a></big></b>
<br>
These arguments determine the variable corresponding to contour levels

<br>
<br>
<b><a name="4.2.4.h.a" id="4.2.4.h.a">4.2.4.h.a: z_name</a></b>
<br>
name for the column corresponding to the contour levels in the plot.
This column must contain numeric data.

<br>
<br>
<b><a name="4.2.4.h.b" id="4.2.4.h.b">4.2.4.h.b: z_min</a></b>
<br>
minimum contour level (this is also the first contour level).
If 
<code><i><font color="black"><span style='white-space: nowrap'>z_inc</span></font></i></code>
 is not present, this is also used for the initial 
increment and it must be greater than zero.

<br>
<br>
<b><a name="4.2.4.h.c" id="4.2.4.h.c">4.2.4.h.c: z_max</a></b>
<br>
maximum contour level (all contour levels are less than this value).

<br>
<br>
<b><a name="4.2.4.h.d" id="4.2.4.h.d">4.2.4.h.d: z_inc</a></b>
<br>
This argument is optional.
If it is present, it is used as the increment between contour
levels. Otherwise, 
<code><i><font color="black"><span style='white-space: nowrap'>z_min</span></font></i></code>
 is rounded down to a power of ten to
obtain the initial increment. In addition, in this case the increment is
increased as the level passes a power of ten.


<hr>Input File: python/d4_contour.py.in

<hr>
  



<center><b><big><big><a name="4.2.5" id="4.2.5">4.2.5: Plot the Cumulative Distribution for a Csv File Column</a>
</big></big></b></center>
<br>
<b><big><a name="4.2.5.a" id="4.2.5.a">4.2.5.a: Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>d4_cumulative.py&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>csv_file</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c_name</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>d4_cumulative.py&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>csv_file</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c_name</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f_name</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f_min</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f_max</span></font></i></code>


<br>
<br>
<b><big><a name="4.2.5.b" id="4.2.5.b">4.2.5.b: csv_file</a></big></b>
<br>
is the name of <a href="#4">4: <span style='white-space: nowrap'>csv</span></a>
 file to containing the values to be plotted.

<br>
<br>
<b><big><a name="4.2.5.c" id="4.2.5.c">4.2.5.c: c_name</a></big></b>
<br>
name for the column we are plotting the cumulative distribution for
(must contain numeric values).

<br>
<br>
<b><big><a name="4.2.5.d" id="4.2.5.d">4.2.5.d: f_name</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>f_name</span></font></i></code>
 is present,
it is the name of the column used for determining which lines to include.

<br>
<br>
<b><big><a name="4.2.5.e" id="4.2.5.e">4.2.5.e: f_min</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>f_min</span></font></i></code>
 is present,
it is the minimum value for the filtering column that corresponds to lines
that are included.

<br>
<br>
<b><big><a name="4.2.5.f" id="4.2.5.f">4.2.5.f: f_max</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>f_min</span></font></i></code>
 is present,
it is the maximum value for the filtering column that corresponds to lines
that are included. 
If 
<code><i><font color="black"><span style='white-space: nowrap'>f_min</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f_max</span></font></i></code>
 as strings, then the filtering
column is treated as a string column and only those lines with that
same value are included.
Otherwise the filtering column must contain numeric data.

<br>
<br>
<b><big><a name="4.2.5.g" id="4.2.5.g">4.2.5.g: Nan</a></big></b>
<br>
If the value in column 
<code><i><font color="black"><span style='white-space: nowrap'>c_name</span></font></i></code>

is not a number <code><font color="blue">nan</font></code>, it is not included in the plot.


<hr>Input File: python/d4_cumulative.py.in

<hr>
 
 


<center><b><big><big><a name="4.2.6" id="4.2.6">4.2.6: Line and Point Plots of CSV Files</a>
</big></big></b></center>
<br>
<b><big><a name="4.2.6.a" id="4.2.6.a">4.2.6.a: Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>d4_plot.py&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>csv_file</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>plot_file</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>title</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--line&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_col</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y_col</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>symbol</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>alpha</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--points&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_col</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y_col</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>symbol</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>alpha</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--axis&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_label</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_min</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_max</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y_label</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y_min</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y_max</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--string&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s_col</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s_value</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--numeric&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>e_col</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>expr</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--connect&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c_col</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c_limit_1</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c_limit_2</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c_limit_N</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--logx&nbsp;--logy</span></font></code>


<br>
<br>
<b><big><a name="4.2.6.b" id="4.2.6.b">4.2.6.b: csv_file</a></big></b>
<br>
is the name of the Comma Separated Value (CSV) file 
containing the data to be plotted.

<br>
<br>
<b><big><a name="4.2.6.c" id="4.2.6.c">4.2.6.c: plot_file</a></big></b>
<br>
Is the name of the plot file that is stored to disk. The extension
for this file will determine the output format; e.g., <code><font color="blue">.pdf</font></code>
or <code><font color="blue">.eps</font></code>.
If 
<code><i><font color="black"><span style='white-space: nowrap'>plot_file</span></font></i></code>
 is the string <code><font color="blue">'screen'</font></code>,
the plot is displayed on the screen, and <code><font color="blue">d4_plot.py</font></code> waits 
for the user to close the plot before returning.

<br>
<br>
<b><big><a name="4.2.6.d" id="4.2.6.d">4.2.6.d: title</a></big></b>
<br>
is the title that will be printed at the top of this plot.

<br>
<br>
<b><big><a name="4.2.6.e" id="4.2.6.e">4.2.6.e: --line, --points</a></big></b>
<br>
If the <code><font color="blue">--line</font></code> option (<code><font color="blue">--points</font></code> option)
is specified, <code><font color="blue">d4_plot.py</font></code> will draw
lines (not draw lines) between points.
Either <code><font color="blue">--line</font></code> or <code><font color="blue">--points</font></code>
must appear at least once.
Each time they appear, the following must come after it:

<br>
<br>
<b><a name="4.2.6.e.a" id="4.2.6.e.a">4.2.6.e.a: x_col</a></b>
<br>
is the name of the column corresponding to the horizontal axis 
for this 
<code><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>x_col</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y_col</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
  pair.  
The 
<code><i><font color="black"><span style='white-space: nowrap'>x_col</span></font></i></code>
 column must contain numeric data.
Pairs are always plotted in ascending order for the value 
on the horizontal axis; i.e., the value in column 
<code><i><font color="black"><span style='white-space: nowrap'>x_col</span></font></i></code>
.

<br>
<br>
<b><a name="4.2.6.e.b" id="4.2.6.e.b">4.2.6.e.b: y_col</a></b>
<br>
is the name of the column corresponding to the vertical axis 
for this 
<code><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>x_col</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y_col</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
  pair.  
The 
<code><i><font color="black"><span style='white-space: nowrap'>y_col</span></font></i></code>
 column must contain numeric data.
If a value in the column 
<code><i><font color="black"><span style='white-space: nowrap'>y_col</span></font></i></code>
 is <code><font color="blue">nan</font></code>,
the corresponding pair is not plotted.

<br>
<br>
<b><a name="4.2.6.e.c" id="4.2.6.e.c">4.2.6.e.c: symbol</a></b>
<br>
is either one symbol, or a list of symbols for this pair (a list of symbols 
is useful for the <a href="#4.2.6.i">4.2.6.i: <span style='white-space: nowrap'>--connect</span></a>
 option).
Valid symbol choices are
<code><font color="blue">'.'</font></code> (no symbol),
<code><font color="blue">'s'</font></code> (square),  
<code><font color="blue">'o'</font></code> (circle),  
<code><font color="blue">'*'</font></code> (star),  
<code><font color="blue">'x'</font></code> (cross),
<code><font color="blue">'+'</font></code> (plus),

<code><i><font color="black"><span style='white-space: nowrap'>'p'</span></font></i></code>
 (pentagon),
<code><font color="blue">'d'</font></code> (thin diamond),  
<code><font color="blue">'D'</font></code> (thick diamond)  

<code><i><font color="black"><span style='white-space: nowrap'>'h'</span></font></i></code>
 (hexagon1),

<code><i><font color="black"><span style='white-space: nowrap'>'H'</span></font></i></code>
 (hexagon2),
<code><font color="blue">'^'</font></code> (triangle up),  
<code><font color="blue">'&gt;'</font></code> (triangle right),  
<code><font color="blue">'v'</font></code> (triangle down),  
<code><font color="blue">'&lt;'</font></code> (triangle left).
The no symbol case <code><font color="blue">'.'</font></code> is useful when a line is 
being plotted and we do not also want a symbol at every plot point. 

<br>
<br>
<b><a name="4.2.6.e.d" id="4.2.6.e.d">4.2.6.e.d: alpha</a></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>alpha</span></font></i></code>
 determines is how dark is the line or symbols is

<code><font color="blue"><span style='white-space: nowrap'>0&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>alpha</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;1</span></font></code>
.

<br>
<br>
<b><big><a name="4.2.6.f" id="4.2.6.f">4.2.6.f: --axis</a></big></b>
<br>
This command line argument is optional, 
and can appear at most once.
If it is not present, the axes are auto scaled.
If it is present,  the following argument must follow directly after it:

<code><i><font color="black"><span style='white-space: nowrap'>x_label</span></font></i></code>
 is label used for x axis,

<code><i><font color="black"><span style='white-space: nowrap'>x_min</span></font></i></code>
 is minimum value on the x axis, and

<code><i><font color="black"><span style='white-space: nowrap'>x_max</span></font></i></code>
 is maximum value on the x axis.
Any 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 values less than (greater than)

<code><i><font color="black"><span style='white-space: nowrap'>x_min</span></font></i></code>
 (
<code><i><font color="black"><span style='white-space: nowrap'>x_max</span></font></i></code>
) are set to 
<code><i><font color="black"><span style='white-space: nowrap'>x_min</span></font></i></code>
 (
<code><i><font color="black"><span style='white-space: nowrap'>x_max</span></font></i></code>
)
in the plot.  
The values 
<code><i><font color="black"><span style='white-space: nowrap'>y_label</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>y_min</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>y_max</span></font></i></code>
 have a 
similar effect on the y axis.

<br>
<br>
<b><big><a name="4.2.6.g" id="4.2.6.g">4.2.6.g: --string</a></big></b>
<br>
This command line argument is optional
and can appear any number of times.
If it is present, arguments 
<code><i><font color="black"><span style='white-space: nowrap'>s_col</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>s_value</span></font></i></code>
 
must follow directly after <code><font color="blue">--string</font></code>.
This is used to select the subset of the rows in the data file 
where the specified column has the specified value (as a string).
If <code><font color="blue">--string</font></code> occurs more than once,
all of the specified columns must have the specified value for the
correspond data to be plotted.

<br>
<br>
<b><a name="4.2.6.g.a" id="4.2.6.g.a">4.2.6.g.a: s_col</a></b>
<br>
is the name of the column that is used to select the subset of rows
that are plotted.

<br>
<br>
<b><a name="4.2.6.g.b" id="4.2.6.g.b">4.2.6.g.b: s_value</a></b>
<br>
only rows that match this value in the specified column will be plotted.

<br>
<br>
<b><big><a name="4.2.6.h" id="4.2.6.h">4.2.6.h: --numeric</a></big></b>
<br>
This command line argument is optional
and can appear any number of times.
If it is present, arguments 
<code><i><font color="black"><span style='white-space: nowrap'>e_col</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>expr</span></font></i></code>
 
must follow directly after <code><font color="blue">--numeric</font></code>.
This is used to select the subset of the rows in the data file 
where the specified column has a numeric value that results in
<code><font color="blue">True</font></code> for the expression 
<code><i><font color="black"><span style='white-space: nowrap'>expr</span></font></i></code>
.

<br>
<br>
<b><a name="4.2.6.h.a" id="4.2.6.h.a">4.2.6.h.a: e_col</a></b>
<br>
is the name of the column that is used to select the subset of rows
that are plotted.

<br>
<br>
<b><a name="4.2.6.h.b" id="4.2.6.h.b">4.2.6.h.b: expr</a></b>
<br>
only rows that match this value in the specified column will be plotted.
The result of 
<code><i><font color="black"><span style='white-space: nowrap'>expr</span></font></i></code>
 must be <code><font color="blue">True</font></code> 
(included) or <code><font color="blue">False</font></code> (not included).
The name used for the selecting column 
<code><i><font color="black"><span style='white-space: nowrap'>e_col</span></font></i></code>
, is defined as
a variable and equal to the value in that column as a float.
The name <code><font color="blue">inf</font></code> is equal to the value plus infinity.
Expressions are otherwise limited to the conditional expression syntax,
the operators <code><font color="blue">+</font></code>, <code><font color="blue">-</font></code>, <code><font color="blue">*</font></code>, <code><font color="blue">/</font></code>, <code><font color="blue">**</font></code>,
the <code><font color="blue">max</font></code> function, and numeric constants.
For example, to exclude rows where the value in the <code><font color="blue">age</font></code> column
is zero, one would use
<code><font color='blue'><pre style='display:inline'> 
	--numeric age 'age &gt; 0'
</pre></font></code>

Note that the quotes around <code><font color="blue">'age &gt; 0'</font></code> group the expression
as one command line argument.

<br>
<br>
<b><big><a name="4.2.6.i" id="4.2.6.i">4.2.6.i: --connect</a></big></b>
<br>
This command line argument is optional,
and can appear only once.
If it is present, 

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c_col</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c_limit_1</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c_limit_2</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c_limit_N</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
</span></font></code>
must follow directly after <code><font color="blue">--connect</font></code>.
This is used to select subsets of rows in the data file 
that will be connected by using the same symbol for plotting
(and possibly also a connecting line).

<br>
<br>
<b><a name="4.2.6.i.a" id="4.2.6.i.a">4.2.6.i.a: c_col</a></b>
<br>
is the name of the column that contains the values which determine
which points are to be connected. 
Rows with 
<code><i><font color="black"><span style='white-space: nowrap'>c_col</span></font></i></code>
 values within the specified limits are connected.

<br>
<br>
<b><a name="4.2.6.i.b" id="4.2.6.i.b">4.2.6.i.b: c_limit_j</a></b>
<br>
If any of the 
<code><i><font color="black"><span style='white-space: nowrap'>c_limit_j</span></font></i></code>
 contains a comma, 
then the column corresponding to 
<code><i><font color="black"><span style='white-space: nowrap'>c_col</span></font></i></code>
 must contain values
that can be converted to <code><font color="blue">float</font></code>.
Otherwise, all the 
<code><i><font color="black"><span style='white-space: nowrap'>c_limit_j</span></font></i></code>
 values can be arbitrary strings.
For 
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;1&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>,&nbsp;...&nbsp;,&nbsp;N</span></font></i></code>
,
if 
<code><i><font color="black"><span style='white-space: nowrap'>c_limit_j</span></font></i></code>
 contains a comma, 
a lower limit comes before the comma and the upper limit comes after
and values are connected if

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>lower</span></font></i><font color="blue"><span style='white-space: nowrap'>_j&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>value</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>upper</span></font></i><font color="blue"><span style='white-space: nowrap'>_j<br>
</span></font></code>
If 
<code><i><font color="black"><span style='white-space: nowrap'>c_limit_j</span></font></i></code>
 does not contain a comma, then lower and
upper limits are equal to the single value 
<code><i><font color="black"><span style='white-space: nowrap'>c_limit_j</span></font></i></code>
.
and values are connected if

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c_</span></font><i><font color="black"><span style='white-space: nowrap'>limit</span></font></i><font color="blue"><span style='white-space: nowrap'>_j&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>value</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The connection is represented by plotting the same symbol, 
and possible a line, between the connected points.
The connection corresponding to 
<code><i><font color="black"><span style='white-space: nowrap'>c_limit_j</span></font></i></code>
 uses the <i>j</i>-th
<a href="#4.2.6.e.c">4.2.6.e.c: <span style='white-space: nowrap'>symbol</span></a>
 
for the corresponding pair.
When there are more connections than symbols, the symbols are
recycled starting with the first one (again).
<code><span style='white-space: nowrap'><br>
<br>
</span></code>It is assumed that non of the 
<code><i><font color="black"><span style='white-space: nowrap'>c_limit_j</span></font></i></code>
 arguments
start with the two characters <code><font color="blue">--</font></code>.
There must be at least one connection; i.e., 
<code><i><font color="black"><span style='white-space: nowrap'>N</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;=&nbsp;1</span></font></code>
.

<br>
<br>
<b><big><a name="4.2.6.j" id="4.2.6.j">4.2.6.j: --logx</a></big></b>
<br>
This command line argument is optional,
and can appear only once.
If it is present, the 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 axis is log scaled..

<br>
<br>
<b><big><a name="4.2.6.k" id="4.2.6.k">4.2.6.k: --logy</a></big></b>
<br>
This command line argument is optional,
and can appear only once.
If it is present, the 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 axis is log scaled..


<hr>Input File: python/d4_plot.py.in

<hr>
 



<center><b><big><big><a name="4.2.7" id="4.2.7">4.2.7: Create Derived Stochastic Function Output Files</a>
</big></big></b></center>
<br>
<b><big><a name="4.2.7.a" id="4.2.7.a">4.2.7.a: Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>d4_sfun_der.py&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_out_csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_der_csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dvar_1</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>expr_1</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>&nbsp;...&nbsp;</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dvar_N</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>expr_N</span></font></i></code>


<br>
<br>
<b><big><a name="4.2.7.b" id="4.2.7.b">4.2.7.b: Purpose</a></big></b>
<br>
This program converts a dismod_pde stochastic function output file; e.g.,
<a href="#4.1.i">4.1.i: <span style='white-space: nowrap'>sfun_out.csv</span></a>
,
to from cycling though quantities to one quantity per column.

<br>
<br>
<b><big><a name="4.2.7.c" id="4.2.7.c">4.2.7.c: sfun_out_csv</a></big></b>
<br>
is the name the input file; e.g.,
<a href="#4.1.i">4.1.i: <span style='white-space: nowrap'>sfun_out.csv</span></a>
 or
<a href="#4.2.8.d">4.2.8.d: <span style='white-space: nowrap'>sfun_grid.csv</span></a>
.
In general it can be any file that has the same column names and 
same grouping of the rows; i.e., for a given value of 
<code><font color="blue">age</font></code>, <code><font color="blue">cohort</font></code> and <code><font color="blue">time</font></code>, the corresponding rows are
grouped together and
the <code><font color="blue">function</font></code> column cycles through the values
<code><font color="blue">S</font></code>,
<code><font color="blue">C</font></code>,
<code><font color="blue">iota</font></code>,
<code><font color="blue">rho</font></code>,
<code><font color="blue">chi</font></code>, and
<code><font color="blue">omega</font></code>.

<br>
<br>
<b><big><a name="4.2.7.d" id="4.2.7.d">4.2.7.d: sfun_der_csv</a></big></b>
<br>
is the name of the file written by <code><font color="blue">d4_sfun_der.py</font></code>.
The first line has the column names, 

<code><i><font color="black"><span style='white-space: nowrap'>dvar_1</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>dvar_2</span></font></i></code>
 ...
The other lines contain the corresponding values for
with one line for each value of age and cohort in 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_out.csv</span></font></i></code>
.
Each line corresponds to all the functions and one value for

<code><i><font color="black"><span style='white-space: nowrap'>age</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i></code>
 and <code><font color="blue">time</font></code>.

<br>
<br>
<b><big><a name="4.2.7.e" id="4.2.7.e">4.2.7.e: dvar_j</a></big></b>
<br>
For <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;1&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;N</span></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>dvar_j</span></font></i></code>
 is the 
name for the <i>j</i>-th derived variable; i.e., the <i>j</i>-th column
in 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_der.csv</span></font></i></code>
.

<br>
<br>
<b><big><a name="4.2.7.f" id="4.2.7.f">4.2.7.f: expr_j</a></big></b>
<br>
For <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;1&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;N</span></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>expr_j</span></font></i></code>
 is the 
expression for the <i>j</i>-th derived variable in terms of 
the variables in 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_out.csv</span></font></i></code>
 and other derived variables
that are defined before it (smaller value of 
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i></code>
).
The following variables are defined by 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_out.csv</span></font></i></code>
:
<ol type="1"><li>
The variables 
<code><i><font color="black"><span style='white-space: nowrap'>age</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>time</span></font></i></code>
 are
the corresponding constant values for the six lines in a group of

<code><i><font color="black"><span style='white-space: nowrap'>sfun_out.csv</span></font></i></code>
 input.
</li><li>

For each value of 
<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i></code>
 in the set 

<code><i><font color="black"><span style='white-space: nowrap'>{</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;S&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>,</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;C&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>,</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;iota&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>,</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;rho&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>,</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;chi&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>,</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;omega&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>}</span></font></i></code>
,
variables that begin with 
<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>_</span></font></code>
 have values coming from
a line in 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_out.csv</span></font></i></code>
 that has 
<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i></code>
 in its
<code><font color="blue">function</font></code> column.
</li><li>

The possible variable names are 

<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>_estimate</span></font></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>_prior_residual</span></font></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>_prior_scaled</span></font></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>_age_residual</span></font></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>_age_scaled</span></font></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>_cohort_residual</span></font></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>_cohort_scaled</span></font></code>
.
</li><li>

For each possible 
<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 list above,
the value for 
<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>_</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 comes from the column 

<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 in the 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_out.csv</span></font></i></code>
.
</li></ol>


<hr>Input File: python/d4_sfun_der.py.in

<hr>
  

<code>
<span style='white-space: nowrap'>&nbsp;\newcommand{\B}[1]{{\bf&nbsp;#1}}</span></code>

<code>
<span style='white-space: nowrap'>&nbsp;\newcommand{\W}[1]{{\;&nbsp;#1&nbsp;\;}}</span></code>


<center><b><big><big><a name="4.2.8" id="4.2.8">4.2.8: Convert From Age-Cohort Grid to Age-Time Rectangular Grid</a>
</big></big></b></center>
<br>
<b><big><a name="4.2.8.a" id="4.2.8.a">4.2.8.a: Syntax</a></big></b>


<br>

<code><font color="blue"><span style='white-space: nowrap'>d4_sfun_grid.py&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_out.csv</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>d4_sfun_grid.py&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_out.csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_grid.csv</span></font></i></code>


<code><i><font color="black"><span style='white-space: nowrap'>time_start</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_end</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_time</span></font></i></code>


<br>
<br>
<b><big><a name="4.2.8.b" id="4.2.8.b">4.2.8.b: Purpose</a></big></b>
<br>
This program creates a csv file that has the same information as the
<a href="#4.1.i">4.1.i: <span style='white-space: nowrap'>sfun_out.csv</span></a>
 file, but on a rectangular
grid in age and time.

<br>
<br>
<b><big><a name="4.2.8.c" id="4.2.8.c">4.2.8.c: sfun_out.csv</a></big></b>
<br>
is the name of <a href="#4.1.i">4.1.i: <span style='white-space: nowrap'>sfun_out.csv</span></a>
 file output
by dismod_pde.

<br>
<br>
<b><a name="4.2.8.c.a" id="4.2.8.c.a">4.2.8.c.a: age vector</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;A_i</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;C_i</span></code>
 to denote the age an cohort
in the <i>i</i>-th record of 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_out.csv</span></font></i></code>
. 
We use <code>
<span style='white-space: nowrap'>&nbsp;a&nbsp;\in&nbsp;\B{R}^J</span></code>
 to denote a sorted vector containing 
the set of values <code>
<span style='white-space: nowrap'>&nbsp;\{&nbsp;A_i&nbsp;\}</span></code>
.

<br>
<br>
<b><a name="4.2.8.c.b" id="4.2.8.c.b">4.2.8.c.b: time bounds</a></b>
<br>
We define the lower and upper time bounds by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tl&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;\max_{j&nbsp;&gt;&nbsp;0}&nbsp;\min_i&nbsp;\{&nbsp;A_i&nbsp;+&nbsp;C_i&nbsp;\W{:}&nbsp;A_i&nbsp;=&nbsp;a_j&nbsp;\}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tu&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;\min_{j&nbsp;&gt;&nbsp;0}&nbsp;\max_i&nbsp;\{&nbsp;A_i&nbsp;+&nbsp;C_i&nbsp;\W{:}&nbsp;A_i&nbsp;=&nbsp;a_j&nbsp;\}<br>
\end{array}<br>
\]&nbsp;</span></code>

If 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_out.csv</span></font></i></code>
, is the only command line argument,
these bounds are printed to standard output in the following format

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time_lower_bound&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>tl</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time_upper_bound&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>tu</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="4.2.8.d" id="4.2.8.d">4.2.8.d: sfun_grid.csv</a></big></b>
<br>
is the name of the <a href="#4">4: <span style='white-space: nowrap'>csv</span></a>
 file written by <code><font color="blue">d4_sfun_grid.py</font></code>.
The first line has the column names, which are the same as for

<code><i><font color="black"><span style='white-space: nowrap'>sfun_out.csv</span></font></i></code>
.
Let <code>
<span style='white-space: nowrap'>&nbsp;a&nbsp;\in&nbsp;\B{R}^J</span></code>
 be the age vector (see above),
<code>
<span style='white-space: nowrap'>&nbsp;t&nbsp;\in&nbsp;\B{R}^K</span></code>
 be the time vector (see below),
and <code>
<span style='white-space: nowrap'>&nbsp;s</span></code>
 be the vector of function names; i.e.
<code>
<span style='white-space: nowrap'>&nbsp;s&nbsp;=&nbsp;(&nbsp;S&nbsp;,&nbsp;C&nbsp;,&nbsp;\iota&nbsp;,&nbsp;\rho&nbsp;,&nbsp;\chi&nbsp;,&nbsp;\omega&nbsp;)</span></code>
.
The output times values lines are in the following order:
For <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;J-1</span></code>
,
for <code>
<span style='white-space: nowrap'>&nbsp;k&nbsp;=&nbsp;0,&nbsp;\ldots&nbsp;,&nbsp;K-1</span></code>
,
and for <code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;0,&nbsp;\ldots&nbsp;,&nbsp;N-1</span></code>

the output line 
<code><font color="blue"><span style='white-space: nowrap'>2&nbsp;+&nbsp;&nbsp;(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>K</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;)&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>N</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i></code>

corresponds to age value <code>
<span style='white-space: nowrap'>&nbsp;a_j</span></code>

time value <code>
<span style='white-space: nowrap'>&nbsp;t_k</span></code>
,
and function <code>
<span style='white-space: nowrap'>&nbsp;s^q</span></code>
.

<br>
<br>
<b><big><a name="4.2.8.e" id="4.2.8.e">4.2.8.e: time_start</a></big></b>
<br>
this command line argument is a floating point value
that will be the first time grid point in the output file; i.e.,
the value of <code>
<span style='white-space: nowrap'>&nbsp;t_0</span></code>
 above.
It must hold that

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_lower_bound</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_start</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="4.2.8.f" id="4.2.8.f">4.2.8.f: time_end</a></big></b>
<br>
this command line argument is a floating point value
that will be the last time grid point in the output file; i.e.,
the value of <code>
<span style='white-space: nowrap'>&nbsp;t_{K-1}</span></code>
 above.
It must hold that

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_start</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_end</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_upper_bound</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="4.2.8.g" id="4.2.8.g">4.2.8.g: n_time</a></big></b>
<br>
this command line argument is a positive integer,
greater than or equal to two,
that specifies the number points <code>
<span style='white-space: nowrap'>&nbsp;K</span></code>
 in the time grid.
Note that for <code>
<span style='white-space: nowrap'>&nbsp;k&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;K-1</span></code>
, 
<code><span style='white-space: nowrap'><br>
</span></code><code>
<span style='white-space: nowrap'>&nbsp;t_k&nbsp;=&nbsp;</span></code>


<code><i><font color="black"><span style='white-space: nowrap'>time_start</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;(</span></font><i><font color="black"><span style='white-space: nowrap'>time_end</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_start</span></font></i><font color="blue"><span style='white-space: nowrap'>)&nbsp;/&nbsp;(</span></font><i><font color="black"><span style='white-space: nowrap'>n_time</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;1)</span></font></code>



<br>
<br>
<b><big><a name="4.2.8.h" id="4.2.8.h">4.2.8.h: Example</a></big></b>

<br>
The shell script <a href="#4.2.8.1">4.2.8.1: <span style='white-space: nowrap'>sfun_grid.sh</span></a>
 is an example and test
of <code><font color="blue">d4_sfun_grid.py</font></code>.


<hr>Input File: python/d4_sfun_grid.py.in

<hr>
  
 
<center><b><big><big><a name="4.2.8.1" id="4.2.8.1">4.2.8.1: d4_sfun_grid.py: Example and Test</a>
</big></big></b></center>
<br>
<b><big><a name="4.2.8.1.a" id="4.2.8.1.a">4.2.8.1.a: Purpose</a></big></b>
<br>
This bash shell script is a simple example and test of
<code><font color="blue">d4_sfun_grid.py</font></code>.
It exits with status zero if the test passes
and with status one if the test fails.

<br>
<br>
<b><big><a name="4.2.8.1.b" id="4.2.8.1.b">4.2.8.1.b: Abort on Any Error</a></big></b>

<code><font color='blue'><pre style='display:inline'> 
set -e
</pre></font></code>


<br>
<br>
<b><big><a name="4.2.8.1.c" id="4.2.8.1.c">4.2.8.1.c: Python Script that Creates An sfun_out.csv</a></big></b>

<code><font color='blue'><pre style='display:inline'> 
cat &lt;&lt; EOF &gt; create_sfun_out.py
import csv
import sys
writer = csv.writer( open('sfun_out.csv', 'w') )

list of possible values for function
sfun_name = [ 'S', 'C', 'iota', 'rho', 'chi', 'omega' ] 
list of column names in sfun_out.csv
column_name = [ 'age', 'cohort', 'time', 'function', 'estimate' ]
for major in [ 'prior' , 'age', 'cohort', 'cross' ] :
	for minor in [ 'residual' , 'scaled' ] :
		column_name.append( major + '_' + minor )
n_col  = len(column_name)

age        = [ 20, 40, 60 ]
cohort     = [ 1900, 1920, 1940, 1980, 2000 ]
time_start = age[-1] + cohort[0]   # 1960
time_end   = age[0]  + cohort[-1]  # 2020
n_age    = len(age)
n_cohort = len(cohort)
n_sfun   = len(sfun_name)
step   = 1

writer.writerow(column_name)
for j in range( n_age ) :
	a     = age[j]
	start = n_cohort - 1
	while a + cohort[start] &gt; time_start :
		start = start - 1
	stop   = 1
	while a + cohort[stop-1] &lt; time_end :
		stop = stop + 1
	for k in range(start, stop, step ) :
		c = cohort[k]
		t = a + c
		for q in range(n_sfun) :
			row = [ a, c, t, sfun_name[q] ]
			for m in range(4, n_col, step) :
				row.append( t + 2. * a + 3. * m  + 4. * q  )
			writer.writerow(row)


sys.exit(None)
EOF
$top_builddir/python.sh \
	create_sfun_out.py
</pre></font></code>


<br>
<br>
<b><big><a name="4.2.8.1.d" id="4.2.8.1.d">4.2.8.1.d: Check Time Bounds</a></big></b>

<code><font color='blue'><pre style='display:inline'> 
$top_builddir/python.sh \
	$top_builddir/python/d4_sfun_grid.py sfun_out.csv &gt; sfun_grid.bnd
if ! grep 'time_lower_bound *= *1960\.0' sfun_grid.bnd &gt; /dev/null
then
	echo &quot;sfun_grid.sh: time_lower_bound does not check&quot;
	exit 1
fi
if ! grep 'time_upper_bound *= *2020\.0' sfun_grid.bnd &gt; /dev/null
then
	echo &quot;sfun_grid.sh: time_upper_bound does not check&quot;
	exit 1
fi
</pre></font></code>


<br>
<br>
<b><big><a name="4.2.8.1.e" id="4.2.8.1.e">4.2.8.1.e: Create sfun_grid.csv</a></big></b>

<code><font color='blue'><pre style='display:inline'> 
time_start='1960'
time_end='2020'
n_time='3'
$top_builddir/python/d4_sfun_grid.py sfun_out.csv sfun_grid.csv \
	$time_start $time_end $n_time
</pre></font></code>


<br>
<br>
<b><big><a name="4.2.8.1.f" id="4.2.8.1.f">4.2.8.1.f: Check sfun_grid.csv</a></big></b>

<code><font color='blue'><pre style='display:inline'> 
cat &lt;&lt; EOF &gt; check_d4_sfun_grid.py
import csv
import sys
reader = csv.DictReader( open('sfun_grid.csv', 'r') )

list of possible values for function
sfun_index = { 'S' : 0, 'C' : 1, 'iota' : 2, 'rho' : 3, 'chi' : 4, 'omega' : 5 }
list of column names in sfun_out.csv
column_name = [ 'age', 'cohort', 'time', 'function', 'estimate' ]
for major in [ 'prior' , 'age', 'cohort', 'cross' ] :
	for minor in [ 'residual' , 'scaled' ] :
		column_name.append( major + '_' + minor )
n_col  = len(column_name)

for row in reader :
	q  = sfun_index[ row['function'] ]
	a  = float( row['age'] )
	t  = float( row['time'] ) 
	for m in range(4, n_col, 1) :
		name  = column_name[m]
		value = float( row[name] )
		check = t + 2. * a + 3. * m + 4. * q
		assert abs( 1. - value/check) &lt; 1e-10
sys.exit(None)
EOF
$top_builddir/python.sh \
	check_d4_sfun_grid.py
</pre></font></code>


<br>
<br>
<b><big><a name="4.2.8.1.g" id="4.2.8.1.g">4.2.8.1.g: Final Message</a></big></b>
<br>
If this shell script reaches here, then test has passed.
<code><font color='blue'><pre style='display:inline'> 
echo &quot;sfun_grid.sh: OK&quot;
</pre></font></code>



<hr>Input File: example/sfun_grid.sh

<hr>
 
 


<center><b><big><big><a name="4.2.9" id="4.2.9">4.2.9: Simulated dismod_pde Data and Solution Files</a>
</big></big></b></center>
<br>
<b><big><a name="4.2.9.a" id="4.2.9.a">4.2.9.a: Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>d4_simulate.py&nbsp;\<br>
-files&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_in.csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>solution.csv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
-age&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age_init</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age_step</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age_min</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age_max</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age_bound</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
-time&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_add</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_step</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_min</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_max</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_bound</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
-iota&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>iota_expr</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;\<br>
-rho&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>rho_expr</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;\<br>
-chi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>chi_expr</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;\<br>
-omega&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>omega_expr</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;\<br>
-measure&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>integrand</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>number</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>like</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sim_zeta</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fit_zeta</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sim_cv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fit_cv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
</span></font></code>
<br>
<b><big><a name="4.2.9.b" id="4.2.9.b">4.2.9.b: Purpose</a></big></b>
<br>
This is a preliminary simulation program that
generates data to be analyzed by <a href="#4.1">4.1: <span style='white-space: nowrap'>dismod_pde_csv</span></a>
 and <a href="#5.1">5.1: <span style='white-space: nowrap'>optimize</span></a>
. 

<br>
<br>
<b><big><a name="4.2.9.c" id="4.2.9.c">4.2.9.c: Convention</a></big></b>
<br>
The order of the command line flags (arguments that begin with a minus sign)
does not matter, but the order of the values following each of the flags 
does matter. 
In addition, with the exception of the
<a href="#4.2.9.o">4.2.9.o: <span style='white-space: nowrap'>measure</span></a>
 group,
each of the command line arguments must be present once and only once.

<br>
<br>
<b><big><a name="4.2.9.d" id="4.2.9.d">4.2.9.d: measure_in.csv</a></big></b>
<br>
This command line argument specifies the name of the measurement
output file generated by <code><font color="blue">d4_simulate.py</font></code>.
This file has the same format and meaning as
<a href="#4.1.f">4.1.f: <span style='white-space: nowrap'>measure_in.csv</span></a>
 in <code><font color="blue">dismod_pde_csv</font></code>.

<br>
<br>
<b><big><a name="4.2.9.e" id="4.2.9.e">4.2.9.e: solution.csv</a></big></b>
<br>
This command line argument specifies the name of the solution
output file generated by <code><font color="blue">d4_simulate.py</font></code>
The solution file give the actual values of the 
<a href="#5.1.b">5.1.b: <span style='white-space: nowrap'>stochastic&nbsp;functions</span></a>

that were used to simulate the data. 
The fields in the solution file are
<table><tr><td align='left'  valign='top'>

<b>Field</b>  </td><td align='left'  valign='top'>
 <b>Description</b>   
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">age</font></code>    </td><td align='left'  valign='top'>
 age for the corresponding line of data
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">cohort</font></code> </td><td align='left'  valign='top'>
 cohort for the corresponding line of data
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">time</font></code>   </td><td align='left'  valign='top'>
 time for the corresponding line of data (age + cohort)
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">S</font></code>      </td><td align='left'  valign='top'>
 <code>
<span style='white-space: nowrap'>&nbsp;S(&nbsp;\cdot&nbsp;)</span></code>
 for this (age, cohort)
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">C</font></code>      </td><td align='left'  valign='top'>
 <code>
<span style='white-space: nowrap'>&nbsp;C(&nbsp;\cdot&nbsp;)</span></code>
 for this (age, cohort)
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">iota</font></code>   </td><td align='left'  valign='top'>
 <code>
<span style='white-space: nowrap'>&nbsp;\iota(&nbsp;\cdot&nbsp;)</span></code>
 for this (age, cohort)
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">rho</font></code>    </td><td align='left'  valign='top'>
 <code>
<span style='white-space: nowrap'>&nbsp;\rho&nbsp;(&nbsp;\cdot&nbsp;)</span></code>
 for this (age, cohort)
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">chi</font></code>    </td><td align='left'  valign='top'>
 <code>
<span style='white-space: nowrap'>&nbsp;\chi&nbsp;(&nbsp;\cdot&nbsp;)</span></code>
 for this (age, cohort)
</td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">omega</font></code>  </td><td align='left'  valign='top'>
 <code>
<span style='white-space: nowrap'>&nbsp;\omega&nbsp;(&nbsp;\cdot&nbsp;)</span></code>
 for this (age, cohort)
</td></tr>
</table>
The solution is written on a rectangular grid in age, and cohort
that surrounds all of the measurement age and time intervals.
The lines are written with age varying first, then cohort.
An extra buffer of plus and minus 
<code><i><font color="black"><span style='white-space: nowrap'>time_add</span></font></i></code>
 are included
before the minimum time and after the maximum time.

<br>
<br>
<b><big><a name="4.2.9.f" id="4.2.9.f">4.2.9.f: age_init</a></big></b>
<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>age_init</span></font></i></code>

specifies the initial age before which the susceptible population fraction 
is one and the with condition fraction is zero; i.e.,
their derivatives are zero for ages before 
<code><i><font color="black"><span style='white-space: nowrap'>age_init</span></font></i></code>
.

<br>
<br>
<b><big><a name="4.2.9.g" id="4.2.9.g">4.2.9.g: age_step</a></big></b>
<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>age_step</span></font></i></code>
 
specifies the difference between age values is the solution file.
It must be a positive integer.

<br>
<br>
<b><big><a name="4.2.9.h" id="4.2.9.h">4.2.9.h: age_min, age_max</a></big></b>
<br>
The command line arguments

<code><i><font color="black"><span style='white-space: nowrap'>age_min</span></font></i></code>
, and

<code><i><font color="black"><span style='white-space: nowrap'>age_max</span></font></i></code>
,
specify the minimum lower age limit and maximum upper age limit 
for a simulated measurement age range.
These must be positive integers.
We sometimes use <code>
<span style='white-space: nowrap'>&nbsp;a_n</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;a_x</span></code>
 below to denote these 
minimum and maximum age limits.

<br>
<br>
<b><big><a name="4.2.9.i" id="4.2.9.i">4.2.9.i: age_bound</a></big></b>
<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>age_bound</span></font></i></code>
 is the maximum
difference 
<code><i><font color="black"><span style='white-space: nowrap'>age_upper</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age_lower</span></font></i></code>
 for a single measurement.

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age_bound</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age_max</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age_min</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It must be a non-negative integer.

<br>
<br>
<b><big><a name="4.2.9.j" id="4.2.9.j">4.2.9.j: time_add</a></big></b>
<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>time_add</span></font></i></code>
 
specifies the amount of time subtracted from the minimum time,
and added to the maximum time, before computing the necessary output
cohort limits.
It must be a positive integer.

<br>
<br>
<b><big><a name="4.2.9.k" id="4.2.9.k">4.2.9.k: time_step</a></big></b>
<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>time_step</span></font></i></code>
 
specifies the difference between time (and cohort)
values int the solution file.
It must be a positive integer.

<br>
<br>
<b><big><a name="4.2.9.l" id="4.2.9.l">4.2.9.l: time_min, time_max</a></big></b>
<br>
The command line arguments

<code><i><font color="black"><span style='white-space: nowrap'>time_min</span></font></i></code>
, and

<code><i><font color="black"><span style='white-space: nowrap'>time_max</span></font></i></code>
,
specify the minimum lower time limit and maximum upper time limit 
for a simulated measurement time range.
These must be positive integers.

<br>
<br>
<b><big><a name="4.2.9.m" id="4.2.9.m">4.2.9.m: time_bound</a></big></b>
<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>time_bound</span></font></i></code>
 is the maximum
difference 
<code><i><font color="black"><span style='white-space: nowrap'>time_upper</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_lower</span></font></i></code>
 for a single measurement.

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_bound</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_max</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_min</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It must be a non-negative integer.

<br>
<br>
<b><big><a name="4.2.9.n" id="4.2.9.n">4.2.9.n: expressions</a></big></b>
<br>
The simulated value for the corresponding stochastic function as expressions
where a is age and c is cohort; for example,
<code><font color='blue'><pre style='display:inline'> 
	'1e-4 * max(0. ,  (20.10 - c/100.) )'
</pre></font></code>
 
would have value zero for cohort 2010 and value 1e-4 for cohort 
1910.
These expressions are limited to the variables <code><font color="blue">a</font></code> (age),
<code><font color="blue">c</font></code> (cohort), <code><font color="blue">t</font></code> (time), 
the operators <code><font color="blue">+</font></code>, <code><font color="blue">-</font></code>, <code><font color="blue">*</font></code>, <code><font color="blue">/</font></code>, <code><font color="blue">**</font></code>,
the functions <code><font color="blue">min</font></code>, <code><font color="blue">max</font></code>, <code><font color="blue">exp</font></code>, and numeric constants.

<br>
<br>
<b><a name="4.2.9.n.a" id="4.2.9.n.a">4.2.9.n.a: iota_expr</a></b>
<br>
This expression defines the value for incidence in the simulation.

<br>
<br>
<b><a name="4.2.9.n.b" id="4.2.9.n.b">4.2.9.n.b: rho_expr</a></b>
<br>
This expression defines the value for remission in the simulation.

<br>
<br>
<b><a name="4.2.9.n.c" id="4.2.9.n.c">4.2.9.n.c: chi_expr</a></b>
<br>
This expression defines the value for excess mortality
(mortality caused by the condition)  in the simulation.

<br>
<br>
<b><a name="4.2.9.n.d" id="4.2.9.n.d">4.2.9.n.d: omega_expr</a></b>
<br>
This expression defines the value for other cause mortality
(mortality not caused by the condition)  in the simulation.

<br>
<br>
<b><big><a name="4.2.9.o" id="4.2.9.o">4.2.9.o: measure</a></big></b>
<br>
The <code><font color="blue">-measure</font></code> may appear any number of times with a different
<a href="#4.2.9.o.b">4.2.9.o.b: <span style='white-space: nowrap'>integrand</span></a>
 
each time (and must appear at least once).

<br>
<br>
<b><a name="4.2.9.o.a" id="4.2.9.o.a">4.2.9.o.a: Offset Log Transform</a></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>zeta</span></font></i></code>
 is an offset value,

<code><i><font color="black"><span style='white-space: nowrap'>model</span></font></i></code>
 is the model for the data without noise,
and 
<code><i><font color="black"><span style='white-space: nowrap'>noise</span></font></i></code>
 is a measurement noise value,
the data is given by the relation

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>zeta</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>data</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;)&nbsp;=&nbsp;log(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>zeta</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>model</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;)&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>noise</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The corresponding approximate coefficient of variation is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sigma</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;/&nbsp;(</span></font><i><font color="black"><span style='white-space: nowrap'>zeta</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>model</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>sigma</span></font></i></code>
 is the standard deviation of the 
<code><i><font color="black"><span style='white-space: nowrap'>noise</span></font></i></code>
.

<br>
<br>
<b><a name="4.2.9.o.b" id="4.2.9.o.b">4.2.9.o.b: integrand</a></b>
<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>integrand</span></font></i></code>
 is one of the
integrands listed below:
<table><tr><td align='left'  valign='top'>

<b>Definition</b> 
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <b>integrand</b>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <b>Description</b>
</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^\iota&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;\iota(&nbsp;\cdot&nbsp;)</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">incidence</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> incidence rate

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^\rho&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;\rho(&nbsp;\cdot&nbsp;)</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">remission</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> remission rate

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^\chi&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;\chi(&nbsp;\cdot&nbsp;)</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">m_excess</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> excess mortality rate

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^\omega&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;\omega(&nbsp;\cdot&nbsp;)&nbsp;</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">m_other</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> other cause mortality rate

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^w&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;\omega(&nbsp;\cdot&nbsp;)&nbsp;+&nbsp;\chi&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">m_with</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> with condition mortality rate

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^p&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;C(&nbsp;\cdot&nbsp;)&nbsp;/&nbsp;[&nbsp;S(&nbsp;\cdot&nbsp;)&nbsp;+&nbsp;C(&nbsp;\cdot&nbsp;)&nbsp;]</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">prevalence</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> prevalence

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^e&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;\chi(&nbsp;\cdot&nbsp;)&nbsp;I^p&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">m_prevalence</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> excess mortality rate times prevalence
	
</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^s&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;I^e&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;&nbsp;</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">m_specific</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> cause specific mortality rate

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^a&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\omega&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;+&nbsp;&nbsp;I^e&nbsp;(&nbsp;\cdot&nbsp;)</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">m_all</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> all cause mortality rate

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^\sigma&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;I^w&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;/&nbsp;I^a&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;&nbsp;</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">m_standard</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> standardized mortality ratio

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^r&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;I^w&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;/&nbsp;\omega&nbsp;(&nbsp;\cdot&nbsp;)</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">relative_risk</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> relative risk ratio
</td></tr>
</table>
For example, <code><font color="blue">&quot;incidence remission m_excess m_all&quot;</font></code>
would specify that the corresponding measurements are to be included
in 
<code><i><font color="black"><span style='white-space: nowrap'>measure_in.csv</span></font></i></code>
.

<br>
<br>
<b><a name="4.2.9.o.c" id="4.2.9.o.c">4.2.9.o.c: number</a></b>
<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>number</span></font></i></code>
 specifies the
number of measurements to simulate and output in the file

<code><i><font color="black"><span style='white-space: nowrap'>measure_in.csv</span></font></i></code>
 (for this integrand).
If it is an integer, it is a direct specification of the number
of data points and the location and span for the points is chosen at random.
If 
<code><i><font color="black"><span style='white-space: nowrap'>number</span></font></i></code>
 contains a decimal point, 
the points are on a rectangular grid in age and time,
the minimum age (time) grid value is 
<code><i><font color="black"><span style='white-space: nowrap'>age_min</span></font></i></code>
 (
<code><i><font color="black"><span style='white-space: nowrap'>time_min</span></font></i></code>
),
the maximum age (time) grid value is 
<code><i><font color="black"><span style='white-space: nowrap'>age_max</span></font></i></code>
 (
<code><i><font color="black"><span style='white-space: nowrap'>time_max</span></font></i></code>
).
In this case, the integer part of 
<code><i><font color="black"><span style='white-space: nowrap'>number</span></font></i></code>
 specifies the number of
age points and the factional part specifies the number of time points; e.g,
the value <code><font color="blue">10.20</font></code> specifies 10 age grid values and 20 time grid values
for a total of 200 data points.

<br>
<br>
<b><a name="4.2.9.o.d" id="4.2.9.o.d">4.2.9.o.d: like</a></b>
<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>like</span></font></i></code>
 is the
likelihood of the noise added to the simulated measurements.
Currently <code><font color="blue">gaussian</font></code> is the only valid choice.

<br>
<br>
<b><a name="4.2.9.o.e" id="4.2.9.o.e">4.2.9.o.e: sim_zeta</a></b>
<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>sim_zeta</span></font></i></code>
 is the value of 
<code><i><font color="black"><span style='white-space: nowrap'>zeta</span></font></i></code>

in the
<a href="#4.2.9.o.a">4.2.9.o.a: <span style='white-space: nowrap'>offset&nbsp;log&nbsp;transform</span></a>

during simulation of the 
<code><i><font color="black"><span style='white-space: nowrap'>data</span></font></i></code>
 value.

<br>
<br>
<b><a name="4.2.9.o.f" id="4.2.9.o.f">4.2.9.o.f: fit_zeta</a></b>
<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>fit_zeta</span></font></i></code>
 is the value of 
<code><i><font color="black"><span style='white-space: nowrap'>zeta</span></font></i></code>

in the during fitting; i.e.,
the corresponding offset is placed in
<a href="#4.2.9.d">4.2.9.d: <span style='white-space: nowrap'>measure_in.csv</span></a>
.
Note that the difference 
<code><i><font color="black"><span style='white-space: nowrap'>fit_zeta</span></font></i><font color="blue"><span style='white-space: nowrap'>-</span></font><i><font color="black"><span style='white-space: nowrap'>sim_zeta</span></font></i></code>
 corresponds to a
bias in the simulated fit.

<br>
<br>
<b><a name="4.2.9.o.g" id="4.2.9.o.g">4.2.9.o.g: sim_cv</a></b>
<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>sim_cv</span></font></i></code>
 is the
approximation coefficient of variation 
for the noise added to the simulated measurements.

<br>
<br>
<b><a name="4.2.9.o.h" id="4.2.9.o.h">4.2.9.o.h: fit_cv</a></b>
<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>fit_cv</span></font></i></code>
 is the
approximate coefficient of variation 
for the measurement noise during fitting; i.e.
the corresponding standard deviation is placed in
<a href="#4.2.9.d">4.2.9.d: <span style='white-space: nowrap'>measure_in.csv</span></a>
.

<br>
<br>
<b><big><a name="4.2.9.p" id="4.2.9.p">4.2.9.p: Testing dismod_pde_csv</a></big></b>
<br>
The routine <a href="#4.2.3">4.2.3: <span style='white-space: nowrap'>d4_compare_sfun.py</span></a>

is meant be used to compare the results obtained by <a href="#4.1">4.1: <span style='white-space: nowrap'>dismod_pde_csv</span></a>

with the true solution used by <a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>
 to generate
the corresponding data.

<br>
<br>
<b><big><a name="4.2.9.q" id="4.2.9.q">4.2.9.q: Testing optimize</a></big></b>
<br>
The bash shell script <a href="#5.1.3.1">5.1.3.1: <span style='white-space: nowrap'>dismoditis.sh</span></a>
 uses
by <code><font color="blue">d4_simulate.py</font></code> to create CSV files that it then 
converts to C++ source code.
The C++ routine <a href="#5.1.3">5.1.3: <span style='white-space: nowrap'>dismoditis.cpp</span></a>
 is an example and test of
<a href="#5.1">5.1: <span style='white-space: nowrap'>optimize</span></a>
 that use these C++ measurement and solution files.


<hr>Input File: python/d4_simulate.py.in

<hr>



<center><b><big><big><a name="5" id="5">5: The C++ Interface to dismod_pde</a>
</big></big></b></center>
<br>
<b><big><a name="5.a" id="5.a">5.a: Contents</a></big></b>
<br>
<div><a href="#5.1" target="_top">5.1:&nbsp;Optimization&nbsp;of&nbsp;dismod_pde&nbsp;Objective&nbsp;Function</a><br>
<a href="#5.2" target="_top">5.2:&nbsp;Create&nbsp;an&nbsp;Age-Cohort&nbsp;Grid&nbsp;For&nbsp;a&nbsp;Measurement&nbsp;Set</a><br>
<a href="#5.3" target="_top">5.3:&nbsp;Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index</a><br>
<a href="#5.4" target="_top">5.4:&nbsp;Read&nbsp;an&nbsp;Entire&nbsp;CSV&nbsp;File&nbsp;Into&nbsp;Memory</a><br>
<a href="#5.5" target="_top">5.5:&nbsp;Convert&nbsp;a&nbsp;Sub-vector&nbsp;of&nbsp;a&nbsp;Character&nbsp;Vector&nbsp;to&nbsp;a&nbsp;String</a><br>
<a href="#5.6" target="_top">5.6:&nbsp;Convert&nbsp;a&nbsp;Sub-vector&nbsp;of&nbsp;a&nbsp;Character&nbsp;Vector&nbsp;to&nbsp;Double</a><br>
</div>
<hr>Input File: omh/cpp.omh

<hr>
<code>
<span style='white-space: nowrap'>&nbsp;\newcommand{\B}[1]{{\bf&nbsp;#1}}</span></code>

<code>
<span style='white-space: nowrap'>&nbsp;\newcommand{\R}[1]{{\rm&nbsp;#1}}</span></code>

<code>
<span style='white-space: nowrap'>&nbsp;\newcommand{\W}[1]{\;&nbsp;#1&nbsp;\;}</span></code>



<center><b><big><big><a name="5.1" id="5.1">5.1: Optimization of dismod_pde Objective Function</a>
</big></big></b></center>
<br>
<b><big><a name="5.1.a" id="5.1.a">5.1.a: Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>#&nbsp;include&nbsp;&quot;optimize.hpp&quot;<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>message</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;dismod_pde::optimize(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>parameter</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>covariate_value</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_out</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>effect_in</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>effect_out</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)</span></font></code>


<br>
<br>
<b><big><a name="5.1.b" id="5.1.b">5.1.b: Stochastic Functions</a></big></b>
<br>
dismod_pde estimates the following stochastic functions of age and cohort:
<table><tr><td align='left'  valign='top'>

<b>Name</b> </td><td align='left'  valign='top'>
 
	<b>Description</b> 
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">Stochastic_Enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code>
<span style='white-space: nowrap'>&nbsp;q</span></code>

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;S(&nbsp;\cdot&nbsp;)</span></code>
 </td><td align='left'  valign='top'>

	fraction of cohort that are Susceptible to the condition
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">dismod_pde::S_enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> 0
</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;C(&nbsp;\cdot&nbsp;)</span></code>
 </td><td align='left'  valign='top'>

	fraction of cohort that have the Condition
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">dismod_pde::C_enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> 1
</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;\iota&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;</span></code>
 </td><td align='left'  valign='top'>

	Incidence rate at which condition occurs
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">dismod_pde::iota_enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> 2
</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;\rho&nbsp;&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;</span></code>
 </td><td align='left'  valign='top'>

	Remission rate at which condition is cured
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">dismod_pde::rho_enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> 3
</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;\chi&nbsp;&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;</span></code>
 </td><td align='left'  valign='top'>

	eXcess mortality rate at which people die from the condition
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">dismod_pde::chi_enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> 4
</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;\omega&nbsp;&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;</span></code>
 </td><td align='left'  valign='top'>

	Mortality rate at which people die from other causes
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">dismod_pde::omega_enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> 5
</td></tr>
</table>
For <code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;5</span></code>
,
we also use <code>
<span style='white-space: nowrap'>&nbsp;s^q&nbsp;(a,&nbsp;c)</span></code>
 for the stochastic functions above; e.g.,
<code>
<span style='white-space: nowrap'>&nbsp;s^3&nbsp;(&nbsp;a&nbsp;,&nbsp;c&nbsp;)&nbsp;=&nbsp;\rho&nbsp;(&nbsp;a&nbsp;,&nbsp;c&nbsp;)</span></code>
.
Note that the <code>
<span style='white-space: nowrap'>&nbsp;q</span></code>
 values corresponding to the different functions
may change in future versions of <code><font color="blue">dismod_pde::optimize</font></code>.
Hence it is better to use the <code><font color="blue">Stochastic_Enum</font></code> values for the
stochastic function indices.

<br>
<br>
<b><big><a name="5.1.c" id="5.1.c">5.1.c: Stochastic_Enum</a></big></b>


<code><font color="blue"><br>
dismod_pde::Stochastic_Enum</font></code> is an <code><font color="blue">enum</font></code>
type with the values listed above.
Sometimes the corresponding integer value <code>
<span style='white-space: nowrap'>&nbsp;q</span></code>
 is used to denote a 
stochastic function in the documentation below.
The vector

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;dismod_pde::vector&lt;std::string&gt;&nbsp;dismod_pde::stochastic_enum.name()<br>
</span></font></code>
can be used to map from the indices <code>
<span style='white-space: nowrap'>&nbsp;q</span></code>
 to the corresponding string; 
e.g., 

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dismod_pde::stochastic_enum.name()[&nbsp;dismod_pde::rho_enum&nbsp;]&nbsp;==&nbsp;&quot;rho&quot;<br>
</span></font></code>
Here and below we use the notation <code>
<span style='white-space: nowrap'>&nbsp;Q</span></code>
 for the number
of stochastic functions; i.e.,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;dismod_pde::n_stochastic_enum<br>
</span></font></code>
<br>
<b><big><a name="5.1.d" id="5.1.d">5.1.d: Plus Infinity</a></big></b>
<br>
We use the notation <code>
<span style='white-space: nowrap'>&nbsp;+&nbsp;\infty</span></code>
 for the value

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>infinity</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;DISMOD4_PLUS_INFINITY<br>
</span></font></code>
where <code><font color="blue">DISMOD4_PLUS_INFINITY</font></code> is defined by
<code><font color="blue">optimize.hpp</font></code>.


<br>
<br>
<b><big><a name="5.1.e" id="5.1.e">5.1.e: Not a Number</a></big></b>
<br>
We use the notation <code>
<span style='white-space: nowrap'>&nbsp;\R{nan}</span></code>
 for the value

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nan</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;dismod_pde::nan()<br>
</span></font></code>
where <code><font color="blue">dismod_pde::nan()</font></code> is defined by
<code><font color="blue">optimize.hpp</font></code>.
For a <code><font color="blue">double </font></code> value 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
,
one should use the function

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dismod_pde::isnan(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
to determine if 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is not a number.


<br>
<br>
<b><big><a name="5.1.f" id="5.1.f">5.1.f: Likelihood Functions</a></big></b>


<br>
<br>
<b><a name="5.1.f.a" id="5.1.f.a">5.1.f.a: Huber Loss Function</a></b>
<br>
The Laplace <code>
<span style='white-space: nowrap'>&nbsp;H(&nbsp;r,&nbsp;\sigma&nbsp;,1)</span></code>
 and Gaussian <code>
<span style='white-space: nowrap'>&nbsp;H(&nbsp;r,&nbsp;\sigma&nbsp;,2)</span></code>
 
Huber loss functions are defined as follows:
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
H(&nbsp;r&nbsp;,&nbsp;\sigma&nbsp;,1)&nbsp;=&nbsp;\left\{&nbsp;\begin{array}{ll}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&amp;&nbsp;\R{if}&nbsp;\;&nbsp;\sigma&nbsp;=&nbsp;\infty&nbsp;&nbsp;\W{\R{or}}&nbsp;r&nbsp;=&nbsp;0&nbsp;\W{\R{or}}&nbsp;\R{isnan}(r)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\infty&nbsp;&amp;&nbsp;\R{otherwise&nbsp;\;&nbsp;if}&nbsp;\;&nbsp;\sigma&nbsp;=&nbsp;0<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\sqrt{2}&nbsp;\;&nbsp;|&nbsp;\;&nbsp;r&nbsp;/&nbsp;\sigma&nbsp;|^1&nbsp;&amp;&nbsp;\R{otherwise}<br>
\end{array}&nbsp;\right.<br>
\]&nbsp;</span></code>

<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
H(&nbsp;r&nbsp;,&nbsp;\sigma&nbsp;,2)&nbsp;=&nbsp;\left\{&nbsp;\begin{array}{ll}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&amp;&nbsp;\R{if}&nbsp;\;&nbsp;\sigma&nbsp;=&nbsp;\infty&nbsp;&nbsp;\W{\R{or}}&nbsp;r&nbsp;=&nbsp;0&nbsp;\W{\R{or}}&nbsp;\R{isnan}(r)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\infty&nbsp;&amp;&nbsp;\R{otherwise&nbsp;\;&nbsp;if}&nbsp;\;&nbsp;\sigma&nbsp;=&nbsp;0&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;r&nbsp;/&nbsp;\sigma&nbsp;)^2&nbsp;/&nbsp;2&nbsp;&amp;&nbsp;\R{otherwise}<br>
\end{array}&nbsp;\right.<br>
\]&nbsp;</span></code>

Note that, up to terms that are constant for our application,
these loss functions are the negative-log likelihood for the univariate 


<br>
<br>
<b><a name="5.1.f.b" id="5.1.f.b">5.1.f.b: Likelihood_Enum</a></b>


<code><font color="blue"><br>
dismod_pde::Likelihood_Enum</font></code> is an <code><font color="blue">enum</font></code> type with the values 
<code><font color="blue">dismod_pde::gaussian_enum</font></code> and <code><font color="blue">dismod_pde::laplace_enum</font></code>.
You can use the vector

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;dismod_pde::vector&lt;std::string&gt;&nbsp;dismod_pde::likelihood_enum.name()<br>
</span></font></code>
to map from the <code><font color="blue">enum</font></code> type to the corresponding string; 
e.g., 

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dismod_pde::likelihood_enum.name()[&nbsp;dismod_pde::gaussian_enum&nbsp;]&nbsp;==&nbsp;&quot;gaussian&quot;<br>
</span></font></code>
<br>
<b><a name="5.1.f.c" id="5.1.f.c">5.1.f.c: Residual Function</a></b>
<br>
The dismod_pde residual scaling function for 
offset <code>
<span style='white-space: nowrap'>&nbsp;\zeta</span></code>
,
model value <code>
<span style='white-space: nowrap'>&nbsp;x</span></code>
,
and matching value <code>
<span style='white-space: nowrap'>&nbsp;y</span></code>
 is defined by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
R(&nbsp;y&nbsp;,&nbsp;x&nbsp;,&nbsp;\zeta&nbsp;)&nbsp;=&nbsp;log(&nbsp;\zeta&nbsp;+&nbsp;y&nbsp;)&nbsp;-&nbsp;\log(&nbsp;\zeta&nbsp;+&nbsp;x&nbsp;)<br>
\]&nbsp;</span></code>



<br>
<br>
<b><big><a name="5.1.g" id="5.1.g">5.1.g: Vector</a></big></b>
<br>
The symbol <code><font color="blue">dismod_pde::vector</font></code> is a 
<a href="http://www.coin-or.org/CppAD/Doc/simplevector.xml" target="_top"><span style='white-space: nowrap'>simple&nbsp;vector</span></a>
 (http://www.coin-or.org/CppAD/Doc/simplevector.xml)  template type.



<br>
<br>
<b><big><a name="5.1.h" id="5.1.h">5.1.h: parameter</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>parameter</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;dismod_pde::Optimize_Parameter_Struct&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>parameter</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The following fields of 
<code><i><font color="black"><span style='white-space: nowrap'>parameter</span></font></i></code>
 must be set
to the corresponding values:

<br>
<br>
<b><a name="5.1.h.a" id="5.1.h.a">5.1.h.a: max_ode_step</a></b>
<br>
The parameter

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>parameter</span></font></i><font color="blue"><span style='white-space: nowrap'>.max_ode_step<br>
</span></font></code>
determines the maximum age integration step to use when computing the functions
<code>
<span style='white-space: nowrap'>&nbsp;\tilde{S}_{j,k}&nbsp;(&nbsp;a&nbsp;)</span></code>
 and 
<code>
<span style='white-space: nowrap'>&nbsp;\tilde{C}_{j,k}&nbsp;(&nbsp;a&nbsp;)</span></code>
 as approximate solutions of an ODE; see
<a href="#5.1.o.d">5.1.o.d: <span style='white-space: nowrap'>age_residual</span></a>
 below.

<code><i><font color="black"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&lt;&nbsp;parameter</span></font></i><font color="blue"><span style='white-space: nowrap'>.max_ode_step</span></font><i><font color="black"><span style='white-space: nowrap'><br>
</span></font></i></code>
<br>
<b><a name="5.1.h.b" id="5.1.h.b">5.1.h.b: print_level</a></b>
<br>
The parameter

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>parameter</span></font></i><font color="blue"><span style='white-space: nowrap'>.print_level<br>
</span></font></code>
determines the level of output that is printed by the optimization 
procedure.
<table><tr><td align='left'  valign='top'>

level <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>  </td><td align='left'  valign='top'>
 Description </td></tr><tr><td align='left'  valign='top'>

0 </td><td align='left'  valign='top'>
 
	no printing 
</td></tr><tr><td align='left'  valign='top'>

4 </td><td align='left'  valign='top'>

	print a summary at the beginning and end of the optimization procedure
</td></tr><tr><td align='left'  valign='top'>

5 </td><td align='left'  valign='top'>
 
	print a <a href="#5.1.1">5.1.1: <span style='white-space: nowrap'>trace</span></a>
 for each iteration of 
	the optimization procedure.
</td></tr>
</table>
<br>
<b><a name="5.1.h.c" id="5.1.h.c">5.1.h.c: max_iteration</a></b>
<br>
The parameter

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>parameter</span></font></i><font color="blue"><span style='white-space: nowrap'>.max_iteration<br>
</span></font></code>
determines the maximum number of iterations that the optimizer
should attempt before giving up on convergence as specified by 

<code><i><font color="black"><span style='white-space: nowrap'>parameter</span></font></i><font color="blue"><span style='white-space: nowrap'>.converge_tolerance</span></font></code>
.

<br>
<br>
<b><a name="5.1.h.d" id="5.1.h.d">5.1.h.d: converge_tolerance</a></b>
<br>
The parameter

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>parameter</span></font></i><font color="blue"><span style='white-space: nowrap'>.converge_tolerance<br>
</span></font></code>
specifies the convergence criteria tolerance as a bound on the final value of
<code><font color="blue">Dual infeasibility</font></code>,
<code><font color="blue">Constraint violation</font></code>,
<code><font color="blue">Complementarity</font></code>,
as printed in the optimizer trace
(see <a href="#5.1.h.b">5.1.h.b: <span style='white-space: nowrap'>print_level</span></a>
).

<br>
<br>
<b><a name="5.1.h.e" id="5.1.h.e">5.1.h.e: debug_output</a></b>
<br>
The parameter

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>parameter</span></font></i><font color="blue"><span style='white-space: nowrap'>.debug_output<br>
</span></font></code>
specifies if extra debugging output should be generated
(possibly at the expense of slower execution speed).



<br>
<br>
<b><big><a name="5.1.i" id="5.1.i">5.1.i: grid</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;dismod_pde::pair2index&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is a <a href="#5.3">5.3: <span style='white-space: nowrap'>pair2index</span></a>
 object constructed in the following way

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dismod_pde::pair2index&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>age</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_lower</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_upper</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>age</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>time_lower</span></font></i></code>
, 
and 
<code><i><font color="black"><span style='white-space: nowrap'>time_upper</span></font></i></code>
 are described directly below:

<br>
<br>
<b><a name="5.1.i.a" id="5.1.i.a">5.1.i.a: G</a></b>

<br>
For <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;J-1</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;k&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;K-1</span></code>
, if

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>valid</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'>.pack(</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
is true, then <code>
<span style='white-space: nowrap'>&nbsp;(i,j)</span></code>
 is in the computation grid <code>
<span style='white-space: nowrap'>&nbsp;G</span></code>
.
We use <code>
<span style='white-space: nowrap'>&nbsp;s_G</span></code>
 to denote the stochastic function values
on the computational grid; i.e.
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
s_G&nbsp;=&nbsp;\left\{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_{j,k}^q&nbsp;\W{:}&nbsp;&nbsp;(j,&nbsp;k)&nbsp;\in&nbsp;G&nbsp;\W{\R{and}}&nbsp;q&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;Q-1&nbsp;<br>
\right\}<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="5.1.i.b" id="5.1.i.b">5.1.i.b: age</a></b>
<br>
The argument <a href="#5.3.c">5.3.c: <span style='white-space: nowrap'>age</span></a>
 
in the 
<code><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i></code>
 constructor specifies the grid of age values.
We use the notation 
<code><i><font color="black"><span style='white-space: nowrap'>J</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()</span></font></code>

and for <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;J-1</span></code>
,
we sometimes use <code>
<span style='white-space: nowrap'>&nbsp;a_j</span></code>
 for the value 
<code><i><font color="black"><span style='white-space: nowrap'>age</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
.   
See <a href="#5.1.l.c">5.1.l.c: <span style='white-space: nowrap'>age_lower,&nbsp;age_upper</span></a>

for extra conditions on 
<code><i><font color="black"><span style='white-space: nowrap'>age</span></font></i></code>
.

<br>
<br>
<b><a name="5.1.i.c" id="5.1.i.c">5.1.i.c: cohort</a></b>
<br>
The argument <a href="#5.3.d">5.3.d: <span style='white-space: nowrap'>cohort</span></a>
 
to the 
<code><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i></code>
 constructor specifies the grid of cohort values.
We use the notation 
<code><i><font color="black"><span style='white-space: nowrap'>K</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()</span></font></code>

and for <code>
<span style='white-space: nowrap'>&nbsp;k&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;K-1</span></code>
,
we sometimes use <code>
<span style='white-space: nowrap'>&nbsp;c_k</span></code>
 for the value 
<code><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
.
See <a href="#5.1.l.d">5.1.l.d: <span style='white-space: nowrap'>time_lower,&nbsp;time_upper</span></a>

for extra conditions on 
<code><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i></code>
.

<br>
<br>
<b><a name="5.1.i.d" id="5.1.i.d">5.1.i.d: time_lower</a></b>
<br>
The argument <a href="#5.3.e">5.3.e: <span style='white-space: nowrap'>time_lower</span></a>
 
to the 
<code><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i></code>
 constructor specifies the lower limit in time 
for the age-cohort grid pairs that are to
be included in the computations and results.

<br>
<br>
<b><a name="5.1.i.e" id="5.1.i.e">5.1.i.e: time_upper</a></b>
<br>
The argument <a href="#5.3.f">5.3.f: <span style='white-space: nowrap'>time_upper</span></a>
 
to the 
<code><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i></code>
 constructor specifies the upper limit in time 
for the age-cohort grid pairs that are to
be included in the computations and results.



<br>
<br>
<b><big><a name="5.1.j" id="5.1.j">5.1.j: sfun_in</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;dismod_pde::vector&lt;dismod_pde::Sfun_Input_Struct&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The size of this vector is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
For <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;J-1</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;k&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;K-1</span></code>
, if

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>valid</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'>.pack(</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
returns false, the corresponding age-cohort pair 
is not in the computational grid.
Otherwise, for <code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;Q-1</span></code>
, the information stored in

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].</span></font><i><font color="black"><span style='white-space: nowrap'>field_name</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
corresponds to <code>
<span style='white-space: nowrap'>&nbsp;s_{j,k}^q</span></code>
; i.e.,
the stochastic function specified by <code>
<span style='white-space: nowrap'>&nbsp;q</span></code>

at age <code>
<span style='white-space: nowrap'>&nbsp;a_j</span></code>
 and cohort <code>
<span style='white-space: nowrap'>&nbsp;c_k</span></code>
.
The values for the 
<code><i><font color="black"><span style='white-space: nowrap'>field_name</span></font></i></code>
 are listed below:

<ol type="1"><li>
<a href="#5.1.j.a">5.1.j.a: <span style='white-space: nowrap'>optimize_zeta</span></a>
,
	offset added before log in transformation of optimization problem.
</li><li>

<a href="#5.1.j.b">5.1.j.b: <span style='white-space: nowrap'>optimize_lower</span></a>
,
	specifies the lower bound for <code>
<span style='white-space: nowrap'>&nbsp;s_{j,k}^q</span></code>
 during the optimization.
</li><li>

<a href="#5.1.j.c">5.1.j.c: <span style='white-space: nowrap'>optimize_initial</span></a>
,
	specifies the initial value for <code>
<span style='white-space: nowrap'>&nbsp;s_{j,k}^q</span></code>

	where the optimization starts.
</li><li>

<a href="#5.1.j.d">5.1.j.d: <span style='white-space: nowrap'>optimize_upper</span></a>
,
	specifies the upper bound for <code>
<span style='white-space: nowrap'>&nbsp;s_{j,k}^q</span></code>
 during the optimization.
</li><li>

<a href="#5.1.j.e">5.1.j.e: <span style='white-space: nowrap'>prior_like</span></a>
,
	Huber loss function for direct prior on <code>
<span style='white-space: nowrap'>&nbsp;s_{j,k}^q</span></code>

</li><li>

<a href="#5.1.j.f">5.1.j.f: <span style='white-space: nowrap'>prior_zeta</span></a>
,
	offset added before log in direct prior residual for <code>
<span style='white-space: nowrap'>&nbsp;s_{j,k}^q</span></code>

</li><li>

<a href="#5.1.j.g">5.1.j.g: <span style='white-space: nowrap'>prior_sigma</span></a>
,
	standard deviation for direct prior on <code>
<span style='white-space: nowrap'>&nbsp;s_{j,k}^q</span></code>

</li><li>

<a href="#5.1.j.h">5.1.j.h: <span style='white-space: nowrap'>prior_mean</span></a>
, 
	value corresponding to zero direct prior residual for <code>
<span style='white-space: nowrap'>&nbsp;s_{j,k}^q</span></code>

</li><li>

<a href="#5.1.j.i">5.1.j.i: <span style='white-space: nowrap'>age_like</span></a>
,
	Huber loss function for age residual <code>
<span style='white-space: nowrap'>&nbsp;A_{j,k}^{q,o}&nbsp;(s)</span></code>

</li><li>

<a href="#5.1.j.j">5.1.j.j: <span style='white-space: nowrap'>age_zeta</span></a>
,
	offset added to before log in definition of 
	<code>
<span style='white-space: nowrap'>&nbsp;A_{j,k}^{q,o}&nbsp;(s)</span></code>

</li><li>

<a href="#5.1.j.k">5.1.j.k: <span style='white-space: nowrap'>age_sigma</span></a>
,
	standard deviation factor for age residual <code>
<span style='white-space: nowrap'>&nbsp;A_{j,k}^{q,o}&nbsp;(s)</span></code>

</li><li>

<a href="#5.1.j.l">5.1.j.l: <span style='white-space: nowrap'>age_order</span></a>
,
	order for the age residual <code>
<span style='white-space: nowrap'>&nbsp;A_{j,k}^{q,o}&nbsp;(s)</span></code>
,
	must be <code><font color="blue">1</font></code> for <code>
<span style='white-space: nowrap'>&nbsp;S(&nbsp;\cdot&nbsp;)</span></code>
, <code>
<span style='white-space: nowrap'>&nbsp;C(&nbsp;\cdot&nbsp;)</span></code>
.
</li><li>

<a href="#5.1.j.m">5.1.j.m: <span style='white-space: nowrap'>cohort_like</span></a>
,
	Huber loss function for cohort residual <code>
<span style='white-space: nowrap'>&nbsp;B_{j,k}^{q,o}&nbsp;(s)</span></code>

</li><li>

<a href="#5.1.j.n">5.1.j.n: <span style='white-space: nowrap'>cohort_zeta</span></a>
,
	offset added to before log in definition of 
	<code>
<span style='white-space: nowrap'>&nbsp;B_{j,k}^{q,o}&nbsp;(s)</span></code>

</li><li>

<a href="#5.1.j.o">5.1.j.o: <span style='white-space: nowrap'>cohort_sigma</span></a>
,
	standard deviation factor for cohort residual <code>
<span style='white-space: nowrap'>&nbsp;B_{j,k}^{q,o}&nbsp;(s)</span></code>

</li><li>

<a href="#5.1.j.p">5.1.j.p: <span style='white-space: nowrap'>cohort_order</span></a>
,
	order for the cohort residual <code>
<span style='white-space: nowrap'>&nbsp;B_{j,k}^{o.q}&nbsp;(s)</span></code>

</li><li>

<a href="#5.1.j.q">5.1.j.q: <span style='white-space: nowrap'>cross_like</span></a>
,
	Huber loss function for cross residual <code>
<span style='white-space: nowrap'>&nbsp;D_{j,k}^{q,o}&nbsp;(s)</span></code>

</li><li>

<a href="#5.1.j.r">5.1.j.r: <span style='white-space: nowrap'>cross_zeta</span></a>
,
	offset added to before log in definition of 
	<code>
<span style='white-space: nowrap'>&nbsp;D_{j,k}^{q,o}&nbsp;(s)</span></code>

</li><li>

<a href="#5.1.j.s">5.1.j.s: <span style='white-space: nowrap'>cross_sigma</span></a>
,
	standard deviation factor for cross residual <code>
<span style='white-space: nowrap'>&nbsp;D_{j,k}^{q,o}&nbsp;(s)</span></code>

</li></ol>


<br>
<br>
<b><a name="5.1.j.a" id="5.1.j.a">5.1.j.a: optimize_zeta</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;\zeta_{j,k}^{o,q}</span></code>
 to denote the offset added 
before the log in the transformation that re-scales the optimization 
problem.
To be specific, 
for each <code>
<span style='white-space: nowrap'>&nbsp;(j,&nbsp;k)&nbsp;\in&nbsp;G</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;1&nbsp;,&nbsp;\ldots,&nbsp;Q-1</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\bar{s}_{j,k}^p&nbsp;=&nbsp;\log(&nbsp;\zeta_{j,k}^{o,q}&nbsp;+&nbsp;s_{j,k}^q&nbsp;)<br>
\]&nbsp;</span></code>

The optimization is done by an generic optimizer with respect to
the transformed stochastic functions values <code>
<span style='white-space: nowrap'>&nbsp;\bar{s}_G</span></code>
.


<br>
<br>
<b><a name="5.1.j.b" id="5.1.j.b">5.1.j.b: optimize_lower</a></b>
<br>
The lower bound for <code>
<span style='white-space: nowrap'>&nbsp;s_{j,k}^q</span></code>
 during the optimization
procedure, is specified by 

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].optimize_lower<br>
</span></font></code>
We use the notation <code>
<span style='white-space: nowrap'>&nbsp;s_{j,k}^{q,l}</span></code>
 for this lower bound
and <code>
<span style='white-space: nowrap'>&nbsp;s_G^l</span></code>
 for the vectors of all the lower bounds
on the entire grid.

<br>
<br>
<b><a name="5.1.j.c" id="5.1.j.c">5.1.j.c: optimize_initial</a></b>
<br>
The routine <code><font color="blue">optimize</font></code> is a local optimizer and as such it requires 
a point to start the optimization procedure at. 
The <code>
<span style='white-space: nowrap'>&nbsp;&nbsp;s_{j,k}^q</span></code>
 component of this starting point
is specified by the value

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].optimize_initial<br>
</span></font></code>
All of these values must be greater than or equal zero.

<br>
<br>
<b><a name="5.1.j.d" id="5.1.j.d">5.1.j.d: optimize_upper</a></b>
<br>
The upper bound for <code>
<span style='white-space: nowrap'>&nbsp;s_{j,k}^q</span></code>
 during the optimization
procedure, is specified by 

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].optimize_upper<br>
</span></font></code>
where must be greater than or equal to corresponding lower bound.
We use the notation <code>
<span style='white-space: nowrap'>&nbsp;s_{j,k}^{q,u}</span></code>
 for this upper bound
and <code>
<span style='white-space: nowrap'>&nbsp;s_G^u</span></code>
 for the vectors of all the upper bounds
on the entire grid.

<br>
<br>
<b><a name="5.1.j.e" id="5.1.j.e">5.1.j.e: prior_like</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;h_{j,k}^{q,p}</span></code>
 to denote the Huber loss function index for
the direct prior for the stochastic function value <code>
<span style='white-space: nowrap'>&nbsp;&nbsp;s_{j,k}^q</span></code>
.
This value is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dismod_pde::Likelihood_Enum&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].prior_like<br>
</span></font></code>
See <a href="#5.1.o.b">5.1.o.b: <span style='white-space: nowrap'>prior_residual</span></a>
.

<br>
<br>
<b><a name="5.1.j.f" id="5.1.j.f">5.1.j.f: prior_zeta</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;\zeta_{j,k}^{q,p}</span></code>
 to denote the offset added before 
the log in the calculation of the direct prior residual for 
the stochastic function value <code>
<span style='white-space: nowrap'>&nbsp;&nbsp;s_{j,k}^q</span></code>
.
This value is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].prior_zeta<br>
</span></font></code>
See <a href="#5.1.o.b">5.1.o.b: <span style='white-space: nowrap'>prior_residual</span></a>
.
It must hold that <code>
<span style='white-space: nowrap'>&nbsp;\zeta_{j,k}^{q,p}&nbsp;&gt;&nbsp;0</span></code>
.

<br>
<br>
<b><a name="5.1.j.g" id="5.1.j.g">5.1.j.g: prior_sigma</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;\sigma_{j,k}^{q,p}</span></code>
 to denote the standard deviation
of the direct prior for the stochastic function value <code>
<span style='white-space: nowrap'>&nbsp;&nbsp;s_{j,k}^q</span></code>
.
This value is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].prior_sigma<br>
</span></font></code>
See <a href="#5.1.o.b">5.1.o.b: <span style='white-space: nowrap'>prior_residual</span></a>
.

<br>
<br>
<b><a name="5.1.j.h" id="5.1.j.h">5.1.j.h: prior_mean</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;\mu_{j,k}^q</span></code>
 to denote
the stochastic function value <code>
<span style='white-space: nowrap'>&nbsp;s_{j,k}^q</span></code>

at which the direct prior residual is zero.
This value is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].prior_mean<br>
</span></font></code>
See <a href="#5.1.o.b">5.1.o.b: <span style='white-space: nowrap'>prior_residual</span></a>
.

<br>
<br>
<b><a name="5.1.j.i" id="5.1.j.i">5.1.j.i: age_like</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;h_{j,k}^{q,a}</span></code>
 to denote the Huber loss function index for
the age residual <code>
<span style='white-space: nowrap'>&nbsp;A_{j,k}^{q,o}&nbsp;(s)</span></code>
.
This value is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].age_like<br>
</span></font></code>
See <a href="#5.1.o.d">5.1.o.d: <span style='white-space: nowrap'>age_residual</span></a>
.

<br>
<br>
<b><a name="5.1.j.j" id="5.1.j.j">5.1.j.j: age_zeta</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;\zeta_{j,k}^{q,a}</span></code>
 to denote the offset that is added before
takeing the logs in the definition of<code>
<span style='white-space: nowrap'>&nbsp;A_{j,k}^{q,o}&nbsp;(s)</span></code>
.
This value is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].age_zeta<br>
</span></font></code>
See <a href="#5.1.o.d">5.1.o.d: <span style='white-space: nowrap'>age_residual</span></a>
.

<br>
<br>
<b><a name="5.1.j.k" id="5.1.j.k">5.1.j.k: age_sigma</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;\sigma_{j,k}^{q,a}</span></code>
 to denote the standard deviation factor
for the age residual <code>
<span style='white-space: nowrap'>&nbsp;A_{j,k}^{q,o}&nbsp;(s)</span></code>
.
This value is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].age_sigma<br>
</span></font></code>
See <a href="#5.1.o.d">5.1.o.d: <span style='white-space: nowrap'>age_residual</span></a>
.

<br>
<br>
<b><a name="5.1.j.l" id="5.1.j.l">5.1.j.l: age_order</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;o_{j,k}^{q,a}</span></code>
 to denote the order
for the age residual <code>
<span style='white-space: nowrap'>&nbsp;A_{j,k}^{q,o}&nbsp;(s)</span></code>
.
This value is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].age_order<br>
</span></font></code>
It must have value one or two, and 
must be one when 
<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i></code>
 corresponds to 
<code>
<span style='white-space: nowrap'>&nbsp;S(&nbsp;\cdot&nbsp;)</span></code>
 (<code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;0</span></code>
) or 
<code>
<span style='white-space: nowrap'>&nbsp;C(&nbsp;\cdot&nbsp;)</span></code>
 (<code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;1</span></code>
) .
See <a href="#5.1.o.d">5.1.o.d: <span style='white-space: nowrap'>age_residual</span></a>
.

<br>
<br>
<b><a name="5.1.j.m" id="5.1.j.m">5.1.j.m: cohort_like</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;h_{j,k}^{c,&nbsp;q}</span></code>
 to denote the Huber function index for
the cohort residual <code>
<span style='white-space: nowrap'>&nbsp;B_{j,k}^{q,o}&nbsp;(s)</span></code>

This value is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].cohort_like<br>
</span></font></code>
See <a href="#5.1.o.f">5.1.o.f: <span style='white-space: nowrap'>cohort_residual</span></a>
.

<br>
<br>
<b><a name="5.1.j.n" id="5.1.j.n">5.1.j.n: cohort_zeta</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;\zeta_{j,k}^{c,&nbsp;q}</span></code>
 to denote the offset that is added before
taking the logs in the definition of <code>
<span style='white-space: nowrap'>&nbsp;B_{j,k}^{q,o}&nbsp;(s)</span></code>

This value is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].cohort_zeta<br>
</span></font></code>
See <a href="#5.1.o.f">5.1.o.f: <span style='white-space: nowrap'>cohort_residual</span></a>
.

<br>
<br>
<b><a name="5.1.j.o" id="5.1.j.o">5.1.j.o: cohort_sigma</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;\sigma_{j,k}^{c,&nbsp;q}</span></code>
 to denote the standard deviation factor for
the cohort residual <code>
<span style='white-space: nowrap'>&nbsp;B_{j,k}^{q,o}&nbsp;(s)</span></code>

This value is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].cohort_sigma<br>
</span></font></code>
See <a href="#5.1.o.f">5.1.o.f: <span style='white-space: nowrap'>cohort_residual</span></a>
.

<br>
<br>
<b><a name="5.1.j.p" id="5.1.j.p">5.1.j.p: cohort_order</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;o_{j,k}^{c,&nbsp;q}</span></code>
 to denote the order
for the cohort residual <code>
<span style='white-space: nowrap'>&nbsp;B_{j,k}^{q,o}&nbsp;(s)</span></code>
.
This value is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].cohort_order<br>
</span></font></code>
and must have value one or two.
See <a href="#5.1.o.f">5.1.o.f: <span style='white-space: nowrap'>cohort_residual</span></a>
.

<br>
<br>
<b><a name="5.1.j.q" id="5.1.j.q">5.1.j.q: cross_like</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;h_{j,k}^{d,&nbsp;q}</span></code>
 to denote the Huber function index for
the cross residual <code>
<span style='white-space: nowrap'>&nbsp;D_{j,k}^q&nbsp;(s)</span></code>

This value is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].cross_like<br>
</span></font></code>
See <a href="#5.1.o.h">5.1.o.h: <span style='white-space: nowrap'>cross_residual</span></a>
.

<br>
<br>
<b><a name="5.1.j.r" id="5.1.j.r">5.1.j.r: cross_zeta</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;\zeta_{j,k}^{d,&nbsp;q}</span></code>
 to denote the offset that is added before
taking the logs in the definition of <code>
<span style='white-space: nowrap'>&nbsp;D_{j,k}^{q,o}&nbsp;(s)</span></code>

This value is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].cross_zeta<br>
</span></font></code>
See <a href="#5.1.o.h">5.1.o.h: <span style='white-space: nowrap'>cross_residual</span></a>
.

<br>
<br>
<b><a name="5.1.j.s" id="5.1.j.s">5.1.j.s: cross_sigma</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;\sigma_{j,k}^{d,&nbsp;q}</span></code>
 to denote the standard deviation factor for
the cross residual <code>
<span style='white-space: nowrap'>&nbsp;D_{j,k}^{q,o}&nbsp;(s)</span></code>

This value is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].cross_sigma<br>
</span></font></code>
See <a href="#5.1.o.h">5.1.o.h: <span style='white-space: nowrap'>cross_residual</span></a>
.



<br>
<br>
<b><big><a name="5.1.k" id="5.1.k">5.1.k: covariate_value</a></big></b>



<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>covariate_value</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;dismod_pde::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>covariate_value</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
its size is equal to 
<code><i><font color="black"><span style='white-space: nowrap'>L</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>N</span></font></i></code>
 where

<code><i><font color="black"><span style='white-space: nowrap'>L</span></font></i></code>
 is the number of measurements and 
<code><i><font color="black"><span style='white-space: nowrap'>N</span></font></i></code>
 is the
number of covariate columns.
We define covariate matrix <code>
<span style='white-space: nowrap'>&nbsp;X&nbsp;\in&nbsp;\B{R}^{L&nbsp;\times&nbsp;N}</span></code>
 by
<code><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></code>
<code>
<span style='white-space: nowrap'>&nbsp;X_{\ell,n}&nbsp;=&nbsp;</span></code>
 
<code><i><font color="black"><span style='white-space: nowrap'>covariate_value</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>N</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]</span></font></code>

for 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>N</span></font></i><font color="blue"><span style='white-space: nowrap'>-1</span></font></code>
 and

<code><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>L</span></font></i><font color="blue"><span style='white-space: nowrap'>-1</span></font></code>
.



<br>
<br>
<b><big><a name="5.1.l" id="5.1.l">5.1.l: measure_in</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;dismod_pde::vector&lt;dismod_pde::Measure_Input_Struct&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The number of measurements <code>
<span style='white-space: nowrap'>&nbsp;L</span></code>
 is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>L</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()<br>
</span></font></code>
For 
<code><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>L</span></font></i><font color="blue"><span style='white-space: nowrap'>-1</span></font></code>
,
the following fields of 
<code><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 must be set:

<table><tr><td align='left'  valign='top'>

<b>field name</b> </td><td align='left'  valign='top'>
 <b>Description</b> 
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.l.a">5.1.l.a: <span style='white-space: nowrap'>integrand</span></a>
 </td><td align='left'  valign='top'>

	The integrand used to model the measurement.
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.l.c">5.1.l.c: <span style='white-space: nowrap'>age_lower,&nbsp;age_upper</span></a>
 </td><td align='left'  valign='top'>

	The age limits for this measurement.
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.l.d">5.1.l.d: <span style='white-space: nowrap'>time_lower,&nbsp;time_upper</span></a>
 
	</td><td align='left'  valign='top'>
 The time limits for this measurement.
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.l.e">5.1.l.e: <span style='white-space: nowrap'>meas_like</span></a>
 </td><td align='left'  valign='top'>

	Huber loss function used to model this measurement.
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.l.f">5.1.l.f: <span style='white-space: nowrap'>meas_zeta</span></a>
 </td><td align='left'  valign='top'>

	Offset that is added before taking the log in the likelihood.
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.l.g">5.1.l.g: <span style='white-space: nowrap'>meas_sigma</span></a>
 </td><td align='left'  valign='top'>

	Our model for the standard deviation of this measurement.
</td></tr><tr><td align='left'  valign='top'>

<a href="#5.1.l.h">5.1.l.h: <span style='white-space: nowrap'>meas_value</span></a>
 </td><td align='left'  valign='top'>

	The value for this measurement. 
</td></tr>
</table>
<br>
<b><a name="5.1.l.a" id="5.1.l.a">5.1.l.a: integrand</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;I^{i(&nbsp;\ell&nbsp;)}&nbsp;(&nbsp;\cdot&nbsp;)</span></code>
 to denote the integrand 
for the <code>
<span style='white-space: nowrap'>&nbsp;\ell</span></code>
-th measurement.
The value <code>
<span style='white-space: nowrap'>&nbsp;i(&nbsp;\ell&nbsp;)</span></code>
 is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dismod_pde::Integrand_Enum&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font><i><font color="black"><span style='white-space: nowrap'>.integrand<br>
</span></font></i></code>
Each measurement is a definite integral of one of the following functions 
with respect to age and time (plus some random noise):
<table><tr><td align='left'  valign='top'>

<b>Definition</b> 
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <b>integrand</b>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <b>Description</b>
</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^\iota&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;\iota(&nbsp;\cdot&nbsp;)</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">incidence_enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> incidence rate

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^\rho&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;\rho(&nbsp;\cdot&nbsp;)</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">remission_enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> remission rate

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^\chi&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;\chi(&nbsp;\cdot&nbsp;)</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">m_excess_enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> excess mortality rate

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^\omega&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;\omega(&nbsp;\cdot&nbsp;)&nbsp;</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">m_other_enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> other cause mortality rate

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^w&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;\omega(&nbsp;\cdot&nbsp;)&nbsp;+&nbsp;\chi&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">m_with_enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> with condition mortality rate

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^p&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;C(&nbsp;\cdot&nbsp;)&nbsp;/&nbsp;[&nbsp;S(&nbsp;\cdot&nbsp;)&nbsp;+&nbsp;C(&nbsp;\cdot&nbsp;)&nbsp;]</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">prevalence_enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> prevalence

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^e&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;\chi(&nbsp;\cdot&nbsp;)&nbsp;I^p&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">m_prevalence_enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> excess mortality rate times prevalence
	
</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^s&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;I^e&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;&nbsp;</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">m_specific_enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> cause specific mortality rate

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^a&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\omega&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;+&nbsp;&nbsp;I^e&nbsp;(&nbsp;\cdot&nbsp;)</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">m_all_enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> all cause mortality rate

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^\sigma&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;I^w&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;/&nbsp;I^a&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;&nbsp;</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">m_standard_enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> standardized mortality ratio

</td></tr><tr><td align='left'  valign='top'>

<code>
<span style='white-space: nowrap'>&nbsp;I^r&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;I^w&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;/&nbsp;\omega&nbsp;(&nbsp;\cdot&nbsp;)</span></code>

	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> <code><font color="blue">relative_risk_enum</font></code>
	</td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> relative risk ratio
</td></tr>
</table>
<br>
<b><a name="5.1.l.b" id="5.1.l.b">5.1.l.b: Integrand_Enum</a></b>

<code><font color="blue"><br>
dismod_pde::Integrand_Enum</font></code> is an <code><font color="blue">enum</font></code>
type with the values listed above.
Sometimes the corresponding integer value <code>
<span style='white-space: nowrap'>&nbsp;i</span></code>
 is used to denote a 
integrand function in the documentation below.
The vector

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;vector&lt;std::string&gt;&nbsp;dismod_pde::integrand_enum.name()<br>
</span></font></code>
can be used to map from the indices <code>
<span style='white-space: nowrap'>&nbsp;i</span></code>
 to the corresponding string; 
e.g., 

<code><font color="blue"><span style='white-space: nowrap'><br>
dismod_pde::integrand_enum.name()[&nbsp;dismod_pde::relative_risk_enum&nbsp;]&nbsp;==&nbsp;&quot;relative_risk&quot;<br>
</span></font></code>
The number of possible integrands is equal to

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dismod_pde::n_integrand_enum<br>
</span></font></code>
<br>
<b><a name="5.1.l.c" id="5.1.l.c">5.1.l.c: age_lower, age_upper</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;a_{l,&nbsp;\ell}</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;a_{u,&nbsp;\ell}</span></code>
 to denote the 
lower and upper age integration limits for the <code>
<span style='white-space: nowrap'>&nbsp;\ell</span></code>
-th measurement.
These values are specified by 

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>].age_lower<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>].age_upper<br>
</span></font></code>
For all <code>
<span style='white-space: nowrap'>&nbsp;\ell</span></code>
, it must hold that 
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_1&nbsp;\leq&nbsp;a_{l,&nbsp;\ell}&nbsp;\leq&nbsp;a_{u,&nbsp;\ell}&nbsp;\leq&nbsp;a_{J-1}<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="5.1.l.d" id="5.1.l.d">5.1.l.d: time_lower, time_upper</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;t_{l,&nbsp;\ell}</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;t_{u,&nbsp;\ell}</span></code>
 to denote the 
lower and upper time integration limits for  the <code>
<span style='white-space: nowrap'>&nbsp;\ell</span></code>
-th measurement.
These values are specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>].time_lower<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>].time_upper<br>
</span></font></code>
For all <code>
<span style='white-space: nowrap'>&nbsp;\ell</span></code>
, it must hold that 
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c_1&nbsp;+&nbsp;a_{J-1}&nbsp;&lt;&nbsp;t_{l,&nbsp;\ell}&nbsp;\leq&nbsp;t_{u,&nbsp;\ell}&nbsp;&lt;&nbsp;c_{K-2}&nbsp;+&nbsp;a_1<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="5.1.l.e" id="5.1.l.e">5.1.l.e: meas_like</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;h_\ell&nbsp;</span></code>
 to denote the Huber function index 
for the <code>
<span style='white-space: nowrap'>&nbsp;\ell</span></code>
-th measurement which is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>].meas_like<br>
</span></font></code>
See <a href="#5.1.p.c">5.1.p.c: <span style='white-space: nowrap'>measure_out&nbsp;residual</span></a>
.

<br>
<br>
<b><a name="5.1.l.f" id="5.1.l.f">5.1.l.f: meas_zeta</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;\zeta_\ell&nbsp;</span></code>
 to denote the model offset 
added before the log in the residual
for the <code>
<span style='white-space: nowrap'>&nbsp;\ell</span></code>
-th measurement which is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>].meas_zeta<br>
</span></font></code>
See <a href="#5.1.p.c">5.1.p.c: <span style='white-space: nowrap'>measure_out&nbsp;residual</span></a>
.

<br>
<br>
<b><a name="5.1.l.g" id="5.1.l.g">5.1.l.g: meas_sigma</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;\sigma_\ell&nbsp;</span></code>
 to denote the standard deviation 
for the <code>
<span style='white-space: nowrap'>&nbsp;\ell</span></code>
-th measurement which is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>].meas_sigma<br>
</span></font></code>
See <a href="#5.1.p.c">5.1.p.c: <span style='white-space: nowrap'>measure_out&nbsp;residual</span></a>
.

<br>
<br>
<b><a name="5.1.l.h" id="5.1.l.h">5.1.l.h: meas_value</a></b>
<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;z_\ell&nbsp;</span></code>
 to denote the value
for the <code>
<span style='white-space: nowrap'>&nbsp;\ell</span></code>
-th measurement which is specified by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>].meas_value<br>
</span></font></code>
See <a href="#5.1.p.c">5.1.p.c: <span style='white-space: nowrap'>measure_out&nbsp;residual</span></a>
.




<br>
<br>
<b><big><a name="5.1.m" id="5.1.m">5.1.m: effect_in</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>effect_in</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;dismod_pde::vector&lt;dismod_pde::Effect_Input_Struct&gt;&amp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>effect_in</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size must be equal to 
<code><i><font color="black"><span style='white-space: nowrap'>M</span></font></i></code>
, the number of 
measurement effects.
For 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>M</span></font></i><font color="blue"><span style='white-space: nowrap'>-1</span></font></code>
,
the following fields of 
<code><i><font color="black"><span style='white-space: nowrap'>effect_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 must be set:

<br>
<br>
<b><a name="5.1.m.a" id="5.1.m.a">5.1.m.a: integrand</a></b>
<br>
The measurement integrand for this effect is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integrand_Enum&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>effect_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>].integrand<br>
</span></font></code>
which is denoted by <code>
<span style='white-space: nowrap'>&nbsp;i(m)</span></code>
 below.

<br>
<br>
<b><a name="5.1.m.b" id="5.1.m.b">5.1.m.b: covariate</a></b>
<br>
The covariate column for this measurement effect is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>effect_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>].covariate<br>
</span></font></code>
which is denoted by <code>
<span style='white-space: nowrap'>&nbsp;n(m)</span></code>
 below.

<br>
<br>
<b><a name="5.1.m.c" id="5.1.m.c">5.1.m.c: lower</a></b>
<br>
The lower limit for this measurement effect during optimization is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>effect_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>].lower<br>
</span></font></code>
<br>
<b><a name="5.1.m.d" id="5.1.m.d">5.1.m.d: initial</a></b>
<br>
The initial value for this measurement effect during optimization is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>effect_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>].initial<br>
</span></font></code>
<br>
<b><a name="5.1.m.e" id="5.1.m.e">5.1.m.e: upper</a></b>
<br>
The upper limit for this measurement effect during optimization is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>effect_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>].upper<br>
</span></font></code>
<br>
<b><big><a name="5.1.n" id="5.1.n">5.1.n: effect_out</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>effect_out</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dismod_pde::vector&lt;double&gt;&amp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>effect_out</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size must be given by 

<code><i><font color="black"><span style='white-space: nowrap'>effect_out</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>M</span></font></i></code>
.  
The input value of its elements does not matter.
Upon return from <code><font color="blue">optimize</font></code>,
for <code>
<span style='white-space: nowrap'>&nbsp;m&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;M-1</span></code>
, 

<code><i><font color="black"><span style='white-space: nowrap'>effect_out</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 is the optimal estimate for 
the <i>m</i>-th measurement effect <code>
<span style='white-space: nowrap'>&nbsp;\beta_m</span></code>





<br>
<br>
<b><big><a name="5.1.o" id="5.1.o">5.1.o: sfun_out</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dismod_pde::vector&lt;dismod_pde::Sfun_Output_Struct&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The size of this vector is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The input value of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i></code>
 does not matter.
For <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;0,&nbsp;...,&nbsp;J-1</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;k&nbsp;=&nbsp;0&nbsp;,&nbsp;...&nbsp;,&nbsp;K-1</span></code>
, if

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>valid</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'>.pack(</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
returns false, the corresponding age-cohort pair 
is not in the computational grid.
Otherwise, Upon return from <code><font color="blue">optimize</font></code>,
for <code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;Q-1</span></code>
,
the information stored in

<code><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].</span></font><i><font color="black"><span style='white-space: nowrap'>field_name</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
corresponds to <code>
<span style='white-space: nowrap'>&nbsp;s_{j,k}^q</span></code>
; i.e., the stochastic function
specified by <code>
<span style='white-space: nowrap'>&nbsp;q</span></code>
 at age <code>
<span style='white-space: nowrap'>&nbsp;a_j</span></code>
 and cohort <code>
<span style='white-space: nowrap'>&nbsp;c_k</span></code>
.
The values for 
<code><i><font color="black"><span style='white-space: nowrap'>field_name</span></font></i></code>
 are listed directly below:

<ol type="1"><li>
<a href="#5.1.o.a">5.1.o.a: <span style='white-space: nowrap'>estimate</span></a>
,
	final estimate returned by the optimization process.
</li><li>

<a href="#5.1.o.b">5.1.o.b: <span style='white-space: nowrap'>prior_residual</span></a>
,
	prior residuals corresponding to final estimate.
</li><li>

<a href="#5.1.o.c">5.1.o.c: <span style='white-space: nowrap'>prior_scaled</span></a>
,
	scaled prior residuals corresponding to final estimate.
</li><li>

<a href="#5.1.o.d">5.1.o.d: <span style='white-space: nowrap'>age_residual</span></a>
,
	age residuals corresponding to final estimate.
</li><li>

<a href="#5.1.o.e">5.1.o.e: <span style='white-space: nowrap'>age_scaled</span></a>
,
	scaled age residuals corresponding to final estimate.
</li><li>

<a href="#5.1.o.f">5.1.o.f: <span style='white-space: nowrap'>cohort_residual</span></a>
,
	cohort residuals corresponding to final estimate.
</li><li>

<a href="#5.1.o.g">5.1.o.g: <span style='white-space: nowrap'>cohort_scaled</span></a>
,
	scaled cohort residuals corresponding to final estimate.
</li><li>

<a href="#5.1.o.h">5.1.o.h: <span style='white-space: nowrap'>cross_residual</span></a>
,
	cross residuals corresponding to final estimate.
</li><li>

<a href="#5.1.o.i">5.1.o.i: <span style='white-space: nowrap'>cross_scaled</span></a>
,
	scaled cross residuals corresponding to final estimate.
</li></ol>


<br>
<br>
<b><a name="5.1.o.a" id="5.1.o.a">5.1.o.a: estimate</a></b>
<br>
The <code>
<span style='white-space: nowrap'>&nbsp;&nbsp;s_{j,k}^q</span></code>
 component is of the final estimate
returned by the optimizer is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].estimate<br>
</span></font></code>
<br>
<b><a name="5.1.o.b" id="5.1.o.b">5.1.o.b: prior_residual</a></b>
<br>
The return value of

<code><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].prior_residual<br>
</span></font></code>
is set to the direct prior residual.
Note that this is defined for every <code>
<span style='white-space: nowrap'>&nbsp;(j,&nbsp;k)&nbsp;\in&nbsp;G</span></code>
.
To be specific,
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
P_{j,k}^q&nbsp;(&nbsp;s_G&nbsp;)&nbsp;=&nbsp;R&nbsp;\left(&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_{j,k}^q&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\W{,}&nbsp;\mu_{j,k}^q&nbsp;\W{,}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\zeta_{j,k}^{q,p}&nbsp;<br>
\right)<br>
\]&nbsp;</span></code>

where <code>
<span style='white-space: nowrap'>&nbsp;s_G</span></code>
 is the return
<a href="#5.1.o.a">5.1.o.a: <span style='white-space: nowrap'>estimate</span></a>
.

<br>
<br>
<b><a name="5.1.o.c" id="5.1.o.c">5.1.o.c: prior_scaled</a></b>
<br>
The return value of

<code><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].prior_scaled<br>
</span></font></code>
is set to the scaled residual for the direct prior which is defined by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\left\{&nbsp;\begin{array}{ll}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\left.&nbsp;P_{j,k}^q&nbsp;(&nbsp;s_G&nbsp;)&nbsp;\right/&nbsp;&nbsp;\sigma_{j,k}^{q,p}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;\R{if}&nbsp;\;&nbsp;0&nbsp;&lt;&nbsp;\sigma_{j,k}^{q,p}&nbsp;&lt;&nbsp;+&nbsp;\infty<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\R{nan}&nbsp;&amp;&nbsp;\R{Otherwise}<br>
\end{array}&nbsp;\right.<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="5.1.o.d" id="5.1.o.d">5.1.o.d: age_residual</a></b>
<br>
The return value of

<code><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].age_residual<br>
</span></font></code>
is set to the age residual <code>
<span style='white-space: nowrap'>&nbsp;A_{j,k}^{q,o}&nbsp;(s)</span></code>
 (defined below).
For <code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;Q-1</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
A_{j,k}^{q,1}&nbsp;(&nbsp;s_G&nbsp;)&nbsp;=&nbsp;\R{nan}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\W{\Leftarrow}&nbsp;&nbsp;(j+1,k)&nbsp;\;&nbsp;\R{not&nbsp;\;&nbsp;in}&nbsp;\;&nbsp;G&nbsp;<br>
\]&nbsp;</span></code>

<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
A_{j,k}^{q,2}&nbsp;(&nbsp;s_G&nbsp;)&nbsp;=&nbsp;\R{nan}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\W{\Leftarrow}&nbsp;(j+2,k)&nbsp;\;&nbsp;\R{not&nbsp;\;&nbsp;in}&nbsp;\;&nbsp;G&nbsp;<br>
\]&nbsp;</span></code>

For <code>
<span style='white-space: nowrap'>&nbsp;(j,&nbsp;k)&nbsp;\in&nbsp;G</span></code>
 such that <code>
<span style='white-space: nowrap'>&nbsp;(j+1,k)&nbsp;\in&nbsp;G</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;2&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;Q-1</span></code>
, and 
<code>
<span style='white-space: nowrap'>&nbsp;a_j&nbsp;\leq&nbsp;\alpha&nbsp;\leq&nbsp;a_{j+1}</span></code>
, 
we define the function
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\tilde{s}^q_{j,k}&nbsp;(&nbsp;\alpha&nbsp;)&nbsp;=&nbsp;<br>
\frac{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s^q_{j,k}&nbsp;(&nbsp;a_{j+1}&nbsp;-&nbsp;\alpha&nbsp;)&nbsp;+&nbsp;s^q_{j+1,k}&nbsp;(&nbsp;\alpha&nbsp;-&nbsp;a_j&nbsp;)&nbsp;<br>
}{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_{j+1}&nbsp;-&nbsp;a_j&nbsp;<br>
}&nbsp;<br>
\]&nbsp;</span></code>
 
We define the functions
<code>
<span style='white-space: nowrap'>&nbsp;\tilde{S}_{j,k}&nbsp;(&nbsp;a&nbsp;)</span></code>
 (<code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;0</span></code>
) and 
<code>
<span style='white-space: nowrap'>&nbsp;\tilde{C}_{j,k}&nbsp;(&nbsp;a&nbsp;)</span></code>
 (<code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;1</span></code>
) 
as approximate solutions for the following ODE:
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
\tilde{S}_{j,k}&nbsp;(&nbsp;a_j&nbsp;)&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;S_{j,k}&nbsp;<br>
\\<br>
\tilde{C}_{j,k}&nbsp;(&nbsp;a_j&nbsp;)&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;C_{j,k}&nbsp;<br>
\\<br>
\partial_\alpha&nbsp;\tilde{S}_{j,k}&nbsp;(&nbsp;\alpha&nbsp;&nbsp;)&nbsp;<br>
&amp;&nbsp;=&nbsp;&amp;<br>
-&nbsp;[&nbsp;\tilde{\iota}_{j,k}&nbsp;(&nbsp;\alpha&nbsp;)&nbsp;+&nbsp;\tilde{\omega}_{j,k}&nbsp;(&nbsp;\alpha&nbsp;)&nbsp;]&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\;&nbsp;\tilde{S}_{j,k}&nbsp;(&nbsp;\alpha&nbsp;)&nbsp;<br>
+&nbsp;\tilde{\rho}_{j,k}&nbsp;(&nbsp;\alpha&nbsp;)&nbsp;\;&nbsp;\tilde{C}_{j,k}&nbsp;(&nbsp;\alpha&nbsp;)<br>
\\<br>
\partial_&nbsp;\alpha&nbsp;&nbsp;\tilde{C}_{j,k}&nbsp;(&nbsp;&nbsp;\alpha&nbsp;&nbsp;)&nbsp;<br>
&amp;&nbsp;=&nbsp;&amp;<br>
\tilde{\iota}_{j,k}&nbsp;(&nbsp;\alpha&nbsp;)&nbsp;\;&nbsp;\tilde{S}_{j,k}&nbsp;(&nbsp;\alpha&nbsp;)&nbsp;<br>
-&nbsp;[&nbsp;&nbsp;\tilde{\rho}_{j,k}&nbsp;(&nbsp;\alpha&nbsp;)&nbsp;+&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\tilde{\omega}_{j,k}&nbsp;(&nbsp;\alpha&nbsp;)&nbsp;+&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\tilde{\chi}_{j,k}&nbsp;(&nbsp;\alpha&nbsp;)&nbsp;]&nbsp;\;&nbsp;\tilde{C}_{j,k}&nbsp;(&nbsp;\alpha&nbsp;)<br>
\end{array}<br>
\]&nbsp;</span></code>

The parameter
<a href="#5.1.h.a">5.1.h.a: <span style='white-space: nowrap'>max_ode_step</span></a>
 
determines how accurately we approximate the solution of this ODE;
i.e., <code>
<span style='white-space: nowrap'>&nbsp;\tilde{s}_{j,k}^q&nbsp;(&nbsp;\alpha&nbsp;)</span></code>
 for <code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;0,&nbsp;1</span></code>
.
We define the first order age residuals 
for <code>
<span style='white-space: nowrap'>&nbsp;S</span></code>
 (<code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;0</span></code>
)
and for <code>
<span style='white-space: nowrap'>&nbsp;C</span></code>
 (<code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;1</span></code>
)
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
A_{j,k}^{q,1}&nbsp;(&nbsp;s_G&nbsp;)&nbsp;<br>
=<br>
R&nbsp;\left(&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\tilde{s}_{j,k}^q&nbsp;(&nbsp;&nbsp;a_{j+1}&nbsp;)&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\W{,}&nbsp;s_{j+1,k}&nbsp;\W{,}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\zeta_{j,k}^{q,a}&nbsp;<br>
\right)<br>
%<br>
\W{\Leftarrow}&nbsp;(j+1,k)&nbsp;\in&nbsp;G&nbsp;<br>
\]&nbsp;</span></code>

For <code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;2&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;Q-1</span></code>
, we define the 
first order age residual functions
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
A_{j,k}^{q,1}&nbsp;(&nbsp;s_G&nbsp;)&nbsp;<br>
=<br>
R&nbsp;\left(&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_{j+1,k}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\W{,}&nbsp;s_{j,k}^q&nbsp;\W{,}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\zeta_{j,k}^{q,a}&nbsp;<br>
\right)<br>
%<br>
\W{\Leftarrow}&nbsp;(j+1,k)&nbsp;\in&nbsp;G&nbsp;<br>
\]&nbsp;</span></code>

For <code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;2,&nbsp;\ldots,&nbsp;Q-1</span></code>
,
we define the second order age residual functions
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
A_{j,k}^{q,2}&nbsp;(&nbsp;s_G&nbsp;)&nbsp;<br>
=<br>
\left[&nbsp;<br>
\frac{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R&nbsp;\left(&nbsp;s_{j+2,k}&nbsp;\W{,}&nbsp;s_{j+1,k}^q&nbsp;\W{,}&nbsp;\zeta_{j,k}^{q,a}&nbsp;\right)<br>
}{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_{j+2}&nbsp;-&nbsp;a_{j+1}&nbsp;<br>
}<br>
-<br>
\frac{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R&nbsp;\left(&nbsp;s_{j+1,k}&nbsp;\W{,}&nbsp;s_{j,k}^q&nbsp;\W{,}&nbsp;\zeta_{j,k}^{q,a}&nbsp;\right)<br>
}{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_{j+1}&nbsp;-&nbsp;a_{j}&nbsp;<br>
}<br>
\right]<br>
%<br>
\W{\Leftarrow}&nbsp;(j+2,k)&nbsp;\in&nbsp;G&nbsp;<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="5.1.o.e" id="5.1.o.e">5.1.o.e: age_scaled</a></b>
<br>
The return the value of 

<code><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].age_scaled<br>
</span></font></code>
is set to the scaled age residual which is defined by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\left\{&nbsp;\begin{array}{ll}<br>
A_{j,k}^{q,1}&nbsp;(&nbsp;s_G&nbsp;)&nbsp;/&nbsp;\sigma_{j,k}^{q,a}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;\R{if}&nbsp;\;&nbsp;o_{j,k}^{q,a}&nbsp;=&nbsp;1&nbsp;\W{\R{and}}&nbsp;0&nbsp;&lt;&nbsp;\sigma_{j,k}^{q,a}&nbsp;&lt;&nbsp;+&nbsp;\infty<br>
\\<br>
A_{j,k}^{q,2}&nbsp;(&nbsp;s_G&nbsp;)&nbsp;/&nbsp;\sigma_{j,k}^{q,a}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;\R{if}&nbsp;\;&nbsp;o_{j,k}^{q,a}&nbsp;=&nbsp;2&nbsp;\W{\R{and}}&nbsp;0&nbsp;&lt;&nbsp;\sigma_{j,k}^{q,a}&nbsp;&lt;&nbsp;+&nbsp;\infty<br>
\\<br>
\R{nan}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;\R{Otherwise}<br>
\end{array}&nbsp;\right.<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="5.1.o.f" id="5.1.o.f">5.1.o.f: cohort_residual</a></b>
<br>
The return value of

<code><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].cohort_residual<br>
</span></font></code>
is set to the age residual <code>
<span style='white-space: nowrap'>&nbsp;B_{j,k}^{q,o}&nbsp;(s)</span></code>
 (defined below).
For <code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;Q-1</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
B_{j,k}^{q,1}&nbsp;(&nbsp;s_G&nbsp;)&nbsp;=&nbsp;\R{nan}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\W{\Leftarrow}&nbsp;&nbsp;(j,k+1)&nbsp;\;&nbsp;\R{not&nbsp;\;&nbsp;in}&nbsp;\;&nbsp;G&nbsp;<br>
\]&nbsp;</span></code>

<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
B_{j,k}^{q,2}&nbsp;(&nbsp;s_G&nbsp;)&nbsp;=&nbsp;\R{nan}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\W{\Leftarrow}&nbsp;(j,k+2)&nbsp;\;&nbsp;\R{not&nbsp;\;&nbsp;in}&nbsp;\;&nbsp;G&nbsp;<br>
\]&nbsp;</span></code>

We define the first order cohort residual functions
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
B_{j,k}^{q,1}&nbsp;(&nbsp;s_G&nbsp;)&nbsp;<br>
=<br>
R&nbsp;\left(&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_{j,k+1}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\W{,}&nbsp;s_{j,k}^q&nbsp;\W{,}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\zeta_{j,k}^{q,a}&nbsp;<br>
\right)<br>
%<br>
\W{\Leftarrow}&nbsp;(j,&nbsp;k+1)&nbsp;\in&nbsp;G&nbsp;<br>
\]&nbsp;</span></code>

We define the second order age residual functions
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
B_{j,k}^{q,2}&nbsp;(&nbsp;s_G&nbsp;)&nbsp;<br>
=<br>
\left[&nbsp;<br>
\frac{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R&nbsp;\left(&nbsp;s_{j,k+2}&nbsp;\W{,}&nbsp;s_{j,k+1}^q&nbsp;\W{,}&nbsp;\zeta_{j,k}^{q,a}&nbsp;\right)<br>
}{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c_{k+2}&nbsp;-&nbsp;c_{k+1}&nbsp;<br>
}<br>
-<br>
\frac{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R&nbsp;\left(&nbsp;s_{j,k+1}&nbsp;\W{,}&nbsp;s_{j,k}^q&nbsp;\W{,}&nbsp;\zeta_{j,k}^{q,a}&nbsp;\right)<br>
}{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c_{k+1}&nbsp;-&nbsp;c_{k}&nbsp;<br>
}<br>
\right]<br>
%<br>
\W{\Leftarrow}&nbsp;(j,&nbsp;k+2)&nbsp;\in&nbsp;G&nbsp;<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="5.1.o.g" id="5.1.o.g">5.1.o.g: cohort_scaled</a></b>
<br>
The return the value of 

<code><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].cohort_scaled<br>
</span></font></code>
is set to the scaled age residual which is defined by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\left\{&nbsp;\begin{array}{ll}<br>
B_{j,k}^{q,1}&nbsp;(&nbsp;s_G&nbsp;)&nbsp;/&nbsp;\sigma_{j,k}^{q,c}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;\R{if}&nbsp;\;&nbsp;o_{j,k}^{q,c}&nbsp;=&nbsp;1&nbsp;\W{\R{and}}&nbsp;0&nbsp;&lt;&nbsp;\sigma_{j,k}^{q,c}&nbsp;&lt;&nbsp;+&nbsp;\infty<br>
\\<br>
B_{j,k}^{q,2}&nbsp;(&nbsp;s_G&nbsp;)&nbsp;/&nbsp;\sigma_{j,k}^{q,c}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;\R{if}&nbsp;\;&nbsp;o_{j,k}^{q,c}&nbsp;=&nbsp;2&nbsp;\W{\R{and}}&nbsp;0&nbsp;&lt;&nbsp;\sigma_{j,k}^{q,c}&nbsp;&lt;&nbsp;+&nbsp;\infty<br>
\\<br>
\R{nan}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;\R{Otherwise}<br>
\end{array}&nbsp;\right.<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="5.1.o.h" id="5.1.o.h">5.1.o.h: cross_residual</a></b>
<br>
The return value of

<code><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].cross_residual<br>
</span></font></code>
is set to the age residual <code>
<span style='white-space: nowrap'>&nbsp;D_{j,k}^q&nbsp;(s)</span></code>
 (defined below).
For <code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;Q-1</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
D_{j,k}^q&nbsp;(&nbsp;s_G&nbsp;)&nbsp;=&nbsp;\R{nan}&nbsp;\W{\Leftarrow}&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(j,k+1)&nbsp;\;&nbsp;\R{or}&nbsp;\;&nbsp;(j+1,k)&nbsp;\;&nbsp;\R{or}&nbsp;\;&nbsp;(j+1,k+1)&nbsp;\;&nbsp;\R{not&nbsp;\;&nbsp;in}&nbsp;\;&nbsp;G&nbsp;<br>
\]&nbsp;</span></code>

otherwise
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
D_{j,k}^q&nbsp;(&nbsp;s_G&nbsp;)&nbsp;<br>
=<br>
\frac{&nbsp;<br>
R&nbsp;\left(&nbsp;s^q_{j+1,k+1}&nbsp;\W{,}&nbsp;s^q_{j+1,k}&nbsp;\W{,}&nbsp;\zeta_{j,k}^{q,d}&nbsp;\right)<br>
-<br>
R&nbsp;\left(&nbsp;s^q_{j,k+1}&nbsp;\W{,}&nbsp;s^q_{j,k}&nbsp;\W{,}&nbsp;\zeta_{j,k}^{q,d}&nbsp;\right)<br>
}{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\sqrt{(&nbsp;c_{k+1}&nbsp;-&nbsp;c_k&nbsp;)&nbsp;(&nbsp;a_{j+1}&nbsp;-&nbsp;a_j&nbsp;)&nbsp;}<br>
}<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="5.1.o.i" id="5.1.o.i">5.1.o.i: cross_scaled</a></b>
<br>
The return the value of 

<code><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sfun_out</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>].cross_scaled<br>
</span></font></code>
is set to the scaled age residual which is defined by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\left\{&nbsp;\begin{array}{ll}<br>
D_{j,k}^q&nbsp;(&nbsp;s_G&nbsp;)&nbsp;/&nbsp;\sigma_{j,k}^{q,d}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;\R{if}&nbsp;\;&nbsp;0&nbsp;&lt;&nbsp;\sigma_{j,k}^{q,c}&nbsp;&lt;&nbsp;+&nbsp;\infty<br>
\\<br>
\R{nan}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;\R{Otherwise}<br>
\end{array}&nbsp;\right.<br>
\]&nbsp;</span></code>




<br>
<br>
<b><big><a name="5.1.p" id="5.1.p">5.1.p: measure_out</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>measure_out</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dismod_pde::vector&lt;dismod_pde::Measure_Output_Struct&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_out</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and it has size <code>
<span style='white-space: nowrap'>&nbsp;L</span></code>
.
The input value of its elements does not matter.
Upon return,
For <code>
<span style='white-space: nowrap'>&nbsp;\ell&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;L-1</span></code>
, the value of 

<code><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_out</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>].</span></font><i><font color="black"><span style='white-space: nowrap'>field_name</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
has been set as follows:
<ol type="1"><li>
<a href="#5.1.p.b">5.1.p.b: <span style='white-space: nowrap'>model</span></a>
,
is the value that 
<a href="#5.1.o.a">5.1.o.a: <span style='white-space: nowrap'>estimate</span></a>
 and
<a href="#5.1.n">5.1.n: <span style='white-space: nowrap'>effect_out</span></a>

predict for the integrand; i.e. <code>
<span style='white-space: nowrap'>&nbsp;\bar{I}_\ell&nbsp;(s)</span></code>
.
</li><li>

<a href="#5.1.p.a">5.1.p.a: <span style='white-space: nowrap'>adjusted</span></a>
,
is the value that 
<a href="#5.1.n">5.1.n: <span style='white-space: nowrap'>effect_out</span></a>

yields for the covariate adjusted measurements <code>
<span style='white-space: nowrap'>&nbsp;Z_\ell&nbsp;(&nbsp;\beta&nbsp;)</span></code>
.
</li><li>

<a href="#5.1.p.c">5.1.p.c: <span style='white-space: nowrap'>residual</span></a>
,
is the log transformed measurement minus the log transformed model
</li><li>

<a href="#5.1.p.d">5.1.p.d: <span style='white-space: nowrap'>scaled</span></a>
,
is a scaled version of the residual. 
</li></ol>


<br>
<br>
<b><a name="5.1.p.a" id="5.1.p.a">5.1.p.a: adjusted</a></b>
<br>
Let <code>
<span style='white-space: nowrap'>&nbsp;\beta</span></code>
 be the vector of covariate effects
corresponding to the 
<a href="#5.1.n">5.1.n: <span style='white-space: nowrap'>effect_out</span></a>
.
We define the covariate adjusted measurement function by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
\delta&nbsp;(&nbsp;\ell&nbsp;,&nbsp;m&nbsp;)&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;\left\{&nbsp;\begin{array}{ll}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&amp;&nbsp;\R{if}&nbsp;\;&nbsp;i(\ell)&nbsp;=&nbsp;i(m)&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&amp;&nbsp;\R{otherwise}<br>
\end{array}&nbsp;\right.<br>
\\<br>
Z_\ell&nbsp;(&nbsp;\beta&nbsp;)&nbsp;&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;z_\ell&nbsp;\;&nbsp;\exp&nbsp;\left(&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;\sum_{m=0}^{M-1}&nbsp;\delta&nbsp;(&nbsp;\ell,&nbsp;m&nbsp;)&nbsp;X_{\ell,&nbsp;n(m)}&nbsp;\beta_m&nbsp;<br>
\right)<br>
\end{array}<br>
\]&nbsp;</span></code>

See 
<a href="#5.1.k">5.1.k: <span style='white-space: nowrap'>covariate_value</span></a>
 for the definition
of <code>
<span style='white-space: nowrap'>&nbsp;X</span></code>
,
<a href="#5.1.m.a">5.1.m.a: <span style='white-space: nowrap'>effect_in</span></a>
 for the definition
of the integrand index <code>
<span style='white-space: nowrap'>&nbsp;i(m)</span></code>
, and
<a href="#5.1.l.a">5.1.l.a: <span style='white-space: nowrap'>measure_in</span></a>
 for the definition
of the integrand index <code>
<span style='white-space: nowrap'>&nbsp;i(\ell)</span></code>
.
The return value of

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_out</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>].adjusted<br>
</span></font></code>
is equal to <code>
<span style='white-space: nowrap'>&nbsp;Z_\ell&nbsp;(&nbsp;\beta&nbsp;)</span></code>
.

<br>
<br>
<b><a name="5.1.p.b" id="5.1.p.b">5.1.p.b: model</a></b>
<br>
Let <code>
<span style='white-space: nowrap'>&nbsp;s_G</span></code>
 be the stochastic functions,
on the computational grid <code>
<span style='white-space: nowrap'>&nbsp;G</span></code>
,
corresponding to the final
<a href="#5.1.o.a">5.1.o.a: <span style='white-space: nowrap'>estimate</span></a>
.
The return value of

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_out</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>].model<br>
</span></font></code>
is given by <code>
<span style='white-space: nowrap'>&nbsp;\bar{I}_\ell&nbsp;(&nbsp;s_G&nbsp;)</span></code>
 defined below:
<code><span style='white-space: nowrap'><br>
<br>
</span></code>The midpoints for the age and time limits are denoted by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
\bar{a}_\ell&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;(&nbsp;a_{l,\ell}&nbsp;+&nbsp;a_{u,\ell}&nbsp;)&nbsp;/&nbsp;2<br>
\\<br>
\bar{t}_\ell&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;(&nbsp;t_{l,\ell}&nbsp;+&nbsp;t_{u,\ell}&nbsp;)&nbsp;/&nbsp;2<br>
\end{array}<br>
\]&nbsp;</span></code>

The indices <code>
<span style='white-space: nowrap'>&nbsp;\jmath&nbsp;(&nbsp;\ell&nbsp;)</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;\underline{\kappa}(&nbsp;\ell&nbsp;)</span></code>
, and
<code>
<span style='white-space: nowrap'>&nbsp;\overline{\kappa}(&nbsp;\ell&nbsp;)</span></code>
 are defined by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
a_{\jmath&nbsp;(\ell)}&nbsp;\leq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;\bar{a}_\ell&nbsp;&amp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&nbsp;&nbsp;a_{&nbsp;\jmath(\ell)+1}<br>
\\<br>
c_{\underline{\kappa}(\ell)}&nbsp;\leq<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;\bar{t}_\ell&nbsp;-&nbsp;a_{\jmath&nbsp;(\ell)}&nbsp;&amp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&nbsp;c_{\underline{\kappa}(\ell)&nbsp;+&nbsp;1}&nbsp;<br>
\\<br>
c_{\overline{\kappa}(\ell)}&nbsp;\leq<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;\bar{t}_\ell&nbsp;-&nbsp;a_{\jmath&nbsp;(\ell)+1}&nbsp;&amp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&nbsp;c_{\overline{\kappa}(\ell)&nbsp;+&nbsp;1}&nbsp;<br>
\end{array}<br>
\]&nbsp;</span></code>

The notation <code>
<span style='white-space: nowrap'>&nbsp;i(&nbsp;\ell&nbsp;)</span></code>
 is the integrand index for 
the <code>
<span style='white-space: nowrap'>&nbsp;\ell</span></code>
-th measurement;
see <a href="#5.1.l.a">5.1.l.a: <span style='white-space: nowrap'>integrand</span></a>
.
We define <code>
<span style='white-space: nowrap'>&nbsp;\bar{I}_\ell&nbsp;(s)&nbsp;</span></code>
 as the bilinear interpolant 
of <code>
<span style='white-space: nowrap'>&nbsp;I^{i(\ell)}&nbsp;(&nbsp;\cdot&nbsp;)</span></code>
,
with respect to age and time, 
evaluated at age <code>
<span style='white-space: nowrap'>&nbsp;\bar{a}_\ell</span></code>
 and time <code>
<span style='white-space: nowrap'>&nbsp;\bar{t}_\ell</span></code>
.
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
\bar{I}_\ell&nbsp;(&nbsp;s_G&nbsp;)<br>
&amp;&nbsp;=&nbsp;&amp;<br>
I_{\jmath&nbsp;(&nbsp;\ell&nbsp;)&nbsp;,&nbsp;\underline{\kappa}&nbsp;(&nbsp;\ell&nbsp;)}&nbsp;^{i(&nbsp;\ell&nbsp;)&nbsp;}<br>
(&nbsp;s_G&nbsp;)<br>
\frac{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_{&nbsp;\jmath&nbsp;(&nbsp;\ell&nbsp;)&nbsp;+&nbsp;1&nbsp;}&nbsp;-&nbsp;\bar{a}_\ell<br>
}{&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_{&nbsp;\jmath&nbsp;(&nbsp;\ell&nbsp;)&nbsp;+&nbsp;1&nbsp;}&nbsp;-&nbsp;&nbsp;a_{&nbsp;\jmath&nbsp;(&nbsp;\ell&nbsp;)&nbsp;}<br>
}<br>
\frac{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_{\jmath(&nbsp;\ell&nbsp;)}&nbsp;+&nbsp;c_{\underline{\kappa}&nbsp;(&nbsp;\ell&nbsp;)&nbsp;+&nbsp;1}&nbsp;-&nbsp;&nbsp;\bar{t}_\ell<br>
}{&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c_{&nbsp;\underline{\kappa}&nbsp;(&nbsp;\ell&nbsp;)&nbsp;+&nbsp;1&nbsp;}&nbsp;-&nbsp;&nbsp;c_{&nbsp;\underline{\kappa}&nbsp;(&nbsp;\ell&nbsp;)&nbsp;}<br>
}<br>
\\<br>
&amp;&nbsp;+&nbsp;&amp;<br>
I_{\jmath&nbsp;(&nbsp;\ell&nbsp;),&nbsp;\underline{\kappa}&nbsp;(&nbsp;\ell&nbsp;)&nbsp;+&nbsp;1}^{i(&nbsp;\ell&nbsp;)&nbsp;}<br>
(&nbsp;s_G&nbsp;)<br>
\frac{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_{&nbsp;\jmath&nbsp;(&nbsp;\ell&nbsp;)&nbsp;}&nbsp;-&nbsp;\bar{a}_\ell<br>
}{&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_{&nbsp;\jmath&nbsp;(&nbsp;\ell&nbsp;)&nbsp;+&nbsp;1&nbsp;}&nbsp;-&nbsp;&nbsp;a_{&nbsp;\jmath&nbsp;(&nbsp;\ell&nbsp;)&nbsp;}<br>
}<br>
\frac{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\bar{t}_\ell&nbsp;-&nbsp;a_{\jmath&nbsp;(&nbsp;\ell&nbsp;)}&nbsp;-&nbsp;c_{\underline{\kappa}&nbsp;(&nbsp;\ell&nbsp;)}<br>
}{&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c_{&nbsp;\underline{\kappa}&nbsp;(&nbsp;\ell&nbsp;)&nbsp;+&nbsp;1&nbsp;}&nbsp;-&nbsp;&nbsp;c_{&nbsp;\underline{\kappa}&nbsp;(&nbsp;\ell&nbsp;)&nbsp;}<br>
}<br>
\\<br>
&amp;&nbsp;+&nbsp;&amp;<br>
I_{\jmath&nbsp;(&nbsp;\ell&nbsp;)&nbsp;+&nbsp;1&nbsp;,&nbsp;\overline{\kappa}&nbsp;(&nbsp;\ell&nbsp;)}&nbsp;^{i(&nbsp;\ell&nbsp;)&nbsp;}<br>
(&nbsp;s_G&nbsp;)<br>
\frac{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\bar{a}_\ell&nbsp;-&nbsp;a_{&nbsp;\jmath&nbsp;(&nbsp;\ell&nbsp;)&nbsp;}<br>
}{&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_{&nbsp;\jmath&nbsp;(&nbsp;\ell&nbsp;)&nbsp;+&nbsp;1&nbsp;}&nbsp;-&nbsp;&nbsp;a_{&nbsp;\jmath&nbsp;(&nbsp;\ell&nbsp;)&nbsp;}<br>
}<br>
\frac{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_{\jmath&nbsp;(&nbsp;\ell&nbsp;)+1}&nbsp;+&nbsp;c_{\overline{\kappa}&nbsp;(&nbsp;\ell&nbsp;)+1}&nbsp;-&nbsp;&nbsp;\bar{t}_\ell<br>
}{&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c_{\overline{\kappa}&nbsp;(&nbsp;\ell&nbsp;)+1}&nbsp;-&nbsp;&nbsp;c_{\overline{\kappa}(&nbsp;\ell&nbsp;)}<br>
}<br>
\\<br>
&amp;&nbsp;+&nbsp;&amp;<br>
I_{\jmath&nbsp;(&nbsp;\ell&nbsp;)&nbsp;+&nbsp;1&nbsp;,&nbsp;\overline{\kappa}&nbsp;(&nbsp;\ell&nbsp;)&nbsp;+&nbsp;1}^{i(&nbsp;\ell&nbsp;)&nbsp;}<br>
(&nbsp;s_G&nbsp;)<br>
\frac{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\bar{a}_\ell&nbsp;-&nbsp;a_{&nbsp;\jmath&nbsp;(&nbsp;\ell&nbsp;)&nbsp;}<br>
}{&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_{&nbsp;\jmath&nbsp;(&nbsp;\ell&nbsp;)&nbsp;+&nbsp;1&nbsp;}&nbsp;-&nbsp;&nbsp;a_{&nbsp;\jmath&nbsp;(&nbsp;\ell&nbsp;)&nbsp;}<br>
}<br>
\frac{&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\bar{t}_\ell&nbsp;-&nbsp;&nbsp;a_{\jmath&nbsp;(&nbsp;\ell&nbsp;)+1}&nbsp;-&nbsp;c_{\overline{\kappa}&nbsp;(&nbsp;\ell&nbsp;)}<br>
}{&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c_{\overline{\kappa}&nbsp;(&nbsp;\ell&nbsp;)+1}&nbsp;-&nbsp;&nbsp;c_{\overline{\kappa}(&nbsp;\ell&nbsp;)}<br>
}<br>
\end{array}<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="5.1.p.c" id="5.1.p.c">5.1.p.c: residual</a></b>
<br>
For <code>
<span style='white-space: nowrap'>&nbsp;\ell&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;L-1</span></code>
,
we use <code>
<span style='white-space: nowrap'>&nbsp;R_\ell&nbsp;(&nbsp;s_G&nbsp;,&nbsp;\beta&nbsp;)</span></code>
 to denote the measurement residuals 
which are defined by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
R_\ell&nbsp;(&nbsp;s_G&nbsp;,&nbsp;\beta&nbsp;)&nbsp;&nbsp;<br>
=&nbsp;&nbsp;<br>
R&nbsp;\left[&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Z_\ell&nbsp;(&nbsp;\beta&nbsp;)&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\W{,}&nbsp;\bar{I}_\ell&nbsp;(&nbsp;s_G&nbsp;)&nbsp;\W{,}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\zeta_\ell&nbsp;<br>
\right]<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="5.1.p.d" id="5.1.p.d">5.1.p.d: scaled</a></b>
<br>
For <code>
<span style='white-space: nowrap'>&nbsp;\ell&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;L-1</span></code>
,
the scaled residual is defined by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\left\{&nbsp;\begin{array}{ll}&nbsp;<br>
R_\ell(&nbsp;s_G&nbsp;,&nbsp;\beta&nbsp;)&nbsp;/&nbsp;\sigma_\ell&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;\R{if}&nbsp;\;&nbsp;0&nbsp;&lt;&nbsp;\sigma_\ell&nbsp;&lt;&nbsp;+&nbsp;\infty<br>
\\<br>
\R{nan}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;\R{otherwise}<br>
\end{array}&nbsp;\right.<br>
\]&nbsp;</span></code>




<br>
<br>
<b><big><a name="5.1.q" id="5.1.q">5.1.q: message</a></big></b>
<br>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>message</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::string&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>message</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Upon return, it has one of the following values:
<code><font color='blue'><pre style='display:inline'> 
	&quot;optimize: failed for unknown reason&quot;
	&quot;optimize: success&quot;
	&quot;optimize: estimate is not as accurate as desired&quot;
	&quot;optimize: maximum number of iterations exceeded&quot;
	&quot;optimize: stopped because step size was to small&quot;
	&quot;optimize: stopped because estimate was diverging&quot;
</pre></font></code>


<br>
<br>
<b><big><a name="5.1.r" id="5.1.r">5.1.r: MAP Optimization</a></big></b>


<br>
<br>
<b><a name="5.1.r.a" id="5.1.r.a">5.1.r.a: Objective</a></b>
<br>
The MAP objective corresponding to the residuals and likelihoods above is
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
f(&nbsp;s_G&nbsp;,&nbsp;\beta&nbsp;)<br>
&amp;&nbsp;=&nbsp;&amp;&nbsp;<br>
\sum_{(j,k)&nbsp;\in&nbsp;G}&nbsp;<br>
\sum_{q=0}^5<br>
H&nbsp;\left[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A^{q,o}_{j,k}&nbsp;(&nbsp;s_G&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\W{,}&nbsp;\sigma^{q,a}_{j,k}&nbsp;\W{,}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h^{q,a}_{j,k}&nbsp;<br>
\right]&nbsp;<br>
+<br>
H&nbsp;\left[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B^{q,o}_{j,k}&nbsp;(&nbsp;s_G&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\W{,}&nbsp;\sigma^{q,c}_{j,k}&nbsp;\W{,}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h^{q,c}_{j,k}&nbsp;<br>
\right]&nbsp;<br>
\\<br>
&amp;&nbsp;+&nbsp;&amp;<br>
\sum_{(j,k)&nbsp;\in&nbsp;G}&nbsp;<br>
\sum_{q=0}^5<br>
H&nbsp;\left[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D^q_{j,k}&nbsp;(&nbsp;s_G&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\W{,}&nbsp;\sigma^{q,d}_{j,k}&nbsp;\W{,}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h^{q,d}_{j,k}&nbsp;<br>
\right]&nbsp;<br>
+<br>
\sum_{(j,k)&nbsp;\in&nbsp;G}&nbsp;<br>
\sum_{q=0}^5<br>
H&nbsp;\left[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P^q_{j,k}&nbsp;(&nbsp;s_G&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\W{,}&nbsp;\sigma^{q,p}_{j,k}&nbsp;\W{,}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h^{q,p}_{j,k}&nbsp;<br>
\right]&nbsp;<br>
\\<br>
&amp;&nbsp;+&nbsp;&amp;<br>
\sum_{\ell&nbsp;=&nbsp;1}^L&nbsp;<br>
H&nbsp;\left[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R_\ell&nbsp;(&nbsp;s_G&nbsp;,&nbsp;\beta&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\W{,}&nbsp;\sigma_\ell&nbsp;\W{,}&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h_\ell&nbsp;<br>
\right]&nbsp;<br>
\end{array}<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="5.1.r.b" id="5.1.r.b">5.1.r.b: Problem</a></b>
<br>
The return 
<a href="#5.1.o.a">5.1.o.a: <span style='white-space: nowrap'>estimate</span></a>
 <code>
<span style='white-space: nowrap'>&nbsp;s_G</span></code>
 and
<a href="#5.1.n">5.1.n: <span style='white-space: nowrap'>effect_out</span></a>
 <code>
<span style='white-space: nowrap'>&nbsp;\beta</span></code>
 are approximate
solutions of the MAP estimate problem
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rll}<br>
\R{minimize}&nbsp;&amp;&nbsp;<br>
f&nbsp;(&nbsp;s_G&nbsp;,&nbsp;\beta&nbsp;)&nbsp;\W{\R{w.r.t}}&nbsp;(&nbsp;s_G&nbsp;,&nbsp;\beta&nbsp;)&nbsp;<br>
\\<br>
\R{subject&nbsp;\;&nbsp;to}&nbsp;&amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_G^l&nbsp;\leq&nbsp;&nbsp;s_G&nbsp;\leq&nbsp;s_G^u&nbsp;\W{\R{and}}&nbsp;\beta^l&nbsp;\leq&nbsp;\beta&nbsp;\leq&nbsp;\beta^u<br>
\end{array}<br>
\]&nbsp;</span></code>

The optimization is done with respect to the re-scaled variables
<code>
<span style='white-space: nowrap'>&nbsp;\bar{s}_G</span></code>
; see
<a href="#5.1.j.a">5.1.j.a: <span style='white-space: nowrap'>optimize_zeta</span></a>
.



<br>
<br>
<b><big><a name="5.1.s" id="5.1.s">5.1.s: Example</a></big></b>
<br>
The file <a href="#5.1.2">5.1.2: <span style='white-space: nowrap'>optimize_xam.cpp</span></a>
 contains an example and test
of <code><font color="blue">optimize</font></code>.
It returns true if <code><font color="blue">optimize</font></code> passes the test
and false if it fails.
The file <a href="#5.1.3">5.1.3: <span style='white-space: nowrap'>dismoditis.cpp</span></a>
 is another example and test
of <code><font color="blue">optimize</font></code>.


<hr>Input File: cpp/dismod_pde/optimize.hpp

<hr>



<center><b><big><big><a name="5.1.1" id="5.1.1">5.1.1: Description of Ipopt Tracing Output</a>
</big></big></b></center>
<br>
<b><big><a name="5.1.1.a" id="5.1.1.a">5.1.1.a: iter</a></big></b>
<br>
The current iteration count. 
This includes regular iterations and iterations during the restoration phase.
If the algorithm is in the restoration phase, 
the letter r will be appended to the iteration number.

<br>
<br>
<b><big><a name="5.1.1.b" id="5.1.1.b">5.1.1.b: objective</a></big></b>
<br>
The unscaled objective value at the current point. 
During the restoration phase, this value remains the unscaled objective 
value for the original problem.

<br>
<br>
<b><big><a name="5.1.1.c" id="5.1.1.c">5.1.1.c: inf_pr</a></big></b>
<br>
The unscaled constraint violation at the current point. 
This quantity is the infinity-norm (max) of the (unscaled) constraint
violation for <code>
<span style='white-space: nowrap'>&nbsp;g(x)</span></code>
 in the Ipopt documentation.
During the restoration phase, this value remains the constraint
violation of the original problem at the current point. 
The option <code><font color="blue">inf_pr_output</font></code> can be used to switch to the printing of 
a different quantity.

<br>
<br>
<b><big><a name="5.1.1.d" id="5.1.1.d">5.1.1.d: inf_du</a></big></b>
<br>
The scaled dual infeasibility at the current point. 
This quantity measure the infinity-norm (max) of the 
internal dual infeasibility, i.e, the derivative of the lagragian
with respect to the primal variables
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nabla&nbsp;f(x)&nbsp;\nabla&nbsp;c(x)&nbsp;\lambda&nbsp;-&nbsp;z&nbsp;<br>
\]</span></code>

where <code>
<span style='white-space: nowrap'>&nbsp;z&nbsp;</span></code>
 are the lagrange multipliers for the box constraints and
<code>
<span style='white-space: nowrap'>&nbsp;c(x)&nbsp;</span></code>
 are the nonlinear equality constraints 
(inequality constraints are reformulated using slack variables 
and problem scaling). 
During the restoration phase,
this is the value of the dual infeasibility for the restoration phase problem.

<br>
<br>
<b><big><a name="5.1.1.e" id="5.1.1.e">5.1.1.e: lg(mu)</a></big></b>

<br>
<code>
<span style='white-space: nowrap'>&nbsp;\log_10</span></code>
 of the value of the barrier parameter <code>
<span style='white-space: nowrap'>&nbsp;\mu</span></code>
.

<br>
<br>
<b><big><a name="5.1.1.f" id="5.1.1.f">5.1.1.f: ||d||</a></big></b>
<br>
The infinity norm (max) of the primal step 
(for the original variables <code>
<span style='white-space: nowrap'>&nbsp;x</span></code>
 and the internal slack
variables <code>
<span style='white-space: nowrap'>&nbsp;s</span></code>
). 
During the restoration phase, 
this value includes the values of additional variables that 
capture the violation in <code>
<span style='white-space: nowrap'>&nbsp;c(x)&nbsp;=&nbsp;0</span></code>
.

<br>
<br>
<b><big><a name="5.1.1.g" id="5.1.1.g">5.1.1.g: lg(rg)</a></big></b>

<br>
<code>
<span style='white-space: nowrap'>&nbsp;\log_10</span></code>
 of the value of the regularization term for the Hessian 
of the Lagrangian in the augmented system.
A dash (-) indicates that no regularization was done.

<br>
<br>
<b><big><a name="5.1.1.h" id="5.1.1.h">5.1.1.h: alpha_du</a></big></b>
<br>
The step size for the dual variables for the box constraints in the
equality constrained formulation; i.e., <code>
<span style='white-space: nowrap'>&nbsp;z</span></code>
.

<br>
<br>
<b><big><a name="5.1.1.i" id="5.1.1.i">5.1.1.i: alpha_pr</a></big></b>
<br>
The step size for the primal variables 
<code>
<span style='white-space: nowrap'>&nbsp;x</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;\lambda</span></code>
 in the equality constrained formulation.
The number is usually followed by a character for additional diagnostic 
information regarding the step acceptance criterion.

<br>
<br>
<b><big><a name="5.1.1.j" id="5.1.1.j">5.1.1.j: ls</a></big></b>
<br>
The number of backtracking line search steps 
(does not include second-order correction steps).

<br>
<br>
<b><big><a name="5.1.1.k" id="5.1.1.k">5.1.1.k: Reference</a></big></b>
<br>
A. Wachter and L. T. Biegler.,
On the implementation of a primal-dual interior point 
filter line search algorithm for large-scale nonlinear programming.
Mathematical Programming, 106(1):25-57, 2006. 


<hr>Input File: omh/ipopt_trace.omh

<hr>



<center><b><big><big><a name="5.1.2" id="5.1.2">5.1.2: Example and Test of dismod_pde C++ Optimize Procedure</a>
</big></big></b></center>
<br>
<b><big><a name="5.1.2.a" id="5.1.2.a">5.1.2.a: Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;optimize_xam(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_age</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_cohort</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>likelihood</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)</span></font></code>


<br>
<br>
<b><big><a name="5.1.2.b" id="5.1.2.b">5.1.2.b: n_age</a></big></b>

<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>n_age</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_age</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
.
It specifies the number of points in the age grid for this test case.

<br>
<br>
<b><big><a name="5.1.2.c" id="5.1.2.c">5.1.2.c: n_cohort</a></big></b>

<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>n_cohort</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_cohort</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
.
It specifies the number of points in the cohort grid for this test case.

<br>
<br>
<b><big><a name="5.1.2.d" id="5.1.2.d">5.1.2.d: likelihood</a></big></b>

<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>likelihood</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dismod_pde::vector&lt;&nbsp;dismod_pde::Likelihood_Enum&nbsp;&gt;&nbsp;likelihood;<br>
</span></font></code>
<table><tr><td align='left'  valign='top'>

<code><i><font color="black"><span style='white-space: nowrap'>likelihood</span></font></i><font color="blue"><span style='white-space: nowrap'>[0]</span></font></code>
 </td><td align='left'  valign='top'>
 likelihood for even index direct prior 
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>likelihood</span></font></i><font color="blue"><span style='white-space: nowrap'>[1]</span></font></code>
 </td><td align='left'  valign='top'>
 likelihood for odd index direct prior 
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>likelihood</span></font></i><font color="blue"><span style='white-space: nowrap'>[2]</span></font></code>
 </td><td align='left'  valign='top'>
 likelihood for age residuals
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>likelihood</span></font></i><font color="blue"><span style='white-space: nowrap'>[4]</span></font></code>
 </td><td align='left'  valign='top'>
 likelihood for cohort residuals
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>likelihood</span></font></i><font color="blue"><span style='white-space: nowrap'>[4]</span></font></code>
 </td><td align='left'  valign='top'>
 likelihood for cross residuals
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>likelihood</span></font></i><font color="blue"><span style='white-space: nowrap'>[5]</span></font></code>
 </td><td align='left'  valign='top'>
 likelihood for measurements
</td></tr>
</table>
<br>
<b><big><a name="5.1.2.e" id="5.1.2.e">5.1.2.e: ok</a></big></b>
<br>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
</span></font></code>
If true, the <a href="#5.1">5.1: <span style='white-space: nowrap'>optimize</span></a>
 procedure returned a successful status; i.e.,
estimated values agreed with the simulated values.

<code><font color="blue">
<pre style='display:inline'> 
# include &lt;dismod_pde/dismod_pde.hpp&gt;
# include &lt;cmath&gt;
# include &lt;cstdlib&gt;
# include &lt;iomanip&gt;

// BEGIN empty namespace
namespace {

	// import the dismod_pde vector type
	using dismod_pde::vector;

	// import the dismod_pde stochastic function names
	using dismod_pde::S_enum;
	using dismod_pde::C_enum;
	using dismod_pde::iota_enum;
	using dismod_pde::rho_enum;
	using dismod_pde::chi_enum;
	using dismod_pde::omega_enum;

	// number of stochastic functions
	const size_t n_stochastic_ = dismod_pde::n_stochastic_enum;

	// get the stochastic functions at one grid point
	void get_state_i(
		const vector&lt;double&gt;&amp;          state       , 
		size_t                         i           , 
		double&amp;                        S_i         ,
		double&amp;                        C_i         ,
		double&amp;                        i_i         ,
		double&amp;                        r_i         ,
		double&amp;                        x_i         ,
		double&amp;                        u_i         )
	{
		S_i = state[ i * n_stochastic_ + S_enum ];
		C_i = state[ i * n_stochastic_ + C_enum ];
		i_i = state[ i * n_stochastic_ + iota_enum ];
		r_i = state[ i * n_stochastic_ + rho_enum ];
		x_i = state[ i * n_stochastic_ + chi_enum ];
		u_i = state[ i * n_stochastic_ + omega_enum ];
	}

	bool near_equal(double value, double check, double anorm)
	{	return fabs(value - check) &lt;= 1e-12 * anorm;
	}
		
}
// END empty namespace

bool optimize_xam(
	size_t n_age                                         , 
	size_t n_cohort                                      , 
	dismod_pde::vector&lt;dismod_pde::Likelihood_Enum&gt; likelihood )
{	// initialize return value
	bool ok = true;
	assert(n_age &gt; 2 );
	assert(n_cohort &gt; 3 );

	// simulation values for rate constants
	const double iota_sim = 1e-2;
	const double rho_sim  = 2e-2;
	const double chi_sim  = 3e-2;
	const double omega_sim= 4e-2;

	// some temporaries
	size_t i, j, k, ell;
	double S_j, C_j, iota_j, rho_j, chi_j, omega_j;
	double iota_jp, rho_jp, chi_jp, omega_jp;

	// limits on age
	double age_lower = 0.0;
	double age_upper = 40.;

	// grided values for age 
	vector&lt;double&gt; age(n_age);
	double delta_age = (age_upper - age_lower) / (n_age - 1);
	for(j = 1; j &lt; n_age-1; j++)
		age[j] = age_lower + delta_age * j;
	age[0] = age_lower;
	age[n_age-1] = age_upper;

	// limits on time
	double time_lower = 2000.;
	double time_upper = 2005.;

	// limits on cohort
	double cohort_lower = time_lower - age_upper;
	double cohort_upper = time_upper - age_lower;

	// grided values for cohort 
	double delta_cohort = (cohort_upper - cohort_lower) / (n_cohort - 1);
	vector&lt;double&gt; cohort(n_cohort);
	for(k = 1; k &lt; n_cohort-1; k++)
		cohort[k] = cohort_lower + k * delta_cohort;
	cohort[0]          = cohort_lower;
	cohort[n_cohort-1] = cohort_upper;

	// object that packs non-rectangular grid in a linear array
	dismod_pde::pair2index grid(age, cohort, time_lower, time_upper);

	// use differential equation to simulated value for 
	// variables S, C at all ages:
	vector&lt;double&gt; S_sim(n_age), C_sim(n_age);
	S_sim[0] = 1.;
	C_sim[0] = 0.;
	for(j = 0; j &lt; n_age-1; j++)
	{	// note same simulated value used for iota, rho, chi, omega below
		iota_j  = iota_jp = iota_sim;
		rho_j   = rho_jp  = rho_sim;
		chi_j   = chi_jp  = chi_sim;
		omega_j = omega_jp= omega_sim;
		// Use Huen's method and a small step size 
		// to get solution of ODE with no noise.
		size_t nstep = 200;
		double da    = (age[j+1] - age[j]) / nstep;
		double iota, rho, chi, omega, Sm, Cm;
		double S     = S_sim[j];
		double C     = C_sim[j];
		for(i = 0; i &lt; nstep; i++)
		{	iota = iota_j + (iota_jp - iota_j) * i / nstep; 
			rho  = rho_j  + (rho_jp  - rho_j)  * i / nstep; 
			chi  = chi_j  + (chi_jp  - chi_j) * i / nstep; 
			omega= omega_j+ (omega_jp- omega_j)   * i / nstep; 
			Sm   = S + (rho * C - (iota + omega) * S) * da / 2.;
			Cm   = C + (iota * S - (rho + omega + chi) * C) * da / 2.;
			S    = S + (rho * Cm - (iota + omega) * Sm) * da;
			C    = C + (iota * Sm - (rho + omega + chi) * Cm) * da;
		}
		S_sim[j+1] = S;
		C_sim[j+1] = C;
	}

	// simulate value for state vector
	size_t n_grid       = grid.size();
	size_t n_state      = n_stochastic_ * n_grid;
	vector&lt;double&gt; simulated(n_state); 
	for(i = 0; i &lt; n_grid; i++)
	{	// simulated values for the stochastic variables 
		// iota, rho, chi, and omega
		grid.unpack(j, k, i);
		simulated[ i * n_stochastic_ + S_enum ] = S_sim[j];
		simulated[ i * n_stochastic_ + C_enum ] = C_sim[j];
		// note no-noise case uses same value for 
		// iota, rho, chi, and omega as above
		simulated[ i * n_stochastic_ + iota_enum ] = iota_sim;
		simulated[ i * n_stochastic_ + rho_enum  ] = rho_sim;
		simulated[ i * n_stochastic_ + chi_enum  ] = chi_sim;
		simulated[ i * n_stochastic_ + omega_enum] = omega_sim;
	}
	// dismod_pde parameter structure
	dismod_pde::Optimize_Parameter_Struct parameter;

	// numbe of integration steps per age interval
	parameter.max_ode_step           = 1.;

	// level of printing during optimization
	parameter.print_level            = 0;

	// maximum number of optimizer iterations to attempt
	parameter.max_iteration          = 100;

	// optimizer convergence criteria
	parameter.converge_tolerance     = 1e-6;

	// extra debugging output 
	// (currently forces a retape every time the function argument changes)
	parameter.debug_output           = false;

	// the constant infinity
	const double infinity = DISMOD4_PLUS_INFINITY;

	// values specified for each computional grid point
	vector&lt;dismod_pde::Sfun_Input_Struct&gt; sfun_in(n_state);
	for(i = 0; i &lt; n_state; i++)
	{	// optimize
		sfun_in[i].optimize_zeta    = 1.0;
		sfun_in[i].optimize_lower   = 0.0;
		sfun_in[i].optimize_initial = .05; 
		sfun_in[i].optimize_upper   = infinity;
		// prior
		if( i % 2 == 0 )
			sfun_in[i].prior_like  = likelihood[0];
		else	sfun_in[i].prior_like  = likelihood[1];
		sfun_in[i].prior_zeta       = .1;
		sfun_in[i].prior_sigma      = .2;
		sfun_in[i].prior_mean       = simulated[i];

		// likelihood for residuals in age dir
		sfun_in[i].age_like              = likelihood[2];
		sfun_in[i].age_zeta              = .3;
		sfun_in[i].age_sigma             = .4;
		sfun_in[i].age_order             = 1;

		// likelihood for residuals in cohort dir
		sfun_in[i].cohort_like           = likelihood[3];
		sfun_in[i].cohort_zeta           = .5;
		sfun_in[i].cohort_sigma          = .6;
		sfun_in[i].cohort_order          = 1;

		// likelihood for cross term residuals
		sfun_in[i].cross_like            = likelihood[4];
		sfun_in[i].cross_zeta            = .7;
		sfun_in[i].cross_sigma           = .8;
	}
	// make ODE deterministic for S and C in the age direction
	for(i = 0; i &lt; n_grid; i++)
	{	grid.unpack(j, k, i);
		if( j == 0 )
		{	// initial condition for ODE
			sfun_in[i * n_stochastic_ + S_enum].prior_mean  = 1.;
			sfun_in[i * n_stochastic_ + S_enum].prior_sigma = 0.;
			//
			sfun_in[i * n_stochastic_ + C_enum].prior_mean  = 0.;
			sfun_in[i * n_stochastic_ + C_enum].prior_sigma = 0.;
		}
		// extra values corresponding to j(u, k) are not used
		sfun_in[i * n_stochastic_ + S_enum].age_sigma        = 0.;
		sfun_in[i * n_stochastic_ + C_enum].age_sigma        = 0.;
	}


	// determine the number of grid points where we can center a measurement
	size_t n_measure_point = 0;
	for(j = 1; j &lt; n_age-1; j++)
	{	for(k = 1; k &lt; n_cohort-1; k++)
		{	bool ok_mm   = grid.pack(j-1, k-1, i);
			bool ok_pp   = grid.pack(j+1, k+1, i);
			if( ok_mm &amp; ok_pp )
				++n_measure_point;
		}
	}

	// noiseless measurements corresponding to the simulated values
	size_t n_integrand = dismod_pde::n_integrand_enum;
	size_t n_measure   = n_integrand * n_measure_point;
	ell      = 0;
	vector&lt; dismod_pde::Measure_Input_Struct &gt; measure_in(n_measure);
	vector&lt;double&gt; I(n_integrand);
	for(j = 1; j &lt; n_age-1; j++)
	{	for(k = 1; k &lt; n_cohort-1; k++)
		{	bool ok_mm   = grid.pack(j-1, k-1, i);
			bool ok_pp   = grid.pack(j+1, k+1, i);
			if( ok_mm &amp; ok_pp )
			{	// minimum age distance to near by grid point
				double da = std::min(age[j] - age[j-1], age[j+1] - age[j]);

				// age limits of integration so do not pass a grid point
				double a_low = age[j] - da / 2.;
				double a_up  = age[j] + da / 2.;

				// minimum cohort distance to near by grid point
				double dc = std::min(
					cohort[k] - cohort[k-1], cohort[k+1] - cohort[k]
				);

				// time limits of integration so do not pass a cohort value
				double t_low = age[j] + cohort[k] - dc / 2.;
				double t_up  = age[j] + cohort[k] + dc / 2.;

				// values at this grid point
# ifndef NDEBUG
				bool ok = grid.pack(j, k, i);
				assert( ok );
# endif
				get_state_i(simulated, i,
					S_j, C_j, iota_j, rho_j, chi_j, omega_j
				);
				I[dismod_pde::incidence_enum]
					= iota_j;
				I[dismod_pde::remission_enum]  
					= rho_j;
				I[dismod_pde::m_excess_enum]   
					= chi_j;
				I[dismod_pde::m_other_enum] 
					= omega_j;
				I[dismod_pde::m_with_enum] 
					= omega_j + chi_j;
				I[dismod_pde::prevalence_enum] 
					= C_j / ( S_j + C_j );
				I[dismod_pde::m_prevalence_enum] 
					= chi_j * I[dismod_pde::prevalence_enum];
				I[dismod_pde::m_specific_enum] 
					= I[dismod_pde::m_prevalence_enum];
				I[dismod_pde::m_all_enum]
					= omega_j + I[dismod_pde::m_prevalence_enum];
				I[dismod_pde::m_standard_enum] 
					= I[dismod_pde::m_with_enum] / I[dismod_pde::m_all_enum];
				I[dismod_pde::relative_risk_enum] 
					= I[dismod_pde::m_with_enum] / omega_j;
				for(i = 0; i &lt; n_integrand; i++)
				{
					measure_in[ell].integrand  = 
						dismod_pde::Integrand_Enum(i);
					measure_in[ell].age_lower       = a_low;
					measure_in[ell].age_upper       = a_up;
					measure_in[ell].time_lower      = t_low;
					measure_in[ell].time_upper      = t_up;
					measure_in[ell].meas_zeta       = 1.;
					measure_in[ell].meas_sigma      = 1.;
					measure_in[ell].meas_value      = I[i];
					measure_in[ell].meas_like       = likelihood[5];
					ell++;
				}
			}
		} // end k
	} // end j

	// no covariate information
	vector&lt;double&gt;                       covariate_value(0);
	vector&lt;dismod_pde::Effect_Input_Struct&gt; effect_in(0);

	// information returned by optimize
	vector&lt;dismod_pde::Sfun_Output_Struct&gt;    sfun_out(n_state);
	vector&lt;dismod_pde::Measure_Output_Struct&gt; measure_out(n_measure);
	vector&lt;double&gt;                         effect_out;
	std::string                            message;
	/*
	optimize the estimate 
	*/
	message = dismod_pde::optimize(
		parameter,    grid,          covariate_value,
		sfun_in,      sfun_out, 
		measure_in,   measure_out,
		effect_in,    effect_out
	);

	// check that message is as expected
	ok &amp;= (message == &quot;optimize: success&quot;);

	// check sfun_out estimates 
	double max_abs_diff = 0.;
	size_t i_max        = 0;
	for(i = 0; i &lt; n_state; i++)
	{	double diff  = sfun_out[i].estimate - simulated[i];
		if( fabs(diff) &gt; max_abs_diff )
			i_max = i;
		max_abs_diff = std::max(max_abs_diff, fabs(diff) );
	} 
	ok  &amp;= max_abs_diff &lt;= 1e-4;
	if( max_abs_diff &gt; 1e-4 )
	{	size_t i_grid = i_max / n_stochastic_;
		size_t q      = i_max % n_stochastic_;
		grid.unpack(j, k, i_grid);
		std::cout &lt;&lt; &quot;optimize_xam:&quot;;
		std::cout &lt;&lt; &quot;  j = &quot; &lt;&lt; j;
		std::cout &lt;&lt; &quot;, k = &quot; &lt;&lt; k;
		std::cout &lt;&lt; &quot;, q = &quot; &lt;&lt; q;
		std::cout &lt;&lt; &quot;, max_abs_diff = &quot; &lt;&lt; max_abs_diff;
		std::cout &lt;&lt; std::endl;
	}

	// check measure_out residuals
	for(ell = 0; ell &lt; n_measure; ell++)
	{	double zeta        = measure_in[ell].meas_zeta;
		double sigma       = measure_in[ell].meas_sigma;
		double value       = measure_in[ell].meas_value;
		//
		double model       = measure_out[ell].model;
		double adjusted   = measure_out[ell].adjusted;
		double residual    = measure_out[ell].residual ;
		double scaled      = measure_out[ell].scaled ;
		//
		double check, anorm;
		check   = log( adjusted + zeta ) - log( model + zeta );
		anorm   = fabs(log( adjusted + zeta )) + fabs(log( model + zeta ));
		ok     &amp;= near_equal(residual, check, anorm);
		if( sigma == 0. || sigma == infinity )
			ok = isnan(scaled);
		else
		{	check   = check / sigma;
			anorm   = anorm / sigma;
			ok     &amp;= near_equal(scaled, check, anorm);
		}
		// No covartiates in this example so 
		ok &amp;= adjusted == value;
	}

	// check sfun_out prior residuals
	for(i = 0; i &lt; n_state; i++)
	{	double zeta      = sfun_in[i].prior_zeta;
		double sigma     = sfun_in[i].prior_sigma;
		double mean      = sfun_in[i].prior_mean;
		//
		double estimate  = sfun_out[i].estimate;
		double residual  = sfun_out[i].prior_residual;
		double scaled    = sfun_out[i].prior_scaled;
		double check, anorm;
		check   = log( estimate + zeta ) - log( mean + zeta );
		anorm   = fabs(log( estimate + zeta )) + fabs(log( mean + zeta ));
		ok     &amp;= near_equal(residual, check, anorm);
		if( sigma == 0. || sigma == infinity )
			ok = isnan(scaled);
		else
		{	check   = check / sigma;
			anorm   = anorm / sigma;
			ok     &amp;= near_equal(scaled, check, anorm);
		}
	}

	// check sfun_out cohort residuals 
	for(i = 0; i &lt; n_grid; i++)
	{	grid.unpack(j, k, i);
		size_t kp    = k + 1;
		size_t ip;
		bool   ok_kp = grid.pack(j, kp, ip);
		size_t q;
		if( ! ok_kp)
		{	for(q = 0; q &lt; n_stochastic_; q++)
			{	ok &amp;= 
				isnan( sfun_out[i*n_stochastic_ + q].cohort_residual );
				ok &amp;= 
				isnan( sfun_out[i*n_stochastic_ + q].cohort_scaled );
			}
		}	
		else
		{	for(q = 0; q &lt; n_stochastic_; q++)
			{	size_t s_index_k    = i  * n_stochastic_ + q;
				size_t s_index_kp   = ip * n_stochastic_ + q;
				double zeta_k       = sfun_in[s_index_k].cohort_zeta;
				double sigma_k      = sfun_in[s_index_k].cohort_sigma;
				//
				double estimate_k   = sfun_out[s_index_k].estimate;
				double estimate_kp  = sfun_out[s_index_kp].estimate;
				double residual_k   = sfun_out[s_index_k].cohort_residual;
				double scaled_k     = sfun_out[s_index_k].cohort_scaled;
# ifndef NDEBUG
				size_t order_k      = sfun_in[s_index_k].cohort_order;
				assert( order_k == 1 );
# endif
				double check, anorm;
				check  = log(estimate_kp + zeta_k) 
				       - log(estimate_k  + zeta_k);
				anorm  = fabs(log(estimate_kp + zeta_k)) 
				       + fabs(log(estimate_k  + zeta_k));
				ok    &amp;= near_equal(residual_k, check, anorm);
				if( sigma_k == 0. || sigma_k == infinity )
					ok &amp;= isnan( scaled_k );
				else
				{	check   = check / sigma_k;
					anorm   = anorm / sigma_k;
					ok     &amp;= near_equal(scaled_k, check, anorm);
				}
			}
		}
	}

	// check sfun_out age residuals (with the exception of S and C)
	for(i = 0; i &lt; n_grid; i++)
	{	grid.unpack(j, k, i);
		size_t jp    = j+1;
		size_t ip;
		bool   ok_jp = grid.pack(jp, k, ip);
		size_t q;
		if( ! ok_jp)
		{	for(q = 0; q &lt; n_stochastic_; q++)
			{	ok &amp;= 
				isnan( sfun_out[i*n_stochastic_ + q].age_residual );
				ok &amp;= 
				isnan( sfun_out[i*n_stochastic_ + q].age_scaled );
			}
		}	
		else
		{	assert( S_enum == 0 &amp;&amp; C_enum == 1 );
			for(q = 2; q &lt; n_stochastic_; q++)
			{	size_t s_index_j    = i  * n_stochastic_ + q;
				size_t s_index_jp   = ip * n_stochastic_ + q;
				double zeta_j       = sfun_in[s_index_j].age_zeta;
				double sigma_j      = sfun_in[s_index_j].age_sigma;
# ifndef NDEBUG
				size_t order_j      = sfun_in[s_index_j].age_order;
				assert( order_j == 1 );
# endif
				//
				double estimate_j   = sfun_out[s_index_j].estimate;
				double estimate_jp  = sfun_out[s_index_jp].estimate;
				double residual_j   = sfun_out[s_index_j].age_residual;
				double scaled_j     = sfun_out[s_index_j].age_scaled;
				double check, anorm;
				check  = log(estimate_jp + zeta_j) 
				       - log(estimate_j  + zeta_j);
				anorm  = fabs(log(estimate_jp + zeta_j)) 
				       + fabs(log(estimate_j  + zeta_j));
				ok    &amp;= near_equal(residual_j, check, anorm);
				if( sigma_j == 0. || sigma_j == infinity )
					ok &amp;= isnan( scaled_j );
				else
				{	check   = check / sigma_j;
					anorm   = anorm / sigma_j;
					ok     &amp;= near_equal(scaled_j, check, anorm);
				}
			}
		}
	}

	// check sfun_out cross residuals 
	for(i = 0; i &lt; n_grid; i++)
	{	size_t i_jpk, i_jkp, i_jpkp;
		grid.unpack(j, k, i);
		bool ok_jpk   = grid.pack(j+1,   k, i_jpk);
		bool ok_jkp   = grid.pack(  j, k+1, i_jkp);
		bool ok_jpkp  = grid.pack(j+1, k+1, i_jpkp);
		size_t q;
		if( ! (ok_jpk &amp; ok_jkp &amp; ok_jpkp) )
		{	for(q = 0; q &lt; n_stochastic_; q++)
			{	ok &amp;= 
				isnan( sfun_out[i*n_stochastic_ + q].cross_residual );
				ok &amp;= 
				isnan( sfun_out[i*n_stochastic_ + q].cross_scaled );
			}
		}	
		else
		{	double root_dc = sqrt(cohort[k+1] - cohort[k]); 
			double root_da = sqrt(age[j+1] - age[j]);
			for(q = 0; q &lt; n_stochastic_; q++)
			{	size_t s_index_jk   = i  * n_stochastic_ + q;
				size_t s_index_jpk  = i_jpk * n_stochastic_ + q;
				size_t s_index_jkp  = i_jkp * n_stochastic_ + q;
				size_t s_index_jpkp = i_jpkp * n_stochastic_ + q;
				double zeta_jk      = sfun_in[s_index_jk].cross_zeta;
				double sigma_jk     = sfun_in[s_index_jk].cross_sigma;
				//
				double estimate_jk  = sfun_out[s_index_jk].estimate;
				double estimate_jpk = sfun_out[s_index_jpk].estimate;
				double estimate_jkp = sfun_out[s_index_jkp].estimate;
				double estimate_jpkp= sfun_out[s_index_jpkp].estimate;
				double residual_jk  = sfun_out[s_index_jk].cross_residual;
				double scaled_jk    = sfun_out[s_index_jk].cross_scaled;
				double num, den, check, norm;
				num   = log(estimate_jpkp + zeta_jk) 
				      - log(estimate_jpk  + zeta_jk)
				      - log(estimate_jkp  + zeta_jk)
				      + log(estimate_jk   + zeta_jk);
				norm  = fabs( log(estimate_jpkp + zeta_jk) )
				      + fabs( log(estimate_jpk  + zeta_jk) )
				      + fabs( log(estimate_jkp  + zeta_jk) )
				      + fabs( log(estimate_jk   + zeta_jk) );
				den   = root_da * root_dc;
				check = num / den;
				norm  = norm / den;
				ok   &amp;= near_equal(residual_jk, check, norm);
				if( sigma_jk == 0. || sigma_jk == infinity )
					ok &amp;= isnan( scaled_jk );
				else
				{	check   = check / sigma_jk;
					norm    = norm  / sigma_jk;
					ok     &amp;= near_equal(scaled_jk, check, norm);
				}
			}
		}
	}

	return ok;
}

bool optimize_xam(void)
{	bool   ok         = true;
	size_t n_age      = 7;
	size_t n_cohort   = 7;

	dismod_pde::vector&lt; dismod_pde::Likelihood_Enum &gt; likelihood(6);
	likelihood[0]   = dismod_pde::gaussian_enum; // even indexed prior residuals
	likelihood[1]   = dismod_pde::gaussian_enum; // odd indexed prior residuals
	likelihood[2]   = dismod_pde::gaussian_enum; // age residuals
	likelihood[3]   = dismod_pde::gaussian_enum; // cohort residuals
	likelihood[4]   = dismod_pde::gaussian_enum; // cross residuals
	likelihood[5]   = dismod_pde::laplace_enum;  // measurements

	ok &amp;= optimize_xam(n_age, n_cohort, likelihood);

	return ok;
}
</pre>

</font></code>


<hr>Input File: example/optimize_xam.cpp

<hr>



<center><b><big><big><a name="5.1.3" id="5.1.3">5.1.3: A dismod_pde C++ Optimize Example and Test</a>
</big></big></b></center>
<br>
<b><big><a name="5.1.3.a" id="5.1.3.a">5.1.3.a: Create Simulated Data and Results in C++ Source</a></big></b>
<br>
The source code below uses the external variables
<code><font color="blue"> dismoditis_data</font></code> and <code><font color="blue"> dismoditis_sim</font></code>
which are created by <a href="#5.1.3.1">5.1.3.1: <span style='white-space: nowrap'>dismoditis.sh</span></a>

with the help of <a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>
.

<code><font color="blue">
<pre style='display:inline'> 
# include &lt;dismod_pde/create_grid.hpp&gt;
# include &lt;dismod_pde/optimize.hpp&gt;

// measurement data as defined by dismoditis_data.cpp
extern dismod_pde::Measure_Input_Struct dismoditis_data[];
extern size_t n_dismoditis_data;

// solution as defined by dismoditis_sim.cpp
extern double dismoditis_sim[];
extern size_t n_dismoditis_sim;

namespace { // BEGIN empty namespace

dismod_pde::vector&lt;double&gt; solution(const dismod_pde::pair2index&amp;  grid)
{	using dismod_pde::vector;

	// some temporaries
	size_t i, q;
	size_t j_sim, k_sim;
	size_t i_grid, j_grid, k_grid;
	

	// copy into solution into dismod_pde vector so that indexing gets checked
	size_t n_simulated = n_dismoditis_sim;
	vector&lt;double&gt; simulated(n_simulated);
	for(i = 0; i &lt; n_simulated; i++)
		simulated[i] = dismoditis_sim[i];
	
	const size_t n_stochastic = dismod_pde::n_stochastic_enum;
	const size_t n_function   = 2 + n_stochastic;
	const size_t n_row        = n_dismoditis_sim / n_function;
	assert( n_simulated == n_row * n_function );

	// extract the age values corresponding to the solution
	size_t n_age_sim = 0;
	while( simulated[ n_age_sim * n_function + 0 ]  == simulated[0] )
		n_age_sim++;
	vector&lt;double&gt; age_sim(n_age_sim);
	for(j_sim = 0; j_sim &lt; n_age_sim; j_sim++)
		age_sim[j_sim] = simulated[j_sim * n_function + 1 ];

	// extract the cohort grid corresponding to the solution
	size_t n_cohort_sim = n_row / n_age_sim;
	vector&lt;double&gt; cohort_sim(n_cohort_sim);
	for(k_sim = 0; k_sim &lt; n_cohort_sim; k_sim++)
		cohort_sim[k_sim] = simulated[k_sim * n_age_sim * n_function + 0 ]; 

	// now values on the grid
	size_t n_grid = grid.size();
	vector&lt;double&gt; result(n_grid * n_stochastic);
	vector&lt;double&gt; age_grid    = grid.age();
	vector&lt;double&gt; cohort_grid = grid.cohort();

	// now fill it in
	for(i_grid = 0; i_grid &lt; n_grid; i_grid++)
	{	grid.unpack(j_grid, k_grid, i_grid);

		// age and cohort values for this point on the grid
		double a = age_grid[j_grid];
		double c = cohort_grid[k_grid];

		// corresponding age and cohort indices in solution
		size_t j_sim = 0;
		while( age_sim[j_sim] &lt; a &amp;&amp; j_sim &lt; n_age_sim - 1 )
			j_sim++;
		if( j_sim &gt; 0 )
			j_sim--;
		size_t k_sim = 0;
		while( cohort_sim[k_sim] &lt; c &amp;&amp; k_sim &lt; n_cohort_sim - 1 )
			k_sim++;
		if( k_sim &gt; 0 )
			k_sim--;

		// now use bin-linear interpolation to convert from
		// surrounding solution values to grid value
		double da_sim = age_sim[j_sim    + 1] - age_sim[j_sim];
		double dc_sim = cohort_sim[k_sim + 1] - cohort_sim[k_sim];
		double r_j   = (age_sim[j_sim    + 1] - a) / da_sim;
		double r_k   = (cohort_sim[k_sim + 1] - c) / dc_sim;
		double r_jp  = (a - age_sim[j_sim    + 0]) / da_sim;
		double r_kp  = (c - cohort_sim[k_sim + 0]) / dc_sim;
		for(q = 0; q &lt; n_stochastic; q++)
		{	i   = (k_sim *     n_age_sim + j_sim)     * n_function + q + 2;
			double f_j_k = simulated[i]; 
			//
			i   = (k_sim *     n_age_sim + j_sim + 1) * n_function + q + 2;
			double f_jp_k = simulated[i]; 
			//
			i   = ((k_sim+1) * n_age_sim + j_sim)     * n_function + q + 2;
			double f_j_kp = simulated[i]; 
			//
			i   = ((k_sim+1) * n_age_sim + j_sim + 1) * n_function + q + 2;
			double f_jp_kp = simulated[i]; 
			//
			// bilinear interpolation sum
			double sum = 0.;
			sum += r_j  * r_k  * f_j_k;
			sum += r_jp * r_k  * f_jp_k;
			sum += r_j  * r_kp * f_j_kp;
			sum += r_jp * r_kp * f_jp_kp;
			//
			result[ i_grid * n_stochastic + q ] = sum;;
		}
	}
	return result;
}

bool test_case(double delta_age, double delta_cohort)
{
	bool ok = true;

	size_t n_stochastic = dismod_pde::n_stochastic_enum;
	double infinity     = DISMOD4_PLUS_INFINITY;

	// import the dismod_pde vector type
	using dismod_pde::vector;

	// import the dismod_pde stochastic function names
	using dismod_pde::S_enum;
	using dismod_pde::C_enum;
	using dismod_pde::iota_enum;
	using dismod_pde::rho_enum;
	using dismod_pde::chi_enum;
	using dismod_pde::omega_enum;
	using dismod_pde::gaussian_enum;
	using dismod_pde::laplace_enum;
	using dismod_pde::vector;

	// temporary indices
	size_t i, j, k, ell, i_grid;

	// copy the measurement data into structure expected by dismod_pde
	size_t n_measure = n_dismoditis_data;
	vector&lt;dismod_pde::Measure_Input_Struct&gt; measure_in(n_measure);
	for(ell = 0; ell &lt; n_measure; ell++)
		measure_in[ell] = dismoditis_data[ell];

	// object that packs non-rectangular grid in a linear array
	dismod_pde::pair2index grid = dismod_pde::create_grid(
			delta_age, delta_cohort, measure_in
	);

	// grid siz and number of stochastic function values
	size_t n_grid       = grid.size();
	size_t n_state      = n_stochastic * n_grid;

	// dismod_pde parameter struucture
	dismod_pde::Optimize_Parameter_Struct parameter;

	// maximum step size used for to approximate the ODE for S and C in age
	parameter.max_ode_step           = 1.;

	// level of printing during optimization
	parameter.print_level            = 5;

	// maximum number of optimizer iterations
	parameter.max_iteration          = 80;

	// optimizer convergence criteria
	parameter.converge_tolerance     = 1e-6;

	// extra debugging output 
	// (currently forces a retape every time the function argument changes)
	parameter.debug_output           = false;

	vector&lt;dismod_pde::Sfun_Input_Struct&gt; sfun_in(n_state);
	for(i = 0; i &lt; n_state; i++)
	{
		sfun_in[i].prior_like            = gaussian_enum;
		sfun_in[i].age_like              = gaussian_enum;
		sfun_in[i].cohort_like           = gaussian_enum;
		sfun_in[i].cross_like            = gaussian_enum;

		sfun_in[i].prior_zeta            = 1.;
		sfun_in[i].age_zeta              = 1.;
		sfun_in[i].cohort_zeta           = 1.;
		sfun_in[i].cross_zeta            = 1.;

		sfun_in[i].prior_sigma           = infinity;
		sfun_in[i].age_sigma             = 1e-4;
		sfun_in[i].cohort_sigma          = 1e-4;
		sfun_in[i].cross_sigma           = infinity;

		sfun_in[i].prior_mean            = .05;
		sfun_in[i].age_order             = 1;
		sfun_in[i].cohort_order          = 1;
	}
	// make ODE deterministic for S and C in the age direction
	for(i_grid = 0; i_grid &lt; n_grid; i_grid++)
	{	grid.unpack(j, k, i_grid);
		i = i_grid * n_stochastic;
		if( j == 0 )
		{	// use prior to set initial condition for S
			sfun_in[i + S_enum].prior_sigma = 0.;
			sfun_in[i + S_enum].prior_mean  = 1.;

			// use prior to set initial condition for C
			sfun_in[i + C_enum].prior_sigma = 0.;
			sfun_in[i + C_enum].prior_mean  = 0.;
		}
		// Make age direction of ODE deterministic for S and C
		// extra values corresponding to j(u, k) are not used
		sfun_in[i + S_enum].age_sigma       = 0.;
		sfun_in[i + C_enum].age_sigma       = 0.;

		// Turn off cohort direction residuals for S and C
		// sfun_in[i + S_enum].cohort_sigma       = infinity;
		// sfun_in[i + C_enum].cohort_sigma       = infinity;
	}


	for(i = 0; i &lt; n_state; i++)
	{	sfun_in[i].optimize_zeta  = 1.0;	
		sfun_in[i].optimize_lower = 0.0;
		// initialize the estimate as equal to the prior
		sfun_in[i].optimize_initial = sfun_in[i].prior_mean;
		sfun_in[i].optimize_upper   = 1.0;
	}

	// no covariate information
	vector&lt;double&gt;                       covariate_value(0);
	vector&lt;dismod_pde::Effect_Input_Struct&gt; effect_in(0);

	// information returned by optimize
	vector&lt;dismod_pde::Sfun_Output_Struct&gt;    sfun_out(n_state);
	vector&lt;dismod_pde::Measure_Output_Struct&gt; measure_out(n_measure);
	vector&lt;double&gt;                         effect_out;
	std::string                            message;
	/*
	compute the estimate 
	*/
	message = dismod_pde::optimize(
		parameter,     grid,          covariate_value,
		sfun_in,       sfun_out, 
		measure_in,    measure_out,
		effect_in,     effect_out
	);

	// check that message is as expected
	ok &amp;= (message == &quot;optimize: success&quot;);

	// check the solution against the simulated values
	vector&lt;double&gt; simulated = solution(grid);
	double max_rel_diff = 0.;
	for(i = 0; i &lt; n_state; i++) 
	{	double rel_diff  = fabs( 
			1. - (sfun_out[i].estimate + 1e-3) / (simulated[i] + 1e-3)
		);
		max_rel_diff = std::max(max_rel_diff, rel_diff);
		if( rel_diff &gt;= 2e-2 )
		{	size_t q      = i % n_stochastic;
			size_t i_grid = i / n_stochastic;
			grid.unpack(j, k, i_grid);
			std::cout &lt;&lt; &quot;rel_diff = &quot; &lt;&lt; rel_diff;
			std::cout &lt;&lt; &quot;, age = &quot;    &lt;&lt; grid.age()[j];
			std::cout &lt;&lt; &quot;, cohort = &quot; &lt;&lt; grid.cohort()[k];
			std::cout &lt;&lt; &quot;, estimate = &quot; &lt;&lt; sfun_out[i].estimate;
			std::cout &lt;&lt; &quot;, simulated = &quot; &lt;&lt; simulated[i];
			std::cout &lt;&lt; &quot;, q = &quot; &lt;&lt; q;
			std::cout &lt;&lt; std::endl;
		}
	}
	ok  &amp;= max_rel_diff &lt;= 2e-2;
	return ok;
}

	
} // END empty namespace

bool dismoditis(void)
{	bool ok             = true;
	double delta_age    = 20;
	double delta_cohort = 20;
	std::cout &lt;&lt; &quot;starting dismoditis:&quot; &lt;&lt; std::endl;
	ok &amp;= test_case(delta_age, delta_cohort);
	if( ok )
		std::cout &lt;&lt; &quot;OK: dismoditis&quot; &lt;&lt; std::endl;
	else std::cout &lt;&lt; &quot;Error&quot; &lt;&lt; std::endl;
	return ok;

}
</pre>

</font></code>


<hr>Input File: test/dismoditis.cpp

<hr>
 


<center><b><big><big><a name="5.1.3.1" id="5.1.3.1">5.1.3.1: Create C++ Files Corresponding to Dismod Data and Expected Results</a>
</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 
echo &quot;BEGIN: create the files dismoditis_data.cpp and dismoditis_sim.cpp.&quot;
# 
top_srcdir=@abs_top_srcdir@
top_builddir=@abs_top_builddir@
python_path=$top_builddir/python
#
# create the files dismoditis_data.csv and dismoditis_sim.csv
number=20
like='gaussian'
sim_zeta='1.0'
fit_zeta='1.0'
sim_cv='0.0'
fit_cv='.01'
$python_path/d4_simulate.py \
-files       dismoditis_data.csv dismoditis_sim.csv \
-age         0 1 1 100 20 \
-time        20 1 1990 2010 10 \
-iota        2e-3 \
-rho         3e-3 \
-chi         4e-3 \
-omega       5e-3 \
-measure     incidence     $number $like $sim_zeta $fit_zeta $sim_cv $fit_cv \
-measure     remission     $number $like $sim_zeta $fit_zeta $sim_cv $fit_cv \
-measure     m_excess      $number $like $sim_zeta $fit_zeta $sim_cv $fit_cv \
-measure     relative_risk $number $like $sim_zeta $fit_zeta $sim_cv $fit_cv 
# 
# Python script that converts dismoditis_data.csv and dismoditis_sim.csv to C++
cat &lt;&lt; EOF &gt; dismoditis.py
# input files
csv_data_file  = 'dismoditis_data.csv'
csv_sim_file   = 'dismoditis_sim.csv'
# output files
cpp_data_file  = 'dismoditis_data.cpp'
cpp_sim_file   = 'dismoditis_sim.cpp'
#
import csv
import math
# -------------------------------------------------------------------------
# read and write the data file
csv_data_fp = open(csv_data_file, 'r')
data        = csv.DictReader(csv_data_fp)
#
# A C++ source code file that defines the dismoditis_data[]
cpp_data_fp    = open(cpp_data_file, 'w')
#
# Mapping dismoditis measurement name in input to intergrand name in output 
name_map    = {
	'incidence'        : '     dismod_pde::incidence_enum'    ,
	'remission'        : '     dismod_pde::remission_enum'    ,
	'm_excess'         : '     dismod_pde::m_excess_enum'     ,
	'm_other'          : '     dismod_pde::m_other_enum'      ,
	'm_with'           : '     dismod_pde::m_with_enum'       ,
	'prevalence'       : '     dismod_pde::prevalence_enum'   ,
	'm_prevalence'     : '     dismod_pde::m_prevalence_enum' ,
	'm_specific'       : '     dismod_pde::m_specific_enum'   ,
	'm_all'            : '     dismod_pde::m_all_enum'        ,
	'm_standard'       : '     dismod_pde::m_standard_enum'   ,
	'relative_risk'    : '     dismod_pde::relative_risk_enum'
}
#
# stuff at the beginning of the cpp data file
code = '''
# include &lt;dismod_pde/dismod_pde.hpp&gt;

dismod_pde::Measure_Input_Struct dismoditis_data[] = {
'''
cpp_data_fp.write(code)
first = True
for input_line in data :
	# stuff on each line of the cpp data file
	integrand   = name_map[ input_line['integrand'] ]
	y_start     = input_line['time_lower']
	y_end       = input_line['time_upper']
	a_start     = input_line['age_lower']
	a_end       = input_line['age_upper']
	meas_like   = input_line['meas_like']
	meas_zeta   = input_line['meas_zeta']
	meas_sigma  = input_line['meas_sigma']
	meas_value  = input_line['meas_value']
	# type of liklihood to use on measurement residuals
	meas_like   = 'dismod_pde::' + meas_like + '_enum'
	# structure for the log likelihood
	likelihood  =  meas_like + ', ' + meas_zeta + ', ' + meas_sigma
	# structure for this measurement
	measure = '{ ' + integrand + ', '
	measure = measure + y_start + ', ' + y_end + ', '
	measure = measure + a_start + ', ' + a_end + ', ' 
	measure = measure + meas_like +   ', ' 
	measure = measure + meas_zeta +   ', ' 
	measure = measure + meas_sigma +  ', ' 
	measure = measure + meas_value +  ' }\n'
	if first :
		cpp_data_fp.write('  ' + measure)
	else :
		cpp_data_fp.write(', ' + measure)
	first   = False
#
# stuff at the end of the cpp data file
code = '''
}; 
size_t n_dismoditis_data = 
	sizeof(dismoditis_data) / sizeof(dismoditis_data[0]);
'''
cpp_data_fp.write(code)
# -------------------------------------------------------------------------
# read and write the solution file
csv_sim_fp = open(csv_sim_file, 'r')
solution     = csv.DictReader(csv_sim_fp)
#
# A C++ source code file that defines the dismoditis_sim[]
cpp_sim_fp    = open(cpp_sim_file, 'w')
#
# Must use the same order for stochastic functions as in dismod_pde/define.hpp
solve_header = [ 'cohort', 'age', 'S', 'C', 'iota', 'rho', 'chi', 'omega' ]
#
# stuff at the beginning of the cpp solution file
cpp_sim_fp.write('# include &lt;dismod_pde/dismod_pde.hpp&gt;\n\n')
first = True
row   = '// '
for field in solve_header :
	if not first :
		row = row + ', '
	row   = row + field
	first = False;
row   = row + '\n'
#
cpp_sim_fp.write(row)
cpp_sim_fp.write('double dismoditis_sim[] = {\n')
first = True
for input_line in solution :
	# stuff on each line of the cpp data file
	row     = '\t'
	for field in solve_header :
		if first :
			row = row + ' '
		else :
			row = row + ','
		first   = False
		row     = row + input_line[field]
	row = row + '\n'
	cpp_sim_fp.write(row)
#
# stuff at the end of the cpp data file
code = '''
};
size_t n_dismoditis_sim = 
	sizeof(dismoditis_sim) / sizeof(dismoditis_sim[0]);
'''
cpp_sim_fp.write(code)
EOF
# Now create the C++ files dismoditis_data.cpp and dismoditis_sim.cpp
$top_builddir/python.sh dismoditis.py
#
echo &quot;OK: created ./dismoditis_data.cpp and ./dismoditis_sim.cpp.&quot;
</pre>

</font></code>


<hr>Input File: test/dismoditis.sh.in

<hr>



<center><b><big><big><a name="5.2" id="5.2">5.2: Create an Age-Cohort Grid For a Measurement Set</a>
</big></big></b></center>
<br>
<b><big><a name="5.2.a" id="5.2.a">5.2.a: Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;create_grid(</span></font><i><font color="black"><span style='white-space: nowrap'>delta_age</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>delta_cohort</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="5.2.b" id="5.2.b">5.2.b: delta_age</a></big></b>


<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>delta_age</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>delta_age</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It must be greater than zero and 
specifies the step size used between age values in the grid.

<br>
<br>
<b><big><a name="5.2.c" id="5.2.c">5.2.c: delta_cohort</a></big></b>


<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>delta_cohort</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>delta_cohort</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It must be greater than zero and 
specifies the step size used between cohort values in the grid.

<br>
<br>
<b><big><a name="5.2.d" id="5.2.d">5.2.d: measure_in</a></big></b>

<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;dismod_pde::vector&lt;dismod_pde::Measure_Input_Struct&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>measure_in</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It has the exact same specifications as
<a href="#5.1.l">5.1.l: <span style='white-space: nowrap'>measure_in</span></a>
 in the <code><font color="blue">optimize</font></code> routine.

<br>
<br>
<b><big><a name="5.2.e" id="5.2.e">5.2.e: grid</a></big></b>

<br>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dismod_pde::pair2index&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
see <a href="#5.3">5.3: <span style='white-space: nowrap'>pair2index</span></a>
.
There is an age cohort grid that surrounds the measurement values
by a spacing of 
<code><i><font color="black"><span style='white-space: nowrap'>delta_age</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>delta_cohort</span></font></i></code>
.
In addition, the age grid is expanded to start at age zero.


<hr>Input File: cpp/dismod_pde/create_grid.hpp

<hr>

<code>
<span style='white-space: nowrap'>&nbsp;\newcommand{\W}[1]{\;&nbsp;#1&nbsp;\;}</span></code>

<code>
<span style='white-space: nowrap'>&nbsp;\newcommand{\R}[1]{{\rm&nbsp;#1}}</span></code>




<center><b><big><big><a name="5.3" id="5.3">5.3: Convert Between Age-Cohort Pairs and a Single Grid Index</a>
</big></big></b></center>
<br>
<b><big><a name="5.3.a" id="5.3.a">5.3.a: Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>dismod_pde::pair2index&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i></code>


<code><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>age</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_lower</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_upper</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<code><font color="blue"><span style='white-space: nowrap'><br>
</span></font><i><font color="black"><span style='white-space: nowrap'>a</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'>.age()<br>
</span></font><i><font color="black"><span style='white-space: nowrap'>c</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'>.cohort()<br>
</span></font><i><font color="black"><span style='white-space: nowrap'>lower</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'>.time_lower()<br>
</span></font><i><font color="black"><span style='white-space: nowrap'>upper</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'>.time_lower()<br>
</span></font><i><font color="black"><span style='white-space: nowrap'>n_grid</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()<br>
</span></font><i><font color="black"><span style='white-space: nowrap'>valid</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'>.pack(</span></font><i><font color="black"><span style='white-space: nowrap'>age_index</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cohort_index</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_pack</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i><font color="blue"><span style='white-space: nowrap'>.unpack(</span></font><i><font color="black"><span style='white-space: nowrap'>age_unpack</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cohort_unpack</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<b><big><a name="5.3.b" id="5.3.b">5.3.b: Purpose</a></big></b>
<br>
The stochastic differential equations in dismod_pde 
naturally expressed on a age-cohort grid
(and that is how the computation is done).
On the other hand, the user is interested in computing the
stochastic function values in a rectangular region in age and time.
The <code><font color="blue">pair2index</font></code> routines aid in computing the correspondence
between age-cohort pairs to a unique single grid index.

<br>
<br>
<b><big><a name="5.3.c" id="5.3.c">5.3.c: age</a></big></b>

<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>age</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;dismod_pde::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the grid of age values.
We use 
<code><i><font color="black"><span style='white-space: nowrap'>n_age</span></font></i></code>
 to denote 
<code><i><font color="black"><span style='white-space: nowrap'>age</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()</span></font></code>
 which
must be greater than or equal two.
The vector 
<code><i><font color="black"><span style='white-space: nowrap'>age</span></font></i></code>
 and must be strictly monotone increasing; i.e.,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>for</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;1&nbsp;,</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_age</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;1,&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;1]&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
<br>
<b><big><a name="5.3.d" id="5.3.d">5.3.d: cohort</a></big></b>

<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;dismod_pde::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the grid of cohort values.
We use 
<code><i><font color="black"><span style='white-space: nowrap'>n_cohort</span></font></i></code>
 to denote 
<code><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()</span></font></code>

which must be greater than or equal two.
The vector 
<code><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i></code>
 must be strictly monotone increasing; i.e.,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>for</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;1&nbsp;,</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_cohort</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;1,&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;1]&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
The cohort grid must start at a low enough value so that

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i><font color="blue"><span style='white-space: nowrap'>[0]&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>n_age</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;1]&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_lower</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The cohort grid must end at a high enough value so that

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_upper</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>n_cohort</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;1]&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age</span></font></i><font color="blue"><span style='white-space: nowrap'>[0]<br>
</span></font></code>
<br>
<b><big><a name="5.3.e" id="5.3.e">5.3.e: time_lower</a></big></b>


<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>time_lower</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_lower</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the lower time limit for the time values that must be 
surrounded by the valid age-cohort grid pairs.

<br>
<br>
<b><big><a name="5.3.f" id="5.3.f">5.3.f: time_upper</a></big></b>


<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>time_upper</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_upper</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the upper time limit for the time values that must be 
surrounded by the valid age-cohort grid pairs.
Furthermore, 
<code><i><font color="black"><span style='white-space: nowrap'>time_upper</span></font></i></code>
 must satisfy

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_lower</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_upper</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="5.3.g" id="5.3.g">5.3.g: pair2index</a></big></b>
<br>
Constructs a <code><font color="blue">pair2index</font></code> object called 
<code><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i></code>
.



<br>
<br>
<b><big><a name="5.3.h" id="5.3.h">5.3.h: grid.age</a></big></b>

<br>
The return value for this function has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;dismod_pde::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is a copy of the 
<code><i><font color="black"><span style='white-space: nowrap'>age</span></font></i></code>
 vector used to construct 
<code><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i></code>
.  

<br>
<br>
<b><big><a name="5.3.i" id="5.3.i">5.3.i: grid.cohort</a></big></b>

<br>
The return value for this function has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;dismod_pde::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is a copy of the 
<code><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i></code>
 vector used to construct 
<code><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i></code>
.

<br>
<br>
<b><big><a name="5.3.j" id="5.3.j">5.3.j: grid.time_lower</a></big></b>

<br>
The return value for this function has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>lower</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is a copy of the 
<code><i><font color="black"><span style='white-space: nowrap'>time_lower</span></font></i></code>
 value used to construct 
<code><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i></code>
.

<br>
<br>
<b><big><a name="5.3.k" id="5.3.k">5.3.k: grid.time_upper</a></big></b>

<br>
The return value for this function has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>upper</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is a copy of the 
<code><i><font color="black"><span style='white-space: nowrap'>time_upper</span></font></i></code>
 value used to construct 
<code><i><font color="black"><span style='white-space: nowrap'>grid</span></font></i></code>
.

<br>
<br>
<b><big><a name="5.3.l" id="5.3.l">5.3.l: grid.size</a></big></b>

<br>
The return value of this function has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_grid</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Its value is the number of valid grid pairs
which is also equal to the number if single grid index values.



<br>
<br>
<b><big><a name="5.3.m" id="5.3.m">5.3.m: Notation</a></big></b>


<br>
We use <code>
<span style='white-space: nowrap'>&nbsp;J</span></code>
 to denote 
<code><i><font color="black"><span style='white-space: nowrap'>n_age</span></font></i></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;K</span></code>
 to denote 
<code><i><font color="black"><span style='white-space: nowrap'>n_cohort</span></font></i></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;t_l</span></code>
 to denote 
<code><i><font color="black"><span style='white-space: nowrap'>time_lower</span></font></i></code>
, and
<code>
<span style='white-space: nowrap'>&nbsp;t_u</span></code>
 to denote 
<code><i><font color="black"><span style='white-space: nowrap'>time_upper</span></font></i></code>
,
For <code>
<span style='white-space: nowrap'>&nbsp;0&nbsp;=&nbsp;1&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;J-1</span></code>
, 
we use <code>
<span style='white-space: nowrap'>&nbsp;a_j</span></code>
 to denote 
<code><i><font color="black"><span style='white-space: nowrap'>age</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
.
For <code>
<span style='white-space: nowrap'>&nbsp;k&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;K-1</span></code>
, 
we use <code>
<span style='white-space: nowrap'>&nbsp;c_k</span></code>
 to denote 
<code><i><font color="black"><span style='white-space: nowrap'>cohort</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
.

<br>
<br>
<b><a name="5.3.m.a" id="5.3.m.a">5.3.m.a: kappa</a></b>


<br>
For <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;J-1</span></code>
, we define
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
\kappa(j,&nbsp;l)&nbsp;<br>
&amp;&nbsp;=&nbsp;&amp;&nbsp;<br>
\max\{&nbsp;k&nbsp;\W{:}&nbsp;0&nbsp;\leq&nbsp;k&nbsp;&lt;&nbsp;K&nbsp;\W{\R{and}}&nbsp;c_k&nbsp;+&nbsp;a_j&nbsp;\leq&nbsp;t_l&nbsp;\}<br>
\\<br>
\kappa(j,&nbsp;u)&nbsp;<br>
&amp;&nbsp;=&nbsp;&amp;&nbsp;<br>
\min\{&nbsp;k&nbsp;\W{:}&nbsp;0&nbsp;\leq&nbsp;k&nbsp;&lt;&nbsp;K&nbsp;\W{\R{and}}&nbsp;c_k&nbsp;+&nbsp;a_1&nbsp;\geq&nbsp;t_u&nbsp;\}<br>
\end{array}<br>
\]&nbsp;</span></code>

It follows from the assumptions on the 
<a href="#5.3.c">5.3.c: <span style='white-space: nowrap'>age</span></a>
 and 
<a href="#5.3.d">5.3.d: <span style='white-space: nowrap'>cohort</span></a>
 vectors that
the sets corresponding to the maximums above are non-empty.

<br>
<br>
<b><a name="5.3.m.b" id="5.3.m.b">5.3.m.b: Computational Grid</a></b>


<br>
The set of valid grid pairs (the computational grid) is

<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
G&nbsp;<br>
=<br>
\bigcup_{j=0}^{J-1}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\bigcup_{k=\kappa(j,l)}^{\kappa(j,u)}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\{&nbsp;(j,k)&nbsp;\}<br>
\]&nbsp;</span></code>


<br>
<br>
<b><big><a name="5.3.n" id="5.3.n">5.3.n: age_index</a></big></b>

<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>age_index</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age_index</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies an age index (<code>
<span style='white-space: nowrap'>&nbsp;j</span></code>
 above).

<br>
<br>
<b><big><a name="5.3.o" id="5.3.o">5.3.o: cohort_index</a></big></b>

<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>cohort_index</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cohort_index</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies a cohort index (<code>
<span style='white-space: nowrap'>&nbsp;k</span></code>
 above).

<br>
<br>
<b><big><a name="5.3.p" id="5.3.p">5.3.p: valid</a></big></b>



<br>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>valid</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>valid</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The age-cohort pair 
<code><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>age_index</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cohort_index</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
 is 
in the computational grid (defined above) if and only if

<code><i><font color="black"><span style='white-space: nowrap'>valid</span></font></i></code>
 is true.

<br>
<br>
<b><big><a name="5.3.q" id="5.3.q">5.3.q: grid_pack</a></big></b>


<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>grid_pack</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_pack</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Its input value does not matter.
If 
<code><i><font color="black"><span style='white-space: nowrap'>valid</span></font></i></code>
 is true,
the return value of 
<code><i><font color="black"><span style='white-space: nowrap'>grid_pack</span></font></i></code>
 is the single index 
corresponding to the specified grid pair,

<code><i><font color="black"><span style='white-space: nowrap'>grid_pack</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_grid</span></font></i></code>
.
The single index is different for every valid grid pair.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>If 
<code><i><font color="black"><span style='white-space: nowrap'>valid</span></font></i></code>
 is false,
the return value of 
<code><i><font color="black"><span style='white-space: nowrap'>grid_pack</span></font></i></code>
 is not specified.




<br>
<br>
<b><big><a name="5.3.r" id="5.3.r">5.3.r: age_unpack</a></big></b>


<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>age_unpack</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>age_unpack</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Its input value does not matter.
Upon return, it is the age index corresponding to 
<code><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>age_unpack</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_age</span></font></i></code>
.

<br>
<br>
<b><big><a name="5.3.s" id="5.3.s">5.3.s: cohort_unpack</a></big></b>


<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>cohort_unpack</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cohort_unpack</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It input value does not matter.
Upon return, it is the cohort index corresponding to 
<code><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>cohort_unpack</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_cohort</span></font></i></code>
.

<br>
<br>
<b><big><a name="5.3.t" id="5.3.t">5.3.t: grid_index</a></big></b>

<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_index</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
it is a single index that is a packed version of a valid age-cohort grid pair
and hence must be less that 
<code><i><font color="black"><span style='white-space: nowrap'>n_grid</span></font></i></code>
.


<br>
<br>
<b><big><a name="5.3.u" id="5.3.u">5.3.u: Example</a></big></b>
<br>
The file <a href="#5.3.1">5.3.1: <span style='white-space: nowrap'>pair2index.cpp</span></a>
 
contains an example and test of <code><font color="blue">pair2index</font></code>.
It returns true if <code><font color="blue">pair2index</font></code> passes the test and false
otherwise.


<hr>Input File: cpp/dismod_pde/pair2index.hpp

<hr>



<center><b><big><big><a name="5.3.1" id="5.3.1">5.3.1: Example and Test of dismod_pde pair2index Procedure</a>
</big></big></b></center>
<br>
<b><big><a name="5.3.1.a" id="5.3.1.a">5.3.1.a: Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;pair2index()</span></font></code>


<br>
<br>
<b><big><a name="5.3.1.b" id="5.3.1.b">5.3.1.b: ok</a></big></b>
<br>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
</span></font></code>
If true, the <a href="#5.3">5.3: <span style='white-space: nowrap'>pair2index</span></a>
 procedure returned a successful status; i.e.,
estimated values agreed with the simulated values.

<code><font color="blue">
<pre style='display:inline'> 
# include &lt;dismod_pde/dismod_pde.hpp&gt;

bool pair2index(void)
{	// initialize return value
	bool ok = true;

	// Example in Lexis Diagram in dismod_pde Numerical Methods Paper
	double time_lower = 1950.;
	double time_upper = 2000.;
	size_t j, J = 3;
	size_t k, K = 5;
	dismod_pde::vector&lt;double&gt; age(J), cohort(K);
	for(j = 0; j &lt; J; j++)
		age[j] = 15 + j * 25.;
	for(k = 0; k &lt; K; k++)
		cohort[k] = 1880 + k * 30.; 
	dismod_pde::pair2index grid(age, cohort, time_lower, time_upper);

	// Enumerate all the valid grid points in Lexis Diagram in paper
	size_t n_grid = 0;
	size_t age_index, cohort_index, grid_pack;
	size_t age_unpack, cohort_unpack, grid_index;
	bool   valid;
	age_index = 0;
	for(k = 1; k &lt; 5; k++)
	{	cohort_index = k;	
		valid = grid.pack(age_index, cohort_index, grid_pack); 
		grid_index = grid_pack;
		grid.unpack(age_unpack, cohort_unpack, grid_index);
		ok   &amp;= age_unpack == age_index;
		ok   &amp;= cohort_unpack == cohort_index;
		ok   &amp;= valid;
		n_grid++;
	}
	age_index = 1;
	for(k = 1; k &lt; 4; k++)
	{	cohort_index = k;	
		valid = grid.pack(age_index, cohort_index, grid_pack); 
		grid_index = grid_pack;
		grid.unpack(age_unpack, cohort_unpack, grid_index);
		ok   &amp;= age_unpack == age_index;
		ok   &amp;= cohort_unpack == cohort_index;
		ok   &amp;= valid;
		n_grid++;
	}
	age_index = 2;
	for(k = 0; k &lt; 3; k++)
	{	cohort_index = k;	
		valid = grid.pack(age_index, cohort_index, grid_pack); 
		grid_index = grid_pack;
		grid.unpack(age_unpack, cohort_unpack, grid_index);
		ok   &amp;= age_unpack == age_index;
		ok   &amp;= cohort_unpack == cohort_index;
		ok   &amp;= valid;
		n_grid++;
	}
	// check that these are all the valid grid points
	ok &amp;= n_grid == grid.size();

	return ok;
}
</pre>

</font></code>


<hr>Input File: example/pair2index.cpp

<hr>



<center><b><big><big><a name="5.4" id="5.4">5.4: Read an Entire CSV File Into Memory</a>
</big></big></b></center>
<br>
<b><big><a name="5.4.a" id="5.4.a">5.4.a: Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>csv_read(</span></font><i><font color="black"><span style='white-space: nowrap'>file</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>field</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>raw</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sub_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="5.4.b" id="5.4.b">5.4.b: file</a></big></b>
<br>
Is the name of the file we are reading and has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;std::string&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>file</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="5.4.c" id="5.4.c">5.4.c: field</a></big></b>
<br>
Is a vector of field names that are expected to be present in the file
and has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;dismod_pde::vector&lt;std::string&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>field</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
We use 
<code><i><font color="black"><span style='white-space: nowrap'>n_field</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>field</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()</span></font></code>
.
For 
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_field</span></font></i></code>

it is assumed that there is not leading or trailing which space
in any of the filed names; e.g., 

<code><i><font color="black"><span style='white-space: nowrap'>field</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>][0]&nbsp;!=&nbsp;'&nbsp;'</span></font></code>
.
In addition, all the field names are non-empty; i.e.,

<code><i><font color="black"><span style='white-space: nowrap'>field</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]size()&nbsp;!=&nbsp;0</span></font></code>
.

<br>
<br>
<b><big><a name="5.4.d" id="5.4.d">5.4.d: raw</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dismod_pde::vector&lt;char&gt;&amp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>raw</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The input size and content of this vector does not matter.
Upon return, it contains the data read in from the file,
including the first line of the file; i.e., the field names.

<br>
<br>
<b><big><a name="5.4.e" id="5.4.e">5.4.e: sub_vec</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dismod_pde::vector&lt;&nbsp;std::pair&lt;size_t,&nbsp;size_t&gt;&nbsp;&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sub_vec</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The input size and content of this argument does not matter.
We use 
<code><i><font color="black"><span style='white-space: nowrap'>n_row</span></font></i></code>
  for the number of rows of data in the file,
including the first row which contains the field names.
Upon return, the size of 
<code><i><font color="black"><span style='white-space: nowrap'>sub_vec</span></font></i></code>
 is 

<code><i><font color="black"><span style='white-space: nowrap'>n_row</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_field</span></font></i></code>
 and for

<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_row</span></font></i><font color="blue"><span style='white-space: nowrap'>-1</span></font></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_field</span></font></i><font color="blue"><span style='white-space: nowrap'>-1</span></font></code>
,
if 

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>start</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sub_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_field</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;].first<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>length</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sub_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_field</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;].second<br>
</span></font></code>
then 
<code><i><font color="black"><span style='white-space: nowrap'>raw</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>start</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 is the first character of the corresponding value
and 
<code><i><font color="black"><span style='white-space: nowrap'>length</span></font></i></code>
 is the number of characters in the corresponding value.



<br>
<br>
<b><big><a name="5.4.f" id="5.4.f">5.4.f: Example</a></big></b>
<br>
The file <a href="#5.4.1">5.4.1: <span style='white-space: nowrap'>csv_read_tst.cpp</span></a>
 contains
and example and test of <code><font color="blue">csv_read</font></code>.
It returns true for success and false for failure.


<hr>Input File: cpp/dismod_pde/csv_read.hpp

<hr>



<center><b><big><big><a name="5.4.1" id="5.4.1">5.4.1: Example and Test of dismod_pde csv_read Procedure</a>
</big></big></b></center>
<br>
<b><big><a name="5.4.1.a" id="5.4.1.a">5.4.1.a: Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;csv_read_tst()</span></font></code>


<br>
<br>
<b><big><a name="5.4.1.b" id="5.4.1.b">5.4.1.b: ok</a></big></b>
<br>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
</span></font></code>
If true, 
the <a href="#5.4">5.4: <span style='white-space: nowrap'>csv_read</span></a>
 passed this test.
Otherwise this return value is false.

<code><font color="blue">
<pre style='display:inline'> 
# include &lt;fstream&gt;
# include &lt;dismod_pde/csv_read.hpp&gt;

bool csv_read_tst(void)
{	bool ok = true;
	size_t j, k, start, length;

	// name of temporary csv file
	std::string file_name = &quot;csv_read_tst.tmp&quot;;

	// data in the temporary file	
	const char* data = 
		&quot;name one,name two,name three\n&quot;            // header, row 0 
		&quot;value 11,value 12,value 13\n&quot;              // row 1
		&quot;value 21,value 22,value 23\n&quot;              // row 2
		&quot;\&quot;value 31\&quot;,\&quot;value,32\&quot;,\&quot;value\n33\&quot;\n&quot; // quotes around values
		&quot;value 41,value 42,\n&quot;;                     // end row with comma
	

	// create the temporary csv file
	std::fstream file;
	file.open(file_name.c_str(), std::fstream::out);
	file &lt;&lt; data;
	file.close();

	// read the csv file file
	size_t n_field = 3;
	dismod_pde::vector&lt;std::string&gt; field(n_field);
	field[0] = &quot;name three&quot;;
	field[1] = &quot;name two&quot;;
	field[2] = &quot;name one&quot;;
	dismod_pde::vector&lt;char&gt;   raw;
	dismod_pde::vector&lt; std::pair&lt;size_t,size_t&gt; &gt; sub_vec;
	dismod_pde::csv_read(file_name, field, raw, sub_vec);

	// check number of rows of data
	size_t n_row = (sub_vec.size() / n_field);
	ok           &amp;= n_row == 5;

	// check the first row of the data file
	size_t row = 0;
	for(j = 0; j &lt; n_field; j++)
	{	start   = sub_vec[ row * n_field + j].first;
		length  = sub_vec[ row * n_field + j].second;	
		ok &amp;= field[j].size() == length;   
		for(k = 0; k &lt; length; k++)
			ok &amp;= (field[j][k] == raw[ start + k ] );
	}

	// check the second row
	row = 1;
	field[0] = &quot;value 13&quot;;
	field[1] = &quot;value 12&quot;;
	field[2] = &quot;value 11&quot;;
	for(j = 0; j &lt; n_field; j++)
	{	start   = sub_vec[ row * n_field + j].first;
		length  = sub_vec[ row * n_field + j].second;	
		ok &amp;= field[j].size() == length;   
		for(k = 0; k &lt; length; k++)
			ok &amp;= (field[j][k] == raw[ start + k ] );
	}

	// check the third row
	row = 2;
	field[0] = &quot;value 23&quot;;
	field[1] = &quot;value 22&quot;;
	field[2] = &quot;value 21&quot;;
	for(j = 0; j &lt; n_field; j++)
	{	start   = sub_vec[ row * n_field + j].first;
		length  = sub_vec[ row * n_field + j].second;	
		ok &amp;= field[j].size() == length;   
		for(k = 0; k &lt; length; k++)
			ok &amp;= (field[j][k] == raw[ start + k ] );
	}

	// check the third row
	row = 3;
	field[0] = &quot;value\n33&quot;;
	field[1] = &quot;value,32&quot;;
	field[2] = &quot;value 31&quot;;
	for(j = 0; j &lt; n_field; j++)
	{	start   = sub_vec[ row * n_field + j].first;
		length  = sub_vec[ row * n_field + j].second;	
		ok &amp;= field[j].size() == length;   
		for(k = 0; k &lt; length; k++)
			ok &amp;= (field[j][k] == raw[ start + k ] );
	}

	// check the fourth row
	row = 4;
	field[0] = &quot;&quot;;
	field[1] = &quot;value 42&quot;;
	field[2] = &quot;value 41&quot;;
	for(j = 0; j &lt; n_field; j++)
	{	start   = sub_vec[ row * n_field + j].first;
		length  = sub_vec[ row * n_field + j].second;	
		ok &amp;= field[j].size() == length;   
		for(k = 0; k &lt; length; k++)
			ok &amp;= (field[j][k] == raw[ start + k ] );
	}

	return ok;
}
</pre>

</font></code>


<hr>Input File: example/csv_read_tst.cpp

<hr>



<center><b><big><big><a name="5.5" id="5.5">5.5: Convert a Sub-vector of a Character Vector to a String</a>
</big></big></b></center>
<br>
<b><big><a name="5.5.a" id="5.5.a">5.5.a: Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>str</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;str_char_vec(</span></font><i><font color="black"><span style='white-space: nowrap'>char_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sub_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="5.5.b" id="5.5.b">5.5.b: char_vec</a></big></b>
<br>
this argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;dismod_pde::vector&lt;char&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>char_vec</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is a character vector containing this value (and possibly other values).


<br>
<br>
<b><big><a name="5.5.c" id="5.5.c">5.5.c: sub_vec</a></big></b>
<br>
this argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;std::pair&lt;size_t,&nbsp;size_t&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sub_vec</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The first character of the string is

<code><i><font color="black"><span style='white-space: nowrap'>char_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sub_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.first&nbsp;]</span></font></code>
.
The number of character in the string is

<code><i><font color="black"><span style='white-space: nowrap'>sub_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.second</span></font></code>
.

<br>
<br>
<b><big><a name="5.5.d" id="5.5.d">5.5.d: str</a></big></b>
<br>
The return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::string&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>str</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is the string that has the corresponding characters 
in the vector 
<code><i><font color="black"><span style='white-space: nowrap'>char_vec</span></font></i></code>
.



<br>
<br>
<b><big><a name="5.5.e" id="5.5.e">5.5.e: Example</a></big></b>
<br>
The file <a href="#5.5.1">5.5.1: <span style='white-space: nowrap'>str_char_vec_tst.cpp</span></a>
 contains
and example and test of <code><font color="blue">str_char_vec</font></code>.
It returns true for success and false for failure.


<hr>Input File: cpp/dismod_pde/str_char_vec.hpp

<hr>



<center><b><big><big><a name="5.5.1" id="5.5.1">5.5.1: Example and Test of Conversion from Ascii to String</a>
</big></big></b></center>
<br>
<b><big><a name="5.5.1.a" id="5.5.1.a">5.5.1.a: Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;str_char_vec_tst()</span></font></code>


<br>
<br>
<b><big><a name="5.5.1.b" id="5.5.1.b">5.5.1.b: ok</a></big></b>
<br>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
</span></font></code>
If true, 
<a href="#5.5">5.5: <span style='white-space: nowrap'>str_char_vec</span></a>
 passed this test.
Otherwise this return value is false.

<code><font color="blue">
<pre style='display:inline'> 
# include &lt;dismod_pde/str_char_vec.hpp&gt;

bool str_char_vec_tst(void)
{	bool ok = true;

	// create the vector of characters
	// (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
	dismod_pde::vector&lt;char&gt; char_vec(10);
	size_t i;
	for(i = 0; i &lt; 10; i++)
		char_vec[i] = char( '0' + i );

	std::pair&lt;size_t,size_t&gt; sub_vec;
	std::string              str;
	sub_vec.first  = 2;
	sub_vec.second = 2;
	str            = &quot;23&quot;;
	ok &amp;= ( dismod_pde::str_char_vec(char_vec, sub_vec) == str );
	sub_vec.first  = 2;
	sub_vec.second = 3;
	str            = &quot;234&quot;;
	ok &amp;= ( dismod_pde::str_char_vec(char_vec, sub_vec) == str );

	return ok;
}
</pre>

</font></code>

<hr>Input File: example/str_char_vec_tst.cpp

<hr>



<center><b><big><big><a name="5.6" id="5.6">5.6: Convert a Sub-vector of a Character Vector to Double</a>
</big></big></b></center>
<br>
<b><big><a name="5.6.a" id="5.6.a">5.6.a: Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>dbl</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;atof_char_vec(</span></font><i><font color="black"><span style='white-space: nowrap'>char_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sub_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>line</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>file</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>



<br>
<br>
<b><big><a name="5.6.b" id="5.6.b">5.6.b: char_vec</a></big></b>
<br>
this argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;dismod_pde::vector&lt;char&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>char_vec</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is a character vector containing this value (and possibly other values).


<br>
<br>
<b><big><a name="5.6.c" id="5.6.c">5.6.c: sub_vec</a></big></b>
<br>
this argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;std::pair&lt;size_t,&nbsp;size_t&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sub_vec</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The first character in the ascii representation is

<code><i><font color="black"><span style='white-space: nowrap'>char_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sub_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.first&nbsp;]</span></font></code>
.
The number of character in the ascii representation is

<code><i><font color="black"><span style='white-space: nowrap'>sub_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.second</span></font></code>
.
This number of characters must be less than 100.

<br>
<br>
<b><big><a name="5.6.d" id="5.6.d">5.6.d: line</a></big></b>
<br>
this argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>line</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Is the line number corresponding to this value
(used for error reporting).

<br>
<br>
<b><big><a name="5.6.e" id="5.6.e">5.6.e: file</a></big></b>
<br>
this argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;std::string&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>file</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Is the file that this data was read from
(used for error reporting).

<br>
<br>
<b><big><a name="5.6.f" id="5.6.f">5.6.f: dbl</a></big></b>
<br>
the return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dbl</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is the double precision value corresponding to 
the ascii representation mentioned below 
<a href="#5.6.c">5.6.c: <span style='white-space: nowrap'>sub_vec</span></a>
.

<br>
<br>
<b><big><a name="5.6.g" id="5.6.g">5.6.g: nan</a></big></b>
<br>
If the ascii representation is <code><font color="blue">nan</font></code>,
double precision value <code><font color="blue">dbl</font></code> is also nan.

<br>
<br>
<b><big><a name="5.6.h" id="5.6.h">5.6.h: inf</a></big></b>
<br>
If the ascii representation is <code><font color="blue">inf</font></code> (<code><font color="blue">-inf</font></code>),
double precision value 
<code><i><font color="black"><span style='white-space: nowrap'>dbl</span></font></i></code>
 is 
<code><font color="blue">DISMOD4_PLUS_INFINITY</font></code> ( <code><font color="blue">DISMOD4_PLUS_INFINITY</font></code> ).



<br>
<br>
<b><big><a name="5.6.i" id="5.6.i">5.6.i: Example</a></big></b>
<br>
The file <a href="#5.6.1">5.6.1: <span style='white-space: nowrap'>atof_char_vec_tst.cpp</span></a>
 contains
and example and test of <code><font color="blue">atof_char_vec</font></code>.
It returns true for success and false for failure.

<hr>Input File: cpp/dismod_pde/atof_char_vec.hpp

<hr>



<center><b><big><big><a name="5.6.1" id="5.6.1">5.6.1: Example and Test of Conversion from Ascii to Double</a>
</big></big></b></center>
<br>
<b><big><a name="5.6.1.a" id="5.6.1.a">5.6.1.a: Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;atof_char_vec_tst()</span></font></code>


<br>
<br>
<b><big><a name="5.6.1.b" id="5.6.1.b">5.6.1.b: ok</a></big></b>
<br>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;<br>
</span></font></code>
If true, 
<a href="#5.6">5.6: <span style='white-space: nowrap'>atof_char_vec</span></a>
 passed this test.
Otherwise this return value is false.

<code><font color="blue">
<pre style='display:inline'> 
# include &lt;dismod_pde/atof_char_vec.hpp&gt;
# include &lt;cstring&gt;

bool atof_char_vec_tst(void)
{	bool ok = true;
	double result;
	size_t i;

	// raw character data
	// index              012345678901234567
	const char* raw    = &quot;12 43 inf -inf nan&quot;;
	const size_t n_raw = std::strlen(raw);

	// vector form
	dismod_pde::vector&lt;char&gt; char_vec(n_raw);
	for(i = 0; i &lt; n_raw; i++)
		char_vec[i] = raw[i];

	// used for error reporting
	size_t line = 2;
	std::string file = &quot;my.csv&quot;;

	std::pair&lt;size_t,size_t&gt; sub_vec;
	//
	sub_vec.first  = 0;
	sub_vec.second = 2;
	result = dismod_pde::atof_char_vec(char_vec, sub_vec, line, file);
	ok &amp;= result == 12.;
	//
	sub_vec.first  = 3;
	sub_vec.second = 2;
	result = dismod_pde::atof_char_vec(char_vec, sub_vec, line, file);
	ok &amp;= result == 43.;
	//
	sub_vec.first  = 6;
	sub_vec.second = 3;
	result = dismod_pde::atof_char_vec(char_vec, sub_vec, line, file);
	ok &amp;= result == DISMOD4_PLUS_INFINITY;
	//
	sub_vec.first  = 10;
	sub_vec.second = 4;
	result = dismod_pde::atof_char_vec(char_vec, sub_vec, line, file);
	ok &amp;= result == - DISMOD4_PLUS_INFINITY;
	//
	sub_vec.first  = 15;
	sub_vec.second = 3;
	result = dismod_pde::atof_char_vec(char_vec, sub_vec, line, file);
	ok &amp;= dismod_pde::isnan(result);
	//
	return ok;
}
</pre>

</font></code>


<hr>Input File: example/atof_char_vec_tst.cpp

<hr>






<center><b><big><big><a name="6" id="6">6: dismod_pde Examples</a>
</big></big></b></center>
<br>
<b><big><a name="6.a" id="6.a">6.a: Contents</a></big></b>
<br>
<table>
<tr><td><a href="#6.1" target="_top">get_started.sh:&nbsp;6.1</a></td><td>get_started.sh:&nbsp;Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde_csv</td></tr><tr><td><a href="#6.2" target="_top">diabetes.sh:&nbsp;6.2</a></td><td>A&nbsp;Diabetes&nbsp;Incidence&nbsp;Estimation&nbsp;Example</td></tr><tr><td><a href="#6.3" target="_top">gaussian.sh:&nbsp;6.3</a></td><td>Simulate&nbsp;and&nbsp;Fit&nbsp;Where&nbsp;Incidence&nbsp;is&nbsp;Gaussian&nbsp;in&nbsp;Age&nbsp;an&nbsp;Cohort</td></tr></table>
<hr>Input File: omh/example.omh

<hr>
<center><b><big><big><a name="6.1" id="6.1">6.1: get_started.sh: Example and Test of dismod_pde_csv</a>
</big></big></b></center>
<br>
<b><big><a name="6.1.a" id="6.1.a">6.1.a: Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>&nbsp;./get_started.sh<br>
</span></font></code>
<a href="#6.1.1">6.1.1: <span style='white-space: nowrap'>./get_started.py</span></a>


<br>
<br>
<b><big><a name="6.1.b" id="6.1.b">6.1.b: Purpose</a></big></b>
<br>
This is a simple example and test of the 
dismod_pde csv interface <a href="#4.1">4.1: <span style='white-space: nowrap'>dismod_pde_csv</span></a>
. 
It exits with status zero if the test passes
and with status one if the test fails.
This example is located in the file
	
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>/share/doc/dismod_pde-</span></font><i><font color="black"><span style='white-space: nowrap'>yyyymmdd</span></font></i><font color="blue"><span style='white-space: nowrap'>/example/get_started.sh<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i></code>
 is the 
<a href="#3.j">3.j: <span style='white-space: nowrap'>prefix</span></a>
 
specified during the install procedure. 

<br>
<br>
<b><big><a name="6.1.c" id="6.1.c">6.1.c: python_path</a></big></b>
<br>
The following command sets the directory where the dismod_pde python
scripts are located. This should not be necessary once dismod_pde is installed.
<code><font color='blue'><pre style='display:inline'> 
python_path=&quot;$top_builddir/python&quot;
</pre></font></code>
 

<br>
<br>
<b><big><a name="6.1.d" id="6.1.d">6.1.d: dismod_pde_path</a></big></b>
<br>
The following command sets the directory where the binary <code><font color="blue">dismod_pde_csv</font></code>
file is located. This should not be necessary once dismod_pde is installed.
<code><font color='blue'><pre style='display:inline'> 
dismod_pde_path=&quot;$top_builddir/cpp&quot;
</pre></font></code>
 

<br>
<br>
<b><big><a name="6.1.e" id="6.1.e">6.1.e: parameter.csv</a></big></b>
<br>
The first thing we do is create the
<a href="#4.1.e">4.1.e: <span style='white-space: nowrap'>parameter.csv</span></a>
 file 
as follows:
<code><font color='blue'><pre style='display:inline'> 
cat &lt;&lt; EOF &gt; parameter.csv
name,value
age_grid,5 20
cohort_grid,1960 1980 2000 2020
max_ode_step,1
print_level,5
max_iteration,60
converge_tolerance,1e-3
EOF
</pre></font></code>

For this example,
we use large values for <code><font color="blue">delta_age</font></code> and <code><font color="blue">delta_cohort</font></code>
so that the resulting file <code><font color="blue">sfun_in.csv</font></code> is small.
Note that the first and last lines above are bash command that
instruct bash to create the file <code><font color="blue">parameter.csv</font></code> with the
contents between them.

<br>
<br>
<b><big><a name="6.1.f" id="6.1.f">6.1.f: effect_in.csv</a></big></b>
<br>
Next we create the
<a href="#4.1.h">4.1.h: <span style='white-space: nowrap'>effect_in.csv</span></a>
 input file.
For this example, 
the covariate information will be who made the measurements,
Jill or Jack:
<code><font color='blue'><pre style='display:inline'> 
cat &lt;&lt; EOF &gt; effect_in.csv
integrand,covariate,lower,initial,upper
incidence,x_jill,0.09531,0.09531,0.09531
m_excess,x_jill,0.09531,0.09531,0.09531
remission,x_jack,-1.00000,0.00000,1.00000
EOF
</pre></font></code>

We know that Jill is reports incidence and excess mortality data to be 1.1 
times the actual value.
We suspect that Jack reports remission data incorrectly, but we do not
know to what extent.
Note that log(1.1) = 0.095310 which is the fixed measurement effect for Jill.
Also note that log(.9) = -0.10536 will be the unknown measurement
effect for Jack.

<br>
<br>
<b><big><a name="6.1.g" id="6.1.g">6.1.g: measure_in.csv</a></big></b>
<br>
Next we create the
<a href="#4.1.f">4.1.f: <span style='white-space: nowrap'>measure_in.csv</span></a>
 file.
For this example, the stochastic rate functions are constant
and we measure them directly.  To be specific, their values are 
<code>
<span style='white-space: nowrap'>&nbsp;\rho&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;10^{-1}</span></code>
, 
<code>
<span style='white-space: nowrap'>&nbsp;\chi&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;10^{-2}</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;\omega&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;&nbsp;=&nbsp;10^{-3}</span></code>
 and
<code>
<span style='white-space: nowrap'>&nbsp;\iota&nbsp;(&nbsp;\cdot&nbsp;)&nbsp;=&nbsp;10^{-4}</span></code>
,
<code><font color='blue'><pre style='display:inline'> 
cat &lt;&lt; EOF &gt; measure_in.csv
meas_value,integrand,x_jill,x_jack,age_lower,age_upper,time_lower,time_upper,meas_like,meas_zeta,meas_sigma,c_notes
0.9e-1,remission,0,1,5,10,1990,2010,gaussian,1,1e-5,no_comment
0.9e-1,remission,0,1,10,15,1990,2010,gaussian,1,1e-5,no_comment
0.9e-1,remission,0,1,15,20,1990,2010,gaussian,1,1e-5,no_comment
1.0e-2,m_excess,0,1,5,15,1990,2010,gaussian,1,1e-5,no_comment
1.0e-3,m_other,0,1,10,20,1990,2010,gaussian,1,1e-5,no_comment
1.0e-4,incidence,0,1,5,15,1990,2010,gaussian,1,1e-5,no_comment
1.0e-1,remission,1,0,10,20,1990,2000,gaussian,1,1e-5,no_comment
1.1e-2,m_excess,1,0,5,15,1990,2000,gaussian,1,1e-5,no_comment
1.0e-3,m_other,1,0,10,20,1990,2000,gaussian,1,1e-5,no_comment
1.1e-4,incidence,1,0,5,15,1990,2000,gaussian,1,1e-5,no_comment
EOF
</pre></font></code>

Note that we had Jack take multiple remission measurements so that
we can estimate how accurate these measurements are.

<br>
<br>
<b><big><a name="6.1.h" id="6.1.h">6.1.h: template.csv</a></big></b>
<br>
Remove the file 
<a href="#4.1.g.a">4.1.g.a: <span style='white-space: nowrap'>template.csv</span></a>
 
(if it exists) and then recreate it.
<code><font color='blue'><pre style='display:inline'> 
echo 'create template.csv'
rm -f template.csv
echo 'dismod_pde_csv parameter.csv measure_in.csv template.csv'
$dismod_pde_path/dismod_pde_csv parameter.csv measure_in.csv template.csv
</pre></font></code>


<br>
<br>
<b><big><a name="6.1.i" id="6.1.i">6.1.i: sfun_in.csv</a></big></b>
<br>
Next we create the file <a href="#4.1">4.1: <span style='white-space: nowrap'>sfun_in.csv</span></a>
 
using <code><font color="blue">template.csv</font></code> and <a href="#4.2.2">4.2.2: <span style='white-space: nowrap'>d4_change_sfun_in.py</span></a>
:
The initial condition is $latex S(5, t) = 1$$ and
$latex C(5, t) = 0$$.
<code><font color='blue'><pre style='display:inline'> 
zeta=1e-5
zero_inf='0.0 if a &lt;= 5.1 else inf'
$python_path/d4_change_sfun_in.py template.csv sfun_in.csv \
-comment            'zeta      lower       initial       upper' \
-optimize_S         $zeta       0.00          1.00         1.0  \
-optimize_C         $zeta       0.00          0.05         1.0  \
-optimize_iota      $zeta       0.00          0.05         1.0  \
-optimize_rho       $zeta       0.00          0.05         1.0  \
-optimize_chi       $zeta       0.00          0.05         1.0  \
-optimize_omega     $zeta       0.00          0.05         1.0  \
\
-comment            'like       zeta          sigma       mean' \
-prior_S         gaussian      $zeta     &quot;$zero_inf&quot;      1.00  \
-prior_C         gaussian      $zeta     &quot;$zero_inf&quot;      0.00  \
-prior_iota      gaussian      $zeta            inf       0.00  \
-prior_rho       gaussian      $zeta            inf       0.00  \
-prior_chi       gaussian      $zeta            inf       0.00  \
-prior_omega     gaussian      $zeta            inf       0.00  \
\
-comment            'like       zeta          sigma      order' \
-age_S           gaussian      $zeta            0.0         1   \
-age_C           gaussian      $zeta            0.0         1   \
-age_iota        gaussian      $zeta           1e-1         1   \
-age_rho         gaussian      $zeta           1e-1         1   \
-age_chi         gaussian      $zeta           1e-1         1   \
-age_omega       gaussian      $zeta           1e-1         1   \
\
-comment            'like       zeta          sigma      order' \
-cohort_S        gaussian      $zeta            inf         1   \
-cohort_C        gaussian      $zeta            inf         1   \
-cohort_iota     gaussian      $zeta           1e-1         1   \
-cohort_rho      gaussian      $zeta           1e-1         1   \
-cohort_chi      gaussian      $zeta           1e-1         1   \
-cohort_omega    gaussian      $zeta           1e-1         1   \
\
-comment            'name       zeta            sigma' \
-cross_S         gaussian      $zeta              inf  \
-cross_C         gaussian      $zeta              inf  \
-cross_iota      gaussian      $zeta              inf  \
-cross_rho       gaussian      $zeta              inf  \
-cross_chi       gaussian      $zeta              inf  \
-cross_omega     gaussian      $zeta              inf  
</pre></font></code>


<br>
<br>
<b><big><a name="6.1.j" id="6.1.j">6.1.j: Running dismod_pde_csv</a></big></b>
<br>
Next we create the files
<a href="#4.1.j">4.1.j: <span style='white-space: nowrap'>measure_out.csv</span></a>
,
<a href="#4.1.i">4.1.i: <span style='white-space: nowrap'>sfun_out.csv</span></a>
, and
<a href="#4.1.k">4.1.k: <span style='white-space: nowrap'>effect_out.csv</span></a>
,
by running <code><font color="blue">dismod_pde_csv</font></code>.
<code><font color='blue'><pre style='display:inline'> 
$dismod_pde_path/dismod_pde_csv parameter.csv \
	measure_in.csv     measure_out.csv   \
	sfun_in.csv        sfun_out.csv \
	effect_in.csv      effect_out.csv
</pre></font></code>


<br>
<br>
<b><big><a name="6.1.k" id="6.1.k">6.1.k: effect_out.csv</a></big></b>
<br>
The file <a href="#4.1.k">4.1.k: <span style='white-space: nowrap'>effect_out.csv</span></a>

(displayed below)
contains the fitting results for the measurement effects;
i.e., <code>
<span style='white-space: nowrap'>&nbsp;\beta</span></code>
.  
<code><font color="blue">
<br>
<pre style='display:inline'>integrand,covariate,estimate
incidence,x_jill,0.09531
m_excess,x_jill,0.09531
remission,x_jack,-0.105361
</pre><br>
</font></code><br>
<b><a name="6.1.k.a" id="6.1.k.a">6.1.k.a: Check effect_out.csv</a></b>

<code><font color='blue'><pre style='display:inline'> 
echo 'check effect_out.csv'
cat &lt;&lt; EOF &gt; check_effect_out.py
import csv
import sys
file   = open('effect_out.csv', 'r')
reader = csv.DictReader(file, skipinitialspace=True)
check  = { 'x_jill' :  0.095310 , 'x_jack' : -0.10536 }
ok     = True
data   = []
for r in reader :
	file_value  = float( r['estimate'] )
	check_value = check[ r['covariate'] ]
	ok          = ok and abs(1.0 - file_value/check_value) &lt; 1e-5
	data.append(r)
if ok :
	sys.exit(None)
for r in data :
	file_value  = float( r['estimate'] )
	check_value = check[ r['covariate'] ]
	rel_error   = 1.0 - file_value/check_value
	if abs(1.0 - file_value/check_value) &gt;= 1e-5 :
		print 'file_value =', file_value ,  \
			', check_value =', check_value , \
			', rel_error =', rel_error 
sys.exit('Error in effect_out.csv')
EOF
$top_builddir/python.sh check_effect_out.py
</pre></font></code>


<br>
<br>
<b><big><a name="6.1.l" id="6.1.l">6.1.l: measure_out.csv</a></big></b>
<br>
The file <a href="#4.1.j">4.1.j: <span style='white-space: nowrap'>measure_out.csv</span></a>

(displayed below)
contains the fitting results for the measurements.
Note that the measurement effects have been used to correct the data to
its proper value.
Also note that if <code><font color="blue">meas_sigma</font></code> is zero or infinity,
the corresponding scaled residual is <code><font color="blue">nan</font></code>.
<code><font color="blue">
<br>
<pre style='display:inline'>age,cohort,time,integrand,meas_value,adjusted,model,residual,scaled,x_jill,x_jack,age_lower,age_upper,time_lower,time_upper,meas_like,meas_zeta,meas_sigma,c_notes
7.5,1992.5,2000,remission,0.09,0.1,0.1,6.68077e-14,6.68077e-09,0,1,5,10,1990,2010,gaussian,1,1e-5,no_comment
12.5,1987.5,2000,remission,0.09,0.1,0.1,-5.45397e-15,-5.45397e-10,0,1,10,15,1990,2010,gaussian,1,1e-5,no_comment
17.5,1982.5,2000,remission,0.09,0.1,0.1,-7.77156e-14,-7.77156e-09,0,1,15,20,1990,2010,gaussian,1,1e-5,no_comment
10,1990,2000,m_excess,0.01,0.01,0.01,-6.60989e-12,-6.60989e-07,0,1,5,15,1990,2010,gaussian,1,1e-5,no_comment
15,1985,2000,m_other,0.001,0.001,0.001,9.08586e-13,9.08586e-08,0,1,10,20,1990,2010,gaussian,1,1e-5,no_comment
10,1990,2000,incidence,0.0001,0.0001,0.0001,-9.00083e-11,-9.00083e-06,0,1,5,15,1990,2010,gaussian,1,1e-5,no_comment
15,1980,1995,remission,0.1,0.1,0.1,2.08916e-13,2.08916e-08,1,0,10,20,1990,2000,gaussian,1,1e-5,no_comment
10,1985,1995,m_excess,0.011,0.01,0.01,6.97264e-12,6.97264e-07,1,0,5,15,1990,2000,gaussian,1,1e-5,no_comment
15,1980,1995,m_other,0.001,0.001,0.001,-2.41019e-11,-2.41019e-06,1,0,10,20,1990,2000,gaussian,1,1e-5,no_comment
10,1985,1995,incidence,0.00011,0.0001,0.0001,-7.57953e-11,-7.57953e-06,1,0,5,15,1990,2000,gaussian,1,1e-5,no_comment
</pre><br>
</font></code><br>
<b><a name="6.1.l.a" id="6.1.l.a">6.1.l.a: Check measure_out.csv</a></b>

<code><font color='blue'><pre style='display:inline'> 
echo 'check measure_out.csv'
cat &lt;&lt; EOF &gt; check_measure_out.py
import csv
import sys
file   = open('measure_out.csv', 'r')
reader = csv.DictReader(file, skipinitialspace=True)
check  = { 
'remission':.1 , 'm_excess':.01 , 'm_other':.001, 'incidence':.0001  }
ok     = True
data   = []
for r in reader :
	file_value  = float( r['model'] )
	check_value = check[ r['integrand'] ]
	ok          = ok and abs(file_value - check_value) &lt; 1e-5
	data.append(r)
if ok :
	sys.exit(None)
for r in data :
	file_value  = float( r['model'] )
	check_value = check[ r['integrand'] ]
	print 'file_value =', file_value, ', check_value =', check_value
sys.exit('Error in measure_out.csv')
EOF
$top_builddir/python.sh check_measure_out.py
</pre></font></code>
 

<br>
<br>
<b><big><a name="6.1.m" id="6.1.m">6.1.m: sfun_out.csv</a></big></b>
<br>
The file <a href="#4.1.i">4.1.i: <span style='white-space: nowrap'>sfun_out.csv</span></a>

(displayed below)
contains the fitting results for the stochastic functions;
i.e., <code>
<span style='white-space: nowrap'>&nbsp;S,&nbsp;C,&nbsp;\iota,&nbsp;\rho,&nbsp;\chi,&nbsp;\omega</span></code>
.
Note that if a <code>
<span style='white-space: nowrap'>&nbsp;\sigma</span></code>
 value is zero or infinity,
the corresponding scaled residual is <code><font color="blue">nan</font></code>.
<code><font color="blue">
<br>
<pre style='display:inline'>age,cohort,time,function,estimate,prior_residual,prior_scaled,age_residual,age_scaled,cohort_residual,cohort_scaled,cross_residual,cross_scaled
5,1960,1965,S,1,0,nan,2.62811e-14,nan,0,nan,1.70575e-10,nan
5,1960,1965,C,-3.38813e-21,0,nan,2.79421e-12,nan,0,nan,-1.54444e-08,nan
5,1960,1965,iota,0.0001,2.3979,nan,-2.77876e-09,-2.77876e-08,-2.51968e-07,-2.51968e-06,2.11959e-09,nan
5,1960,1965,rho,0.1,9.21044,nan,9.49991e-08,9.49991e-07,1.4696e-07,1.4696e-06,-5.93186e-09,nan
5,1960,1965,chi,0.01,6.90876,nan,7.76868e-08,7.76868e-07,-2.69371e-08,-2.69371e-07,-2.41883e-08,nan
5,1960,1965,omega,0.001,4.61512,nan,-2.1324e-07,-2.1324e-06,-1.68487e-07,-1.68487e-06,-1.22236e-09,nan
5,1980,1985,S,1,0,nan,2.17673e-14,nan,0,nan,-1.90389e-10,nan
5,1980,1985,C,-3.38813e-21,0,nan,2.25775e-12,nan,0,nan,5.02489e-09,nan
5,1980,1985,iota,0.0001,2.3979,nan,3.39336e-08,3.39336e-07,-9.78017e-08,-9.78017e-07,9.98264e-09,nan
5,1980,1985,rho,0.1,9.21044,nan,-7.74384e-09,-7.74384e-08,-1.03283e-08,-1.03283e-07,-7.13216e-09,nan
5,1980,1985,chi,0.01,6.90876,nan,-3.41267e-07,-3.41267e-06,-8.4658e-07,-8.4658e-06,3.27805e-08,nan
5,1980,1985,omega,0.001,4.61512,nan,-2.34411e-07,-2.34411e-06,8.18652e-08,8.18652e-07,1.54231e-08,nan
5,2000,2005,S,1,0,nan,2.17708e-14,nan,0,nan,nan,nan
5,2000,2005,C,-3.38813e-21,0,nan,2.12097e-12,nan,0,nan,nan,nan
5,2000,2005,iota,0.0001,2.3979,nan,2.06838e-07,2.06838e-06,2.13434e-07,2.13434e-06,nan,nan
5,2000,2005,rho,0.1,9.21044,nan,-1.31277e-07,-1.31277e-06,-2.26221e-07,-2.26221e-06,nan,nan
5,2000,2005,chi,0.01,6.90875,nan,2.26508e-07,2.26508e-06,-5.03156e-08,-5.03156e-07,nan,nan
5,2000,2005,omega,0.001,4.61512,nan,3.27248e-08,3.27248e-07,4.97986e-08,4.97986e-07,nan,nan
5,2020,2025,S,1,0,nan,nan,nan,nan,nan,nan,nan
5,2020,2025,C,-3.38813e-21,0,nan,nan,nan,nan,nan,nan,nan
5,2020,2025,iota,0.0001,2.3979,nan,nan,nan,nan,nan,nan,nan
5,2020,2025,rho,0.1,9.21044,nan,nan,nan,nan,nan,nan,nan
5,2020,2025,chi,0.01,6.90875,nan,nan,nan,nan,nan,nan,nan
5,2020,2025,omega,0.001,4.61512,nan,nan,nan,nan,nan,nan,nan
20,1960,1980,S,0.98432,-0.0158038,nan,nan,nan,2.95445e-09,nan,nan,nan
20,1960,1980,C,0.00072314,4.29475,nan,nan,nan,-2.67505e-07,nan,nan,nan
20,1960,1980,iota,0.0001,2.3979,nan,nan,nan,-2.15255e-07,-2.15255e-06,nan,nan
20,1960,1980,rho,0.1,9.21044,nan,nan,nan,4.42171e-08,4.42171e-07,nan,nan
20,1960,1980,chi,0.01,6.90876,nan,nan,nan,-4.45891e-07,-4.45891e-06,nan,nan
20,1960,1980,omega,0.001,4.61512,nan,nan,nan,-1.89658e-07,-1.89658e-06,nan,nan
20,1980,2000,S,0.98432,-0.0158038,nan,nan,nan,-3.29763e-09,nan,nan,nan
20,1980,2000,C,0.00072314,4.29475,nan,nan,nan,8.70336e-08,nan,nan,nan
20,1980,2000,iota,0.0001,2.3979,nan,nan,nan,7.51026e-08,7.51026e-07,nan,nan
20,1980,2000,rho,0.1,9.21044,nan,nan,nan,-1.33861e-07,-1.33861e-06,nan,nan
20,1980,2000,chi,0.01,6.90875,nan,nan,nan,-2.78805e-07,-2.78805e-06,nan,nan
20,1980,2000,omega,0.001,4.61512,nan,nan,nan,3.49002e-07,3.49002e-06,nan,nan
20,2000,2020,S,0.98432,-0.0158038,nan,nan,nan,nan,nan,nan,nan
20,2000,2020,C,0.00072314,4.29475,nan,nan,nan,nan,nan,nan,nan
20,2000,2020,iota,0.0001,2.3979,nan,nan,nan,nan,nan,nan,nan
20,2000,2020,rho,0.1,9.21044,nan,nan,nan,nan,nan,nan,nan
20,2000,2020,chi,0.01,6.90875,nan,nan,nan,nan,nan,nan,nan
20,2000,2020,omega,0.001,4.61512,nan,nan,nan,nan,nan,nan,nan
</pre><br>
</font></code><br>
<b><a name="6.1.m.a" id="6.1.m.a">6.1.m.a: Check sfun_out.csv</a></b>

<code><font color='blue'><pre style='display:inline'> 
echo 'check sfun_out.csv'
cat &lt;&lt; EOF &gt; check_sfun_out.py
import csv
import sys
file   = open('sfun_out.csv', 'r')
reader = csv.DictReader(file, skipinitialspace=True)
check  = { 
'rho' : .1 , 'chi' : .01 , 'omega' : .001, 'iota' : .0001  }
ok     = True
data   = []
for r in reader :
	function = r['function']
	if function != 'S' and function != 'C' :
		file_value  = float( r['estimate'] )
		check_value = check[ r['function'] ]
		ok          = ok and abs(1.0 - file_value/check_value) &lt; 1e-3
	data.append(r)
if ok :
	sys.exit(None)
for r in data :
	function = r['function']
	if function != 'S' and function != 'C' :
		file_value  = float( r['estimate'] )
		check_value = check[ r['function'] ]
		rel_error   = 1.0 - file_value/check_value
		print 'file_value =', file_value , \
			', check_value =', check_value , \
			', rel_error =', rel_error
sys.exit('Error in sfun_out.csv')
EOF
$top_builddir/python.sh \
	check_sfun_out.py
</pre></font></code>


<br>
<br>
<b><big><a name="6.1.n" id="6.1.n">6.1.n: Final Message</a></big></b>
<br>
If this shell script reaches here, then all the tests have passed.
<code><font color='blue'><pre style='display:inline'> 
echo 'get_started.sh: OK'
</pre></font></code>


<hr>Input File: example/get_started/get_started.sh.in

<hr>
 

<center><b><big><big><a name="6.1.1" id="6.1.1">6.1.1: get_started.py: Example and Test of dismod_pde_csv</a>
</big></big></b></center>
<br>
<b><big><a name="6.1.1.a" id="6.1.1.a">6.1.1.a: Syntax</a></big></b>

<code><font color="blue"><br>
./get_started.py</font></code>

<br>
<br>
<b><big><a name="6.1.1.b" id="6.1.1.b">6.1.1.b: Purpose</a></big></b>
<br>
This is a simple example and test of the 
dismod_pde csv interface <a href="#4.1">4.1: <span style='white-space: nowrap'>dismod_pde_csv</span></a>
. 
It exits with status zero if the test passes
and with status one if the test fails.
This example is located in the file
	
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>/share/doc/dismod_pde-</span></font><i><font color="black"><span style='white-space: nowrap'>yyyymmdd</span></font></i><font color="blue"><span style='white-space: nowrap'>/example/get_started.py<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i></code>
 is the 
<a href="#3.j">3.j: <span style='white-space: nowrap'>prefix</span></a>
 
specified during the install procedure. 

<br>
<br>
<b><big><a name="6.1.1.c" id="6.1.1.c">6.1.1.c: Documentation</a></big></b>
<br>
This program is a translation of <a href="#6.1">6.1: <span style='white-space: nowrap'>get_started.sh</span></a>
 to python
which is has more documentation.

<br>
<br>
<b><big><a name="6.1.1.d" id="6.1.1.d">6.1.1.d: Source Code</a></big></b>

<code><font color="blue">
<br>
<pre style='display:inline'> 
# ----------------------------------------------------------------------------
import sys
import os
import csv
# ----------------------------------------------------------------------------
# create parameter.csv
parameter = \
'''name,value
age_grid,5 20
cohort_grid,1960 1980 2000 2020
max_ode_step,1
print_level,5
max_iteration,60
converge_tolerance,1e-7'''
f_out = open('parameter.csv', 'w')
f_out.write(parameter)
f_out.close()
# ----------------------------------------------------------------------------
# create effect_in.csv
effect_in = \
'''integrand,covariate,lower,initial,upper
incidence,x_jill,0.09531,0.09531,0.09531
m_excess,x_jill,0.09531,0.09531,0.09531
remission,x_jack,-1.00000,0.00000,1.00000'''
f_out = open('effect_in.csv', 'w')
f_out.write(effect_in)
f_out.close()
# ----------------------------------------------------------------------------
# create measure_in.csv
measure_in = \
'''meas_value,integrand,x_jill,x_jack,age_lower,age_upper,time_lower,time_upper,meas_like,meas_zeta,meas_sigma,c_notes
0.9e-1,remission,0,1,5,10,1990,2010,gaussian,1,1e-5,no_comment
0.9e-1,remission,0,1,10,15,1990,2010,gaussian,1,1e-5,no_comment
0.9e-1,remission,0,1,15,20,1990,2010,gaussian,1,1e-5,no_comment
1.0e-2,m_excess,0,1,5,15,1990,2010,gaussian,1,1e-5,no_comment
1.0e-3,m_other,0,1,10,20,1990,2010,gaussian,1,1e-5,no_comment
1.0e-4,incidence,0,1,5,15,1990,2010,gaussian,1,1e-5,no_comment
1.0e-1,remission,1,0,10,20,1990,2000,gaussian,1,1e-5,no_comment
1.1e-2,m_excess,1,0,5,15,1990,2000,gaussian,1,1e-5,no_comment
1.0e-3,m_other,1,0,10,20,1990,2000,gaussian,1,1e-5,no_comment
1.1e-4,incidence,1,0,5,15,1990,2000,gaussian,1,1e-5,no_comment'''
f_out = open('measure_in.csv', 'w')
f_out.write(measure_in)
f_out.close()
# ----------------------------------------------------------------------------
# create template.csv
os.system('rm -f template.csv')
home_path    = os.getenv('HOME')
dismod_pde_path = top_builddir + '/cpp/dismod_pde_csv'
command      = dismod_pde_path + ' parameter.csv measure_in.csv template.csv'
os.system(command)
# ----------------------------------------------------------------------------
# create sfun_in.csv
f_in        = open('template.csv', 'r')
template_in = csv.DictReader(f_in)
f_out       = open('sfun_in.csv', 'w')
sfun_in     = csv.writer( f_out, lineterminator='\n')
#
header  = [
	'age', 'cohort', 'time', 'function',
	'optimize_zeta', 'optimize_lower', 'optimize_initial', 'optimize_upper',
	'prior_like',    'prior_mean',     'prior_zeta',       'prior_sigma',
	'age_like',      'age_zeta',       'age_sigma',        'age_order',
	'cohort_like',   'cohort_zeta',    'cohort_sigma',     'cohort_order',
	'cross_like',    'cross_zeta',     'cross_sigma'
]
sfun_in.writerow( header )
#
for row in template_in :
	# extract some values
	function = row['function']
	age      = float( row['age'] )
	# set optimize values
	row['optimize_zeta']               =   '1e-05'
	row['optimize_lower']              =   '0.0'
	row['optimize_initial']            = '0.05'
	row['optimize_upper']              = '1.0'
	if row['function'] == 'S' :
		row['optimize_initial']   = '1.0'
	#
	# set prior values
	row['prior_like']                  =   'gaussian'
	row['prior_zeta']                  =   '1e-05'
	row['prior_sigma']                 =   'inf'
	row['prior_mean']                  =   '0.0'
	if (function == 'S') :
		row['prior_mean']         = '1.0'
		if (age &lt;= 5.1 ) :
			row['prior_sigma']   = '0.0'
	if (function == 'C') &amp; (age &lt;= 5.1 ) :
		row['prior_sigma']        = '0.0'
	#
	# set age values
	row['age_like']                    =   'gaussian'
	row['age_zeta']                    =   '1e-05'
	row['age_sigma']                   =   '0.1'
	row['age_order']                   =   '1'
	if (function == 'S') | (function == 'C') :
		row['age_sigma']          =   '0.0'
	#
	# set cohort values
	row['cohort_like']                 =   'gaussian'
	row['cohort_zeta']                 =   '1e-05'
	row['cohort_sigma']                =   '0.1'
	row['cohort_order']                =   '1'
	if (function == 'S') | (function == 'C') :
		row['cohort_sigma']       =   'inf'
	#
	# set cross values
	row['cross_like']                  =   'gaussian'
	row['cross_zeta']                  =   '1e-05'
	row['cross_sigma']                 =   'inf'
	#
	# write out row
	temp = []
	for field in header :
		temp.append( row[field] )
	sfun_in.writerow( temp )
f_in.close()
f_out.close()
#
# ----------------------------------------------------------------------------
# create measure_out.csv sfun_out.csv and effect_out.csv
command = top_builddir + \
'''/cpp/dismod_pde_csv parameter.csv \
	measure_in.csv     measure_out.csv   \
	sfun_in.csv        sfun_out.csv \
	effect_in.csv      effect_out.csv
'''
os.system(command)
# ----------------------------------------------------------------------------
# check effect_out.csv 
f_in       = open('effect_out.csv', 'r')
effect_out = csv.DictReader(f_in)
check  = { 'x_jill' :  0.095310 , 'x_jack' : -0.10536 }
ok     = True
data   = []
for row in effect_out :
	file_value  = float( row['estimate'] )
	check_value = check[ row['covariate'] ]
	ok          = ok and abs(1.0 - file_value/check_value) &lt; 5e-4
	data.append([ file_value , check_value ] )
if not ok :
	for row in data : 
		file_value  = row[0]
 		check_value = row[1]
 		rel_error   = 1.0 - file_value/check_value
 		print 'file_value =', file_value ,  \
			', check_value =', check_value , \
			', rel_error =', rel_error 
	sys.exit('Error in effect_out.csv')
f_in.close()
# ----------------------------------------------------------------------------
# check measure_out.csv
f_in        = open('measure_out.csv', 'r')
measure_out = csv.DictReader( f_in )
check  = { 
	'remission':.1 , 'm_excess':.01 , 'm_other':.001, 'incidence':.0001  }
ok     = True
data   = []
for row in measure_out :
	file_value  = float( row['model'] )
	check_value = check[ row['integrand'] ]
	ok          = ok and abs(file_value - check_value) &lt; 1e-5
	data.append([ file_value , check_value ] )
if not ok :
	for row in data : 
		file_value  = row[0]
 		check_value = row[1]
 		rel_error   = 1.0 - file_value/check_value
 		print 'file_value =', file_value ,  \
			', check_value =', check_value , \
			', rel_error =', rel_error 
	sys.exit('Error in measure_out.csv')
f_in.close()
# ----------------------------------------------------------------------------
# check sfun_out.csv
f_in      = open('sfun_out.csv', 'r')
sfun_out  = csv.DictReader( f_in ) 
check  = { 
	'rho' : .1 , 'chi' : .01 , 'omega' : .001, 'iota' : .0001  }
ok     = True
data   = []
for row in sfun_out :
	function = row['function']
	if function != 'S' and function != 'C' :
		file_value  = float( row['estimate'] )
		check_value = check[ row['function'] ]
		ok          = ok and abs(1.0 - file_value/check_value) &lt; 1e-5
		data.append([ file_value , check_value ] )
if not ok :
	for row in data : 
		file_value  = row[0]
 		check_value = row[1]
 		rel_error   = 1.0 - file_value/check_value
 		print 'file_value =', file_value ,  \
			', check_value =', check_value , \
			', rel_error =', rel_error 
	sys.exit('Error in sfun_out.csv')
f_in.close()
# ----------------------------------------------------------------------------
# No errors
sys.exit(None)
</pre>

</font></code>


<hr>Input File: example/get_started/get_started.py.in

<hr>
 


<center><b><big><big><a name="6.2" id="6.2">6.2: A Diabetes Incidence Estimation Example</a>
</big></big></b></center>
<br>
<b><big><a name="6.2.a" id="6.2.a">6.2.a: Syntax</a></big></b>

<code><font color="blue"><br>
./diabetes.sh</font></code>

<br>
<br>
<b><big><a name="6.2.b" id="6.2.b">6.2.b: Purpose</a></big></b>
<br>
This is a real world example and test of dismod_pde.
It exits with status one if it detects an error 
and with status zero otherwise.
This example is located in the file
	
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>/share/doc/dismod_pde-</span></font><i><font color="black"><span style='white-space: nowrap'>yyyymmdd</span></font></i><font color="blue"><span style='white-space: nowrap'>/example/diabetes.sh<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i></code>
 is the 
<a href="#3.j">3.j: <span style='white-space: nowrap'>prefix</span></a>
 
specified during the install procedure. 

<br>
<br>
<b><big><a name="6.2.c" id="6.2.c">6.2.c: python_path</a></big></b>
<br>
The following command sets the directory where the dismod_pde python
scripts are located. This should not be necessary once dismod_pde is installed.
<code><font color='blue'><pre style='display:inline'> 
python_path=&quot;$top_builddir/python&quot;
</pre></font></code>
 

<br>
<br>
<b><big><a name="6.2.d" id="6.2.d">6.2.d: dismod_pde_path</a></big></b>
<br>
The following command sets the directory where the binary <code><font color="blue">dismod_pde_csv</font></code>
file is located. This should not be necessary once dismod_pde is installed.
<code><font color='blue'><pre style='display:inline'> 
dismod_pde_path=&quot;$top_builddir/cpp&quot;
</pre></font></code>
 

<br>
<br>
<b><big><a name="6.2.e" id="6.2.e">6.2.e: grid function</a></big></b>

<code><font color='blue'><pre style='display:inline'> 
make_grid() {
	first=&quot;$1&quot; ; last=&quot;$2&quot; ; increment=&quot;$3&quot; ; grid=''
	for (( value = first; value &lt; last+increment; value = value+increment ))
	do
		grid=&quot;$grid $value&quot;
	done
}
</pre></font></code>


<br>
<br>
<b><big><a name="6.2.f" id="6.2.f">6.2.f: Global Parameters</a></big></b>
<br>
The following parameters are used globally in this file and do not change:
<code><font color='blue'><pre style='display:inline'> 
# step size between age and cohort grid points
global_grid_step=4

# age grid parameters
global_age_min=20 
global_age_max=80
age_step=&quot;$global_grid_step&quot;
make_grid $global_age_min $global_age_max $age_step
global_age_grid=&quot;$grid&quot;  # age grid values
echo &quot;age_grid=$global_age_grid&quot;
#
# minimum and maximum measurement time
global_time_min=1980
global_time_max=2010
#
age_max=`echo &quot;$global_age_grid&quot; | sed -e 's|.* ||'`
cohort_min=`expr $global_time_min - $age_max`
cohort_max=`expr $global_time_max - $global_age_min`
cohort_step=&quot;$global_grid_step&quot;
make_grid $cohort_min $cohort_max $cohort_step
global_cohort_grid=&quot;$grid&quot;
echo &quot;cohort_grid=$global_cohort_grid&quot;
#
global_zeta=1e-6   # value of zeta in all cases
</pre></font></code>

-----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.2.g" id="6.2.g">6.2.g: parameter.csv</a></big></b>
<br>
The <a href="#4.1.e">4.1.e: <span style='white-space: nowrap'>parameter.csv</span></a>
 
file for this example is as follows:

<code><font color="blue">
<br>
<pre style='display:inline'>name,value
age_grid, 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80
cohort_grid, 1900 1904 1908 1912 1916 1920 1924 1928 1932 1936 1940 1944 1948 1952 1956 1960 1964 1968 1972 1976 1980 1984 1988 1992
max_ode_step,1.0
print_level,5
max_iteration,50
converge_tolerance,1e-3
debug_output,1
</pre><br>
</font></code>-----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.2.h" id="6.2.h">6.2.h: effect_in.csv</a></big></b>
<br>
For this example, there are no covariates and
the <a href="#4.1.h">4.1.h: <span style='white-space: nowrap'>effect_in.csv</span></a>
 file is as follows:
 
<code><font color="blue">
<br>
<pre style='display:inline'>integrand,covariate,lower,initial,upper
</pre><br>
</font></code>-----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.2.i" id="6.2.i">6.2.i: measure_in.csv</a></big></b>
<br>
All cause mortality data (from www.mortality.org) is assumed to be perfect,
relative risk data (from literature) is also assumed to be perfect,
and prevalence data from measurements.

<code><font color="blue">
<br>
<pre style='display:inline'>integrand,age_lower,age_upper,time_lower,time_upper,meas_like,meas_zeta,meas_sigma,meas_value,c_iso3
m_all,20.0,20.0,1980.0,1980.0,gaussian,1e-06,0.0,0.00196,AUT
m_all,20.0,20.0,1990.0,1990.0,gaussian,1e-06,0.0,0.00152,AUT
m_all,20.0,20.0,2000.0,2000.0,gaussian,1e-06,0.0,0.00096,AUT
m_all,20.0,20.0,2010.0,2010.0,gaussian,1e-06,0.0,0.00098,AUT
m_all,30.0,30.0,1980.0,1980.0,gaussian,1e-06,0.0,0.00148,AUT
m_all,30.0,30.0,1990.0,1990.0,gaussian,1e-06,0.0,0.00153,AUT
m_all,30.0,30.0,2000.0,2000.0,gaussian,1e-06,0.0,0.00079,AUT
m_all,30.0,30.0,2010.0,2010.0,gaussian,1e-06,0.0,0.00067,AUT
m_all,40.0,40.0,1980.0,1980.0,gaussian,1e-06,0.0,0.00315,AUT
m_all,40.0,40.0,1990.0,1990.0,gaussian,1e-06,0.0,0.00252,AUT
m_all,40.0,40.0,2000.0,2000.0,gaussian,1e-06,0.0,0.00198,AUT
m_all,40.0,40.0,2010.0,2010.0,gaussian,1e-06,0.0,0.00107,AUT
m_all,50.0,50.0,1980.0,1980.0,gaussian,1e-06,0.0,0.00857,AUT
m_all,50.0,50.0,1990.0,1990.0,gaussian,1e-06,0.0,0.00602,AUT
m_all,50.0,50.0,2000.0,2000.0,gaussian,1e-06,0.0,0.00506,AUT
m_all,50.0,50.0,2010.0,2010.0,gaussian,1e-06,0.0,0.00403,AUT
m_all,60.0,60.0,1980.0,1980.0,gaussian,1e-06,0.0,0.02262,AUT
m_all,60.0,60.0,1990.0,1990.0,gaussian,1e-06,0.0,0.01592,AUT
m_all,60.0,60.0,2000.0,2000.0,gaussian,1e-06,0.0,0.01242,AUT
m_all,60.0,60.0,2010.0,2010.0,gaussian,1e-06,0.0,0.01051,AUT
m_all,70.0,70.0,1980.0,1980.0,gaussian,1e-06,0.0,0.04714,AUT
m_all,70.0,70.0,1990.0,1990.0,gaussian,1e-06,0.0,0.04599,AUT
m_all,70.0,70.0,2000.0,2000.0,gaussian,1e-06,0.0,0.03061,AUT
m_all,70.0,70.0,2010.0,2010.0,gaussian,1e-06,0.0,0.02303,AUT
m_all,80.0,80.0,1980.0,1980.0,gaussian,1e-06,0.0,0.13060,AUT
m_all,80.0,80.0,1990.0,1990.0,gaussian,1e-06,0.0,0.10618,AUT
m_all,80.0,80.0,2000.0,2000.0,gaussian,1e-06,0.0,0.09771,AUT
m_all,80.0,80.0,2010.0,2010.0,gaussian,1e-06,0.0,0.06313,AUT
relative_risk,30.0,30.0,1980.0,1980.0,gaussian,1e-06,0.0,5.0,AUT
relative_risk,30.0,30.0,1990.0,1990.0,gaussian,1e-06,0.0,5.0,AUT
relative_risk,30.0,30.0,2000.0,2000.0,gaussian,1e-06,0.0,5.0,AUT
relative_risk,30.0,30.0,2010.0,2010.0,gaussian,1e-06,0.0,5.0,AUT
relative_risk,40.0,40.0,1980.0,1980.0,gaussian,1e-06,0.0,4.3,AUT
relative_risk,40.0,40.0,1990.0,1990.0,gaussian,1e-06,0.0,4.3,AUT
relative_risk,40.0,40.0,2000.0,2000.0,gaussian,1e-06,0.0,4.3,AUT
relative_risk,40.0,40.0,2010.0,2010.0,gaussian,1e-06,0.0,4.3,AUT
relative_risk,50.0,50.0,1980.0,1980.0,gaussian,1e-06,0.0,3.6,AUT
relative_risk,50.0,50.0,1990.0,1990.0,gaussian,1e-06,0.0,3.6,AUT
relative_risk,50.0,50.0,2000.0,2000.0,gaussian,1e-06,0.0,3.6,AUT
relative_risk,50.0,50.0,2010.0,2010.0,gaussian,1e-06,0.0,3.6,AUT
relative_risk,60.0,60.0,1980.0,1980.0,gaussian,1e-06,0.0,2.9,AUT
relative_risk,60.0,60.0,1990.0,1990.0,gaussian,1e-06,0.0,2.9,AUT
relative_risk,60.0,60.0,2000.0,2000.0,gaussian,1e-06,0.0,2.9,AUT
relative_risk,60.0,60.0,2010.0,2010.0,gaussian,1e-06,0.0,2.9,AUT
relative_risk,70.0,70.0,1980.0,1980.0,gaussian,1e-06,0.0,2.2,AUT
relative_risk,70.0,70.0,1990.0,1990.0,gaussian,1e-06,0.0,2.2,AUT
relative_risk,70.0,70.0,2000.0,2000.0,gaussian,1e-06,0.0,2.2,AUT
relative_risk,70.0,70.0,2010.0,2010.0,gaussian,1e-06,0.0,2.2,AUT
relative_risk,80.0,80.0,1980.0,1980.0,gaussian,1e-06,0.0,1.5,AUT
relative_risk,80.0,80.0,1990.0,1990.0,gaussian,1e-06,0.0,1.5,AUT
relative_risk,80.0,80.0,2000.0,2000.0,gaussian,1e-06,0.0,1.5,AUT
relative_risk,80.0,80.0,2010.0,2010.0,gaussian,1e-06,0.0,1.5,AUT
prevalence,75.0,75.0,1985.0,1985.0,gaussian,1.00e-06,9.53e-02,0.0359,AUT
prevalence,75.0,75.0,1995.0,1995.0,gaussian,1.00e-06,9.53e-02,0.0764,AUT
prevalence,75.0,75.0,2005.0,2005.0,gaussian,1.00e-06,9.53e-02,0.1161,AUT
prevalence,65.0,65.0,1985.0,1985.0,gaussian,1.00e-06,9.53e-02,0.0383,AUT
prevalence,65.0,65.0,1995.0,1995.0,gaussian,1.00e-06,9.53e-02,0.0580,AUT
prevalence,65.0,65.0,2005.0,2005.0,gaussian,1.00e-06,9.53e-02,0.0911,AUT
prevalence,55.0,55.0,1985.0,1985.0,gaussian,1.00e-06,9.53e-02,0.0231,AUT
prevalence,55.0,55.0,1995.0,1995.0,gaussian,1.00e-06,9.53e-02,0.0434,AUT
prevalence,55.0,55.0,2005.0,2005.0,gaussian,1.00e-06,9.53e-02,0.0664,AUT
prevalence,45.0,45.0,1985.0,1985.0,gaussian,1.00e-06,9.53e-02,0.0125,AUT
prevalence,45.0,45.0,1995.0,1995.0,gaussian,1.00e-06,9.53e-02,0.0239,AUT
prevalence,45.0,45.0,2005.0,2005.0,gaussian,1.00e-06,9.53e-02,0.0317,AUT
prevalence,35.0,35.0,1985.0,1985.0,gaussian,1.00e-06,9.53e-02,0.0065,AUT
prevalence,35.0,35.0,1995.0,1995.0,gaussian,1.00e-06,9.53e-02,0.0118,AUT
prevalence,35.0,35.0,2005.0,2005.0,gaussian,1.00e-06,9.53e-02,0.0179,AUT
prevalence,25.0,25.0,1985.0,1985.0,gaussian,1.00e-06,9.53e-02,0.0035,AUT
prevalence,25.0,25.0,1995.0,1995.0,gaussian,1.00e-06,9.53e-02,0.0062,AUT
prevalence,25.0,25.0,2005.0,2005.0,gaussian,1.00e-06,9.53e-02,0.0186,AUT
</pre><br>
</font></code>----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.2.j" id="6.2.j">6.2.j: template.csv</a></big></b>
<br>
Remove the file 
<a href="#4.1.g.a">4.1.g.a: <span style='white-space: nowrap'>template.csv</span></a>
 
(if it exists) and then recreate it.
<code><font color='blue'><pre style='display:inline'> 
echo 'create template.csv'
rm -f template.csv
echo 'dismod_pde_csv parameter.csv measure_in.csv template.csv'
$dismod_pde_path/dismod_pde_csv parameter.csv measure_in.csv template.csv
</pre></font></code>

----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.2.k" id="6.2.k">6.2.k: sfun_in.csv</a></big></b>
<br>
is a version of template.csv with certain values modified by 
d4_change_sfun_in.py.
Note that remission $code rho$$ is constrained to be zero
by the optimization limits.
<code><font color='blue'><pre style='display:inline'> 
echo 'create sfun_in.csv'
zeta=&quot;$global_zeta&quot;
sigma=2e-1
zero_inf='0.0 if a &lt; 20.1 else inf'
$python_path/d4_change_sfun_in.py template.csv sfun_in.csv \
-comment            'zeta      lower           initial          upper' \
-optimize_S         $zeta        0.0             0.50            1.0 \
-optimize_C         $zeta        0.0             1e-2            1.0 \
-optimize_iota      $zeta        0.0             1e-2            1.0 \
-optimize_rho       $zeta        0.0             0.00            0.0 \
-optimize_chi       $zeta        0.0             1e-2            1.0 \
-optimize_omega     $zeta        0.0             1e-2            1.0 \
\
-comment            'like       zeta            sigma           mean' \
-prior_S         gaussian      $zeta       &quot;$zero_inf&quot;           1.0 \
-prior_C         gaussian      $zeta              inf            0.0 \
-prior_iota      gaussian      $zeta              inf            0.0 \
-prior_rho       gaussian      $zeta              inf            0.0 \
-prior_chi       gaussian      $zeta              inf            0.0 \
-prior_omega     gaussian      $zeta              inf            0.0 \
\
-comment            'like       zeta            sigma          order' \
-age_S           gaussian      $zeta              0.0             1 \
-age_C           gaussian      $zeta              0.0             1 \
-age_iota        gaussian      $zeta           $sigma             2 \
-age_rho         gaussian      $zeta              inf             2 \
-age_chi         gaussian      $zeta           $sigma             2 \
-age_omega       gaussian      $zeta           $sigma             2 \
\
-comment            'like       zeta            sigma          order' \
-cohort_S        gaussian      $zeta           $sigma             2 \
-cohort_C        gaussian      $zeta           $sigma             2 \
-cohort_iota     gaussian      $zeta           $sigma             2 \
-cohort_rho      gaussian      $zeta              inf             2 \
-cohort_chi      gaussian      $zeta           $sigma             2 \
-cohort_omega    gaussian      $zeta           $sigma             2 \
\
-comment            'name       zeta            sigma' \
-cross_S         gaussian      $zeta           $sigma  \
-cross_C         gaussian      $zeta           $sigma  \
-cross_iota      gaussian      $zeta           $sigma  \
-cross_rho       gaussian      $zeta              inf  \
-cross_chi       gaussian      $zeta           $sigma  \
-cross_omega     gaussian      $zeta           $sigma  
</pre></font></code>

-----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.2.l" id="6.2.l">6.2.l: Running dismod_pde_csv</a></big></b>
<br>
Next we create the files
<a href="#4.1.j">4.1.j: <span style='white-space: nowrap'>measure_out.csv</span></a>
,
<a href="#4.1.i">4.1.i: <span style='white-space: nowrap'>sfun_out.csv</span></a>
, and
<a href="#4.1.k">4.1.k: <span style='white-space: nowrap'>effect_out.csv</span></a>

by running <code><font color="blue">dismod_pde_csv</font></code>.
<code><font color='blue'><pre style='display:inline'> 
echo 'create effect_out.csv, measure_out.csv, sfun_out.csv'
echo 'dismod_pde_csv parameter.csv                 \\'
echo '     measure_in.csv     measure_out.csv   \\'
echo '     sfun_in.csv        sfun_out.csv      \\'
echo '     effect_in.csv      effect_out.csv'
if $dismod_pde_path/dismod_pde_csv parameter.csv  \
     measure_in.csv     measure_out.csv   \
     sfun_in.csv        sfun_out.csv      \
     effect_in.csv      effect_out.csv
then
	dismod_pde_csv_ok='yes'
else
	dismod_pde_csv_ok='no'
fi
</pre></font></code>

-----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.2.m" id="6.2.m">6.2.m: prevalence_residual</a></big></b>
<br>
Next we use <a href="#4.2.1">4.2.1: <span style='white-space: nowrap'>d4_bubble.py</span></a>
 to plot the prevalence
residuals as a function of age and time.
These plots are called 

<code><font color="blue"><span style='white-space: nowrap'>prevalence_residual.</span></font><i><font color="black"><span style='white-space: nowrap'>ext</span></font></i></code>

for 
<code><i><font color="black"><span style='white-space: nowrap'>ext</span></font></i></code>
 in <code><font color="blue">{ pdf , eps, png}</font></code>.
<code><font color='blue'><pre style='display:inline'> 
csv_file='measure_out.csv'
x_name='time'
x_min=&quot;$global_time_min&quot;
x_max=&quot;$global_time_max&quot;
y_name='age'
y_min=&quot;$global_age_min&quot;
y_max=&quot;$global_age_max&quot;
s_name='scaled'
s_min=0.25
s_between=1.0
s_max=2.0
f_name='integrand'
f_min='prevalence'
f_max='prevalence'
title='Scaled Prevalence Residuals'
for ext in pdf eps png
do
	plot_file=&quot;prevalence_residual.$ext&quot;
	echo &quot;create $plot_file&quot;
	$python_path/d4_bubble.py $csv_file $plot_file &quot;$title&quot; \
			$x_name $x_min $x_max $y_name $y_min $y_max \
			$s_name $s_min $s_between $s_max $f_name $f_min $f_max
done
</pre></font></code>

Below is the <code><font color="blue">png</font></code> version of this plot:
<center><img src="diabetes_prevalence_residual.png">
</center>----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.2.n" id="6.2.n">6.2.n: sfun_grid.csv</a></big></b>
<br>
Next we use <a href="#4.2.8">4.2.8: <span style='white-space: nowrap'>d4_sfun_grid.py</span></a>
 
to create <code><font color="blue">sfun_grid.csv</font></code>, which is a version of 
the stochastic function output information <code><font color="blue">sfun_out.csv</font></code>
interpolated to a rectangular grid with respect to age and time.
<code><font color='blue'><pre style='display:inline'> 
n_age=`echo $global_age_grid | wc -w`
time_start=&quot;$global_time_min&quot;
time_end=&quot;$global_time_max&quot;
n_time=&quot;$n_age&quot;
echo 'create sfun_grid.csv'
$python_path/d4_sfun_grid.py sfun_out.csv sfun_grid.csv \
	$time_start $time_end $n_time
</pre></font></code>

---------------------------------------------------------------------------- 
<br>
<br>
<b><big><a name="6.2.o" id="6.2.o">6.2.o: sfun_der.csv</a></big></b>
<br>
Next we use <a href="#4.2.7">4.2.7: <span style='white-space: nowrap'>d4_sfun_der.py</span></a>
 
to create <code><font color="blue">sfun_der.csv</font></code> which has the format expected
by <a href="#4.2.4">4.2.4: <span style='white-space: nowrap'>d4_contour.py</span></a>
; 
i.e., each variable has its own column.
In addition, the columns are:
<code><font color='blue'><pre style='display:inline'> 
	age, cohort, time, S, C, iota, rho, chi, omega, prevalence, m_all, risk
</pre></font></code>

<code><font color='blue'><pre style='display:inline'> 
echo 'create sfun_der.csv'
$python_path/d4_sfun_der.py \
	sfun_grid.csv sfun_der.csv \
	age           age \
	cohort        cohort \
	time          time \
	S             S_estimate \
	C             C_estimate \
	iota          iota_estimate \
	rho           rho_estimate \
	chi           chi_estimate \
	omega         omega_estimate \
	prevalence    &quot;C / (S + C)&quot; \
	m_all         &quot;omega + chi * prevalence&quot;    \
	risk          &quot;(omega + chi) / omega&quot;
</pre></font></code>

-----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.2.p" id="6.2.p">6.2.p: prevalence_compare</a></big></b>
<br>
Next we generate a plot
that compares the measured prevalence with the models fit to the data.
This plot is called 

<code><font color="blue"><span style='white-space: nowrap'>prevalence_compare.</span></font><i><font color="black"><span style='white-space: nowrap'>ext</span></font></i></code>
 where 
<code><i><font color="black"><span style='white-space: nowrap'>ext</span></font></i></code>
 is equal to
<code><font color="blue">pdf</font></code>, <code><font color="blue">eps</font></code>, and <code><font color="blue">png</font></code>:
 <code><font color='blue'><pre style='display:inline'> 
csv_file='measure_out.csv'
title='Model=lines, s=1985, o=1995, *=2005'
x_col='age'
x_label='Age'
x_min=&quot;$global_age_min&quot;
x_max=&quot;$global_age_max&quot;
s_col='integrand'
s_value='prevalence'
y_label='prevalence'
y_min=0
y_max=.12
alpha=1
symbol='so*'
#
for ext in pdf eps png
do
	plot_file=&quot;prevalence_compare.$ext&quot;
	$python_path/d4_plot.py $csv_file &quot;$plot_file&quot; &quot;$title&quot; \
		--points $x_col meas_value $symbol $alpha \
		--line  $x_col model . $alpha \
		--string $s_col $s_value  \
		--axis   $x_label $x_min $x_max $y_label $y_min $y_max \
		--connect time 1984,1986 1994,1996 2004,2006 
done
</pre></font></code>
 
Below is the <code><font color="blue">png</font></code> version of this plot:
<center><img src="diabetes_prevalence_compare.png">
</center>-----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.2.q" id="6.2.q">6.2.q: Prevalence Contour Plot</a></big></b>
<br>
Next we generate <a href="#4.2.4">4.2.4: <span style='white-space: nowrap'>contour</span></a>
 
plots of the model fit for prevalence 
as a function of age and time.
These plots are called 

<code><font color="blue"><span style='white-space: nowrap'>prevalence_estimate.</span></font><i><font color="black"><span style='white-space: nowrap'>ext</span></font></i></code>
 
for 
<code><i><font color="black"><span style='white-space: nowrap'>ext</span></font></i></code>
 in <code><font color="blue">{ pdf , eps , png}</font></code>.
<code><font color='blue'><pre style='display:inline'> 
csv_file='sfun_der.csv'
x_name='time'
x_min=&quot;$global_time_min&quot;
x_max=&quot;$global_time_max&quot;
y_name='age'
y_min=&quot;$global_age_min&quot;
y_max=&quot;$global_age_max&quot;
z_name='prevalence'
z_min=0.001
z_max=1.0
title='Contours of Prevalence Estimate'
for ext in pdf eps png
do
	plot_file=&quot;prevalence_estimate.$ext&quot;
	echo &quot;create $plot_file&quot;
	../../python/d4_contour.py $csv_file $plot_file &quot;$title&quot; \
		$x_name $x_min $x_max \
		$y_name $y_min $y_max \
		$z_name $z_min $z_max 
done
</pre></font></code>

Below is the <code><font color="blue">png</font></code> version of this plot:
<center><img src="diabetes_prevalence_estimate.png">
</center>-----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.2.r" id="6.2.r">6.2.r: Rate Contour Plots</a></big></b>
<br>
Next we generate <a href="#4.2.4">4.2.4: <span style='white-space: nowrap'>contour</span></a>
 plots for 
other cause mortality <code><font color="blue">omega</font></code>, 
excess mortality <code><font color="blue">chi</font></code>, 
and incidence <code><font color="blue">iota</font></code>
as a function of age and time.
These plots are called 

<code><i><font color="black"><span style='white-space: nowrap'>var</span></font></i><font color="blue"><span style='white-space: nowrap'>_estimate</span></font><i><font color="black"><span style='white-space: nowrap'>.</span></font></i><font color="blue"><span style='white-space: nowrap'>ext</span></font></code>

for 
<code><i><font color="black"><span style='white-space: nowrap'>var</span></font></i></code>
 in <code><font color="blue">{ omega , chi , iota }</font></code>
and 
<code><i><font color="black"><span style='white-space: nowrap'>ext</span></font></i></code>
 in <code><font color="blue">{ pdf , eps , png}</font></code>.
<code><font color='blue'><pre style='display:inline'> 
var_vec=(   'omega'                 'chi'              'iota'      )
name_vec=(  'Other Cause Mortality' 'Excess Mortality' 'Incidence' )

for var_index in 0 1 2
do
	var=&quot;${var_vec[$var_index]}&quot;
	name=&quot;${name_vec[$var_index]}&quot;
	csv_file='sfun_der.csv'
	for ext in pdf eps png
	do
		plot_file=&quot;${var}_estimate.${ext}&quot;
		title=&quot;Contours of $name Estimate&quot;
		x_name='time'
		x_min=&quot;$global_time_min&quot;
		x_max=&quot;$global_time_max&quot;
		y_name='age'
		y_min=&quot;$global_age_min&quot;
		y_max=&quot;$global_age_max&quot;
		z_name=&quot;$var&quot;
		z_min=0.0001
		z_max=1.0
		echo &quot;create $plot_file&quot;
		../../python/d4_contour.py $csv_file $plot_file &quot;$title&quot; \
			$x_name $x_min $x_max \
			$y_name $y_min $y_max \
			$z_name $z_min $z_max
	done
done
</pre></font></code>

<br>
<br>
<b><a name="6.2.r.a" id="6.2.r.a">6.2.r.a: omega_estimate</a></b>

<center><img src="diabetes_omega_estimate.png">
</center><br>
<b><a name="6.2.r.b" id="6.2.r.b">6.2.r.b: chi_estimate</a></b>

<center><img src="diabetes_chi_estimate.png">
</center><br>
<b><a name="6.2.r.c" id="6.2.r.c">6.2.r.c: iota_estimate</a></b>

<center><img src="diabetes_iota_estimate.png">
</center><br>
<b><big><a name="6.2.s" id="6.2.s">6.2.s: Final Message</a></big></b>
<br>
If this shell script reaches here, then all the tests have passed
(except that dismod_pde_csv may have returned an error flag).
<code><font color='blue'><pre style='display:inline'> 
if [ $dismod_pde_csv_ok == 'no' ]
then
	exit 1
fi
echo 'diabetes.sh: OK'
</pre></font></code>


<hr>Input File: example/diabetes/diabetes.sh.in

<hr>
 

<center><b><big><big><a name="6.3" id="6.3">6.3: Simulate and Fit Where Incidence is Gaussian in Age an Cohort</a>
</big></big></b></center>
<br>
<b><big><a name="6.3.a" id="6.3.a">6.3.a: Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>./gaussian.sh&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>grid_step</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>prevalence_cv</span></font></i></code>

<code><font color='blue'><pre style='display:inline'> 
if [ &quot;$2&quot; == '' ]
then
	echo 'usage: ./gaussian grid_step prevalence_cv'
	exit 1
fi
</pre></font></code>


<br>
<br>
<b><big><a name="6.3.b" id="6.3.b">6.3.b: Purpose</a></big></b>
<br>
This is a simulation example and test of the dismod_pde. 
It exits with status zero if the test passes
and with status one if the test fails.
This example is located in the file
	
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>/share/doc/dismod_pde-</span></font><i><font color="black"><span style='white-space: nowrap'>yyyymmdd</span></font></i><font color="blue"><span style='white-space: nowrap'>/example/gaussian.sh<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>dismod_pde_prefix</span></font></i></code>
 is the 
<a href="#3.j">3.j: <span style='white-space: nowrap'>prefix</span></a>
 
specified during the install procedure. 

<br>
<br>
<b><big><a name="6.3.c" id="6.3.c">6.3.c: grid_step</a></big></b>
<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>grid_step</span></font></i></code>
 is a positive integer that
specifies the step between age and cohort grid points.
<code><font color='blue'><pre style='display:inline'> 
global_grid_step=&quot;$1&quot;
</pre></font></code>


<br>
<br>
<b><big><a name="6.3.d" id="6.3.d">6.3.d: prevalence_cv</a></big></b>
<br>
Coefficient of variation for the prevalence data, 

<code><font color="blue"><span style='white-space: nowrap'>prevalence_cv</span></font><i><font color="black"><span style='white-space: nowrap'>&nbsp;=&nbsp;.1</span></font></i></code>
 corresponds to ten percent
coefficient of variation.
<code><font color='blue'><pre style='display:inline'> 
global_prevalence_cv=&quot;$2&quot;
</pre></font></code>


<br>
<br>
<b><big><a name="6.3.e" id="6.3.e">6.3.e: python_path</a></big></b>
<br>
The following command sets the directory where the dismod_pde python
scripts are located. This should not be necessary once dismod_pde is installed.
<code><font color='blue'><pre style='display:inline'> 
global_python_path=&quot;$top_builddir/python&quot;
</pre></font></code>
 

<br>
<br>
<b><big><a name="6.3.f" id="6.3.f">6.3.f: dismod_pde_path</a></big></b>
<br>
The following command sets the directory where the binary <code><font color="blue">dismod_pde_csv</font></code>
file is located. This should not be necessary once dismod_pde is installed.
<code><font color='blue'><pre style='display:inline'> 
global_dismod_pde_path=&quot;$top_builddir/cpp&quot;
</pre></font></code>
 

<br>
<br>
<b><big><a name="6.3.g" id="6.3.g">6.3.g: grid function</a></big></b>
<br>
first argument is initial value,
second argument is the ending value, and the third argument
is the increment between values.
The grid will include the initial value and a value at least as large
as the ending value.
<code><font color='blue'><pre style='display:inline'> 
make_grid() {
	initial=&quot;$1&quot; ; ending=&quot;$2&quot; ; inc=&quot;$3&quot; ; grid=''
	for (( value = initial; value &lt; ending+inc; value = value+inc ))
	do
		grid=&quot;$grid $value&quot;
	done
}
</pre></font></code>


<br>
<br>
<b><big><a name="6.3.h" id="6.3.h">6.3.h: Global Parameters</a></big></b>
<br>
The following parameters are used globally in this file and do not change:
<code><font color='blue'><pre style='display:inline'> 
# age grid parameters
global_age_min=20 
global_age_max=80
age_step=&quot;$global_grid_step&quot;
make_grid $global_age_min $global_age_max $age_step
global_age_grid=&quot;$grid&quot;  # age grid values
echo &quot;age_grid=$global_age_grid&quot;
#
# minimum and maximum time value in the data
global_time_min=1975
global_time_max=2010
#
# cohort grid
age_max=`echo &quot;$global_age_grid&quot; | sed -e 's|.* ||'`
cohort_min=`expr $global_time_min - $age_max`
cohort_max=`expr $global_time_max - $global_age_min`
cohort_step=&quot;$global_grid_step&quot;
make_grid $cohort_min $cohort_max $cohort_step
global_cohort_grid=&quot;$grid&quot;
echo &quot;cohort_grid=$global_cohort_grid&quot;
#
global_zeta=1e-6         # value of zeta in all cases
</pre></font></code>



----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.3.i" id="6.3.i">6.3.i: parameter.csv</a></big></b>
<br>
The <a href="#4.1.e">4.1.e: <span style='white-space: nowrap'>parameter.csv</span></a>
 
file for this example is as follows:

<code><font color="blue">
<br>
<pre style='display:inline'>name,value
age_grid, 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80
cohort_grid, 1895 1899 1903 1907 1911 1915 1919 1923 1927 1931 1935 1939 1943 1947 1951 1955 1959 1963 1967 1971 1975 1979 1983 1987 1991
max_ode_step,1.0
print_level,5
max_iteration,50
converge_tolerance,1e-3
debug_output,1
</pre><br>
</font></code>----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.3.j" id="6.3.j">6.3.j: effect_in.csv</a></big></b>
<br>
For this example, there are no covariates and
the <a href="#4.1.h">4.1.h: <span style='white-space: nowrap'>effect_in.csv</span></a>
 file is as follows:
 
<code><font color="blue">
<br>
<pre style='display:inline'>integrand,covariate,lower,initial,upper
</pre><br>
</font></code>----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.3.k" id="6.3.k">6.3.k: measure_in.csv</a></big></b>
<br>
Use <a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>
 to simulate the file
<a href="#4.1.f">4.1.f: <span style='white-space: nowrap'>measure_in.csv</span></a>
.
<code><font color='blue'><pre style='display:inline'> 
echo 'create measure_in.csv'
measure_in_csv='measure_in.csv'
solution_csv='solution.csv'
age_init=0
age_step=1
age_min=&quot;$global_age_min&quot;
age_max=&quot;$global_age_max&quot;
age_bound=10
n_age=7
n_time=4
grid=&quot;$n_age.$n_time&quot;
number=30
like='gaussian'
sim_zeta=&quot;$global_zeta&quot;
fit_zeta=&quot;$global_zeta&quot;
sim_cv=&quot;$global_prevalence_cv&quot;
fit_cv=&quot;$global_prevalence_cv&quot;
time_add=10
time_step=1
time_min=&quot;$global_time_min&quot;
time_max=&quot;$global_time_max&quot;
time_bound=10
rho_true=0.0
#
time_plus=`expr $time_max + $time_add`
age_max=&quot;$global_age_max&quot;
age_min=&quot;$global_age_min&quot;
age_mid=`expr $age_max / 2 + $age_min / 2`
time_mid=`expr $time_max / 2 + $time_min / 2`
scale=`echo &quot;($age_max - $age_min) / 4&quot; | bc`
linear=&quot;(.01 + a/$age_max. + ($time_plus.-t)/($time_plus.-$time_min))/2.01&quot;
quadratic=&quot;- ((a-$age_mid)/$scale.)**2 - ((t-$time_mid)/$scale.)**2&quot;
#
chi_true=&quot;1e-1 * $linear&quot;
omega_true=&quot;1e-2 * $linear&quot;
iota_max=1e-2
iota_min=1e-3
iota_true=&quot;($iota_max-$iota_min)*exp($quadratic) + $iota_min&quot;
#
$global_python_path/d4_simulate.py  \
-files      $measure_in_csv $solution_csv \
-age        $age_init $age_step $age_min  $age_max $age_bound \
-time       $time_add $time_step $time_min $time_max $time_bound \
-iota       &quot;$iota_true&quot; \
-rho         $rho_true  \
-chi        &quot;$chi_true&quot; \
-omega      &quot;$omega_true&quot; \
-measure    prevalence    $number $like $sim_zeta $fit_zeta $sim_cv $fit_cv  \
-measure    relative_risk $grid   $like $sim_zeta $fit_zeta     0.0     0.0  \
-measure    m_all         $grid   $like $sim_zeta $fit_zeta     0.0     0.0
</pre></font></code>

----------------------------------------------------------------------------

<br>
<br>
<b><big><a name="6.3.l" id="6.3.l">6.3.l: template.csv</a></big></b>
<br>
Remove the file 
<a href="#4.1.g.a">4.1.g.a: <span style='white-space: nowrap'>template.csv</span></a>
 
(if it exists) and then recreate it.
<code><font color='blue'><pre style='display:inline'> 
echo 'create template.csv'
rm -f template.csv
echo 'dismod_pde_csv parameter.csv measure_in.csv template.csv'
$global_dismod_pde_path/dismod_pde_csv parameter.csv measure_in.csv template.csv
</pre></font></code>

----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.3.m" id="6.3.m">6.3.m: sfun_in.csv</a></big></b>
<br>
is a version of template.csv with certain values modified by 
d4_change_sfun_in.py.
<code><font color='blue'><pre style='display:inline'> 
echo 'create sfun_in.csv'
zeta=&quot;$global_zeta&quot;
sigma=2e-1
zero_inf='0.0 if a &lt; 20.1 else inf'
$global_python_path/d4_change_sfun_in.py template.csv sfun_in.csv \
-comment            'zeta      lower           initial          upper' \
-optimize_S         $zeta        0.0             0.50            1.0 \
-optimize_C         $zeta        0.0             1e-2            1.0 \
-optimize_iota      $zeta        0.0             1e-2            1.0 \
-optimize_rho       $zeta        0.0             0.00            0.0 \
-optimize_chi       $zeta        0.0             1e-2            1.0 \
-optimize_omega     $zeta        0.0             1e-2            1.0 \
\
-comment            'like       zeta            sigma           mean' \
-prior_S         gaussian      $zeta       &quot;$zero_inf&quot;           1.0 \
-prior_C         gaussian      $zeta              inf            0.0 \
-prior_iota      gaussian      $zeta              inf    &quot;$iota_true&quot; \
-prior_rho       gaussian      $zeta              inf      $rho_true  \
-prior_chi       gaussian      $zeta              inf     &quot;$chi_true&quot; \
-prior_omega     gaussian      $zeta              inf   &quot;$omega_true&quot; \
\
-comment            'like       zeta            sigma          order' \
-age_S           gaussian      $zeta              0.0             1 \
-age_C           gaussian      $zeta              0.0             1 \
-age_iota        gaussian      $zeta           $sigma             2 \
-age_rho         gaussian      $zeta              inf             2 \
-age_chi         gaussian      $zeta           $sigma             2 \
-age_omega       gaussian      $zeta           $sigma             2 \
\
-comment            'like       zeta            sigma          order' \
-cohort_S        gaussian      $zeta           $sigma             2 \
-cohort_C        gaussian      $zeta           $sigma             2 \
-cohort_iota     gaussian      $zeta           $sigma             2 \
-cohort_rho      gaussian      $zeta              inf             2 \
-cohort_chi      gaussian      $zeta           $sigma             2 \
-cohort_omega    gaussian      $zeta           $sigma             2 \
\
-comment            'name       zeta            sigma' \
-cross_S         gaussian      $zeta           $sigma  \
-cross_C         gaussian      $zeta           $sigma  \
-cross_iota      gaussian      $zeta           $sigma  \
-cross_rho       gaussian      $zeta              inf  \
-cross_chi       gaussian      $zeta           $sigma  \
-cross_omega     gaussian      $zeta           $sigma  
</pre></font></code>

----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.3.n" id="6.3.n">6.3.n: Running dismod_pde_csv</a></big></b>
<br>
Next we use <a href="#4.1">4.1: <span style='white-space: nowrap'>dismod_pde_csv</span></a>
 to generate the files
<a href="#4.1.j">4.1.j: <span style='white-space: nowrap'>measure_out.csv</span></a>
,
<a href="#4.1.i">4.1.i: <span style='white-space: nowrap'>sfun_out.csv</span></a>
, and
<a href="#4.1.k">4.1.k: <span style='white-space: nowrap'>effect_out.csv</span></a>
.
<code><font color='blue'><pre style='display:inline'> 
echo 'create effect_out.csv, measure_out.csv, sfun_out.csv'
echo 'dismod_pde_csv parameter.csv                 \\'
echo '     measure_in.csv     measure_out.csv   \\'
echo '     sfun_in.csv        sfun_out.csv      \\'
echo '     effect_in.csv      effect_out.csv'
if $global_dismod_pde_path/dismod_pde_csv parameter.csv  \
     measure_in.csv     measure_out.csv   \
     sfun_in.csv        sfun_out.csv      \
     effect_in.csv      effect_out.csv
then
	dismod_pde_csv_ok='yes'
else
	dismod_pde_csv_ok='no'
fi
</pre></font></code>

----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.3.o" id="6.3.o">6.3.o: prevalence_residual</a></big></b>
<br>
Next we use <a href="#4.2.1">4.2.1: <span style='white-space: nowrap'>d4_bubble.py</span></a>
 to plot of the prevalence
residuals as a function of age and time.
These plots are called 

<code><font color="blue"><span style='white-space: nowrap'>prevalence_residual.</span></font><i><font color="black"><span style='white-space: nowrap'>ext</span></font></i></code>

for 
<code><i><font color="black"><span style='white-space: nowrap'>ext</span></font></i></code>
 in <code><font color="blue">{ pdf , eps, png}</font></code>.
<code><font color='blue'><pre style='display:inline'> 
csv_file='measure_out.csv'
x_name='time'
x_min=&quot;$global_time_min&quot;
x_max=&quot;$global_time_max&quot;
y_name='age'
y_min=&quot;$global_age_min&quot;
y_max=&quot;$global_age_max&quot;
s_name='scaled'
s_min=0.25
s_between=1.0
s_max=2.0
f_name='integrand'
f_min='prevalence'
f_max='prevalence'
title='Scaled Prevalence Residuals'
for ext in pdf eps png
do
	plot_file=&quot;prevalence_residual.$ext&quot;
	echo &quot;create $plot_file&quot;
	$global_python_path/d4_bubble.py $csv_file $plot_file &quot;$title&quot; \
			$x_name $x_min $x_max $y_name $y_min $y_max \
			$s_name $s_min $s_between $s_max $f_name $f_min $f_max
done
</pre></font></code>

Below is the <code><font color="blue">png</font></code> version of this plot:
<center><img src="gaussian_prevalence_residual.png">
</center>-----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.3.p" id="6.3.p">6.3.p: sfun_grid.csv</a></big></b>
<br>
Next we use <a href="#4.2.8">4.2.8: <span style='white-space: nowrap'>d4_sfun_grid.py</span></a>
 
to create <code><font color="blue">sfun_grid.csv</font></code>, which is a version of 
the stochastic function output information <code><font color="blue">sfun_out.csv</font></code>
interpolated to a rectangular grid with respect to age and time.
<code><font color='blue'><pre style='display:inline'> 
n_age=`echo $global_age_grid | wc -w`
time_start=&quot;$global_time_min&quot;
time_end=&quot;$global_time_max&quot;
n_time=&quot;$n_age&quot;
echo 'create sfun_grid.csv'
$global_python_path/d4_sfun_grid.py sfun_out.csv sfun_grid.csv \
	$time_start $time_end $n_time
</pre></font></code>

---------------------------------------------------------------------------- 
<br>
<br>
<b><big><a name="6.3.q" id="6.3.q">6.3.q: sfun_der.csv</a></big></b>
<br>
Next we use <a href="#4.2.7">4.2.7: <span style='white-space: nowrap'>d4_sfun_der.py</span></a>
 
to create <code><font color="blue">sfun_der.csv</font></code> which has the format expected
by <a href="#4.2.4">4.2.4: <span style='white-space: nowrap'>d4_contour.py</span></a>
; 
i.e., each variable has its own column.
In addition, the columns are:
<code><font color='blue'><pre style='display:inline'> 
	age, cohort, time, S, C, iota, rho, chi, omega, prevalence, m_all, risk
</pre></font></code>

<code><font color='blue'><pre style='display:inline'> 
echo 'create sfun_der.csv'
$global_python_path/d4_sfun_der.py \
	sfun_grid.csv sfun_der.csv \
	age           age \
	cohort        cohort \
	time          time \
	S             S_estimate \
	C             C_estimate \
	iota          iota_estimate \
	rho           rho_estimate \
	chi           chi_estimate \
	omega         omega_estimate \
	prevalence    &quot;C / (S + C)&quot; \
	m_all         &quot;omega + chi * prevalence&quot;    \
	risk          &quot;(omega + chi) / omega&quot;
</pre></font></code>

-----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.3.r" id="6.3.r">6.3.r: Prevalence Contour Plot</a></big></b>
<br>
Next we generate <a href="#4.2.4">4.2.4: <span style='white-space: nowrap'>contour</span></a>
 
plots of the model fit for prevalence 
as a function of age and time.
These plots are called 

<code><font color="blue"><span style='white-space: nowrap'>prevalence_estimate.</span></font><i><font color="black"><span style='white-space: nowrap'>ext</span></font></i></code>
 
for 
<code><i><font color="black"><span style='white-space: nowrap'>ext</span></font></i></code>
 in <code><font color="blue">{ pdf , eps , png}</font></code>.
<code><font color='blue'><pre style='display:inline'> 
csv_file='sfun_der.csv'
x_name='time'
x_min=&quot;$global_time_min&quot;
x_max=&quot;$global_time_max&quot;
y_name='age'
y_min=&quot;$global_age_min&quot;
y_max=&quot;$global_age_max&quot;
z_name='prevalence'
z_min=0.001
z_max=1.0
title='Contours of Prevalence Estimate'
for ext in pdf eps png
do
	plot_file=&quot;prevalence_estimate.$ext&quot;
	echo &quot;create $plot_file&quot;
	../../python/d4_contour.py $csv_file $plot_file &quot;$title&quot; \
		$x_name $x_min $x_max \
		$y_name $y_min $y_max \
		$z_name $z_min $z_max
done
</pre></font></code>

Below is the <code><font color="blue">png</font></code> version of this plot:
<center><img src="gaussian_prevalence_estimate.png">
</center>-----------------------------------------------------------------------------
<br>
<br>
<b><big><a name="6.3.s" id="6.3.s">6.3.s: Rate Contour Plots</a></big></b>
<br>
Next we generate <a href="#4.2.4">4.2.4: <span style='white-space: nowrap'>contour</span></a>
 plots for 
other cause mortality <code><font color="blue">omega</font></code>, 
excess mortality <code><font color="blue">chi</font></code>, 
and incidence <code><font color="blue">iota</font></code>
as a function of age and time.
These plots are called 

<code><i><font color="black"><span style='white-space: nowrap'>var</span></font></i><font color="blue"><span style='white-space: nowrap'>_</span></font><i><font color="black"><span style='white-space: nowrap'>type</span></font></i><font color="blue"><span style='white-space: nowrap'>.</span></font><i><font color="black"><span style='white-space: nowrap'>ext</span></font></i></code>

for 
<code><i><font color="black"><span style='white-space: nowrap'>var</span></font></i></code>
 in <code><font color="blue">{ omega , chi , iota }</font></code>,

<code><i><font color="black"><span style='white-space: nowrap'>type</span></font></i></code>
 in <code><font color="blue">{ estimate , true }</font></code>,
and 
<code><i><font color="black"><span style='white-space: nowrap'>ext</span></font></i></code>
 in <code><font color="blue">{ pdf , eps , png}</font></code>.
<code><font color='blue'><pre style='display:inline'> 
var_vec=(   'omega'                 'chi'              'iota'      )
name_vec=(  'Other Cause Mortality' 'Excess Mortality' 'Incidence' )

csv_file_vec=(  'sfun_der.csv'  'solution.csv'  )
plot_type_vec=( 'estimate'       'true'         ) 

for var_index in 0 1 2
do
	var=&quot;${var_vec[$var_index]}&quot;
	name=&quot;${name_vec[$var_index]}&quot;
	for type_index in 0 1
	do
		plot_type=&quot;${plot_type_vec[$type_index]}&quot;
		csv_file=&quot;${csv_file_vec[$type_index]}&quot;
		for ext in pdf eps png
		do
			plot_file=&quot;${var}_${plot_type}.${ext}&quot;
			if [ &quot;$plot_type&quot; == 'estimate' ]
			then
				title=&quot;Contours of $name Estimate&quot;
			else
				title=&quot;Contours of $name Truth&quot;
			fi
			x_name='time'
			x_min=&quot;$global_time_min&quot;
			x_max=&quot;$global_time_max&quot;
			y_name='age'
			y_min=&quot;$global_age_min&quot;
			y_max=&quot;$global_age_max&quot;
			z_name=&quot;$var&quot;
			z_min=0.001
			z_max=1.0
			echo &quot;create $plot_file&quot;
			../../python/d4_contour.py $csv_file $plot_file &quot;$title&quot; \
				$x_name $x_min $x_max \
				$y_name $y_min $y_max \
				$z_name $z_min $z_max
		done
	done
done
</pre></font></code>

<br>
<br>
<b><a name="6.3.s.a" id="6.3.s.a">6.3.s.a: omega_estimate</a></b>

<center><img src="gaussian_omega_estimate.png">
</center><br>
<b><a name="6.3.s.b" id="6.3.s.b">6.3.s.b: omega_true</a></b>

<center><img src="gaussian_omega_true.png">
</center><br>
<b><a name="6.3.s.c" id="6.3.s.c">6.3.s.c: chi_estimate</a></b>

<center><img src="gaussian_chi_estimate.png">
</center><br>
<b><a name="6.3.s.d" id="6.3.s.d">6.3.s.d: chi_true</a></b>

<center><img src="gaussian_chi_true.png">
</center><br>
<b><a name="6.3.s.e" id="6.3.s.e">6.3.s.e: iota_estimate</a></b>

<center><img src="gaussian_iota_estimate.png">
</center><br>
<b><a name="6.3.s.f" id="6.3.s.f">6.3.s.f: iota_true</a></b>

<center><img src="gaussian_iota_true.png">
</center><br>
<b><big><a name="6.3.t" id="6.3.t">6.3.t: Check Solution</a></big></b>
<br>
Next we check that the solution matches the simulated values for the
functions 
<code><i><font color="black"><span style='white-space: nowrap'>iota</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>rho</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>chi</span></font></i></code>
, and 
<code><i><font color="black"><span style='white-space: nowrap'>omega</span></font></i></code>
.
Note that only the times and ages within the data limits are checked.
Note that the functions 
<code><i><font color="black"><span style='white-space: nowrap'>S</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>C</span></font></i></code>
 are not checked because
the fit has re-scaled 
<code><i><font color="black"><span style='white-space: nowrap'>S</span></font></i></code>
 to be one at age

<code><i><font color="black"><span style='white-space: nowrap'>global_age_min</span></font></i></code>
 (it is one at age zero for the simulations).
The function 
<code><i><font color="black"><span style='white-space: nowrap'>rho</span></font></i></code>
 is not checked because it is zero
(hence relative errors are <code><font color="blue">nan</font></code>).
<code><font color='blue'><pre style='display:inline'> 
echo 'gaussian.sh: check sfun_out.csv'
include_expr=&quot;f!='S' and f!='C' and f!='rho'&quot;
include_expr=&quot;$include_expr and $global_time_min&lt;=t and t&lt;=$global_time_max&quot; 
value_expr='nan if s == 0. else abs(1-e/s)'
median_bound=&quot;$global_prevalence_cv&quot;
average_bound=`echo &quot;1.5 * $global_prevalence_cv&quot; | bc -l`
maximum_bound=`echo &quot;10. * $global_prevalence_cv&quot; | bc -l` 
$global_python_path/d4_compare_sfun.py \
	--sfun_out  sfun_out.csv \
	--solution  solution.csv \
	--compare   compare.csv \
	--include   &quot;$include_expr&quot; \
	--value     &quot;$value_expr&quot; \
	--median    &quot;$median_bound&quot; \
	--average   &quot;$average_bound&quot; \
	--maximum   &quot;$maximum_bound&quot;
</pre></font></code>

---------------------------------------------------------------------------- 
<br>
<br>
<b><big><a name="6.3.u" id="6.3.u">6.3.u: Final Message</a></big></b>
<br>
If this shell script reaches here, then all the tests have passed
(except that dismod_pde_csv may have returned an error flag).
<code><font color='blue'><pre style='display:inline'> 
if [ $dismod_pde_csv_ok == 'no' ]
then
	exit 1
fi
echo &quot;gaussian.sh: $global_grid_step $global_prevalence_cv OK&quot;
</pre></font></code>


<hr>Input File: example/gaussian/gaussian.sh.in

<hr>



<center><b><big><big><a name="7" id="7">7: Wish List For Improvements to dismod_pde</a>
</big></big></b></center>
<br>
<b><big><a name="7.a" id="7.a">7.a: Continuing Fitting</a></big></b>
<br>
It would be good to write out a version of the
<a href="#4.1.g">4.1.g: <span style='white-space: nowrap'>sfun_in.csv</span></a>
 that could be used to start
fitting (optimization) where a previous fitting stopped.

<br>
<br>
<b><big><a name="7.b" id="7.b">7.b: Objective and Constraint Retaping</a></big></b>
<br>
Error detection and reporting can be improved by having the object
and constraint functions retape for every evaluation (which is much slower).
Perhaps we should add an option so the user can turn this on and perhaps
get better error reporting.

<br>
<br>
<b><big><a name="7.c" id="7.c">7.c: Lower Age Limit</a></big></b>



<br>
Each <a href="#4.1.f.c">4.1.f.c: <span style='white-space: nowrap'>age_lower</span></a>

value must be greater than zero. 
It would be nice it could equal zero.

<br>
<br>
<b><big><a name="7.d" id="7.d">7.d: Measurement Model Integral</a></big></b>






<br>
Currently a mid-point approximation is used to model the measurement values.
measurement measurements with large age and time spans, this may not be accurate
and perhaps we should use some other method.

<br>
<br>
<b><big><a name="7.e" id="7.e">7.e: Estimator Standard Deviation</a></big></b>






<ol type="1"><li>
Standard maximum likelihood theory could be used to approximate the
diagonal of the covariance of the estimate for the
<a href="#5.1.b">5.1.b: <span style='white-space: nowrap'>stochastic&nbsp;functions</span></a>
.
Note that the diagonal of the covariance is the auto covariance for
each stochastic function estimate at each age and time grid point.

</li><li>

Bootstrap methods could also be used to determine statistical
properties for the estimates.
</li></ol>


<br>
<br>
<b><big><a name="7.f" id="7.f">7.f: Information Matrix</a></big></b>




<br>
The information matrix (inverse of the covariance matrix) is useful
if one wants to use the results of dismod_pde to create a posterior distribution
for the stochastic functions (to use in some other estimation procedure).
The number of entries in the information matrix is 
the square of the number of age-cohort grid points (which can be huge).
Fortunately, the information matrix is sparse and it would be feasible
output some representation for it.

<br>
<br>
<b><big><a name="7.g" id="7.g">7.g: Example</a></big></b>

<br>
<br>
<b><big><a name="7.h" id="7.h">7.h: examples</a></big></b>


<ol type="1"><li>
The <code><font color="blue">constant.sh</font></code>, <code><font color="blue">bilinear.sh</font></code> 
tests (in the <code><font color="blue">test</font></code> directory) could be made into
examples by adding documentation.

</li><li>

Convert the <a href="#5.1.3.1">5.1.3.1: <span style='white-space: nowrap'>dismoditis.sh</span></a>
 documentation to be like 
<a href="#4.2.9">4.2.9: <span style='white-space: nowrap'>d4_simulate.py</span></a>
; i.e., specifications instead of entire 
implementation.
</li></ol>


<br>
<br>
<b><big><a name="7.i" id="7.i">7.i: Covariates</a></big></b>



<ol type="1"><li>
Allow for prior distributions (besides uniform) for the
covariate multiplier vector <code>
<span style='white-space: nowrap'>&nbsp;\beta</span></code>
.

</li><li>

Allow for a discrete covariate with a different multiplier for
each value that the covariate assumes.

</li><li>

Integrate with respect to the  stochastic function when estimating
the covariate multipliers.

</li><li>

Allow for the covariate multipliers to include fixed and random effects.

</li></ol>


<br>
<br>
<b><big><a name="7.j" id="7.j">7.j: External Packages</a></big></b>
<br>
Create instructions for installing the 
<a href="#3.d">3.d: <span style='white-space: nowrap'>external&nbsp;packages</span></a>
 
that could be used when the automated install failed.
(The automated install only supports the Gnu compiler and has other
simplifications that are not necessary.)

<br>
<br>
<b><big><a name="7.k" id="7.k">7.k: Import Dismod3 Data</a></big></b>
<br>
There is a prototype program that converts 
<a href="/http://winthrop.ihme.washington.edu/public/intro.html" target="_top"><span style='white-space: nowrap'>Dismod3</span></a>
 (/http://winthrop.ihme.washington.edu/public/intro.html) 
data files to dismod_pde format. 
Perhaps this should be turned into a supported application.


<hr>Input File: omh/wish_list.omh

<hr>



<center><b><big><big><a name="8" id="8">8: List of Known Bugs</a>
</big></big></b></center>
There are no known bugs at this time.



<hr>Input File: omh/bug_list.omh

<hr>
<center><b><big><big><a name="9">9: Alphabetic Listing of Cross Reference Tags</a>
</big></big></b></center>
<table>
<tr valign="top"><td>

<b><big><a name="A">A</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#5.6">5.6: atof_char_vec</a><br> </td><td> Convert a Sub-vector of a Character Vector to Double </td></tr><tr valign="top"><td>
<a href="#5.6.1">5.6.1: atof_char_vec_tst.cpp</a><br> </td><td> Example and Test of Conversion from Ascii to Double </td></tr><tr valign="top"><td>

<b><big><a name="B">B</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#8">8: bug_list</a><br> </td><td> List of Known Bugs </td></tr><tr valign="top"><td>

<b><big><a name="C">C</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#4.2.2.1">4.2.2.1: change_sfun_in.sh</a><br> </td><td> d4_change_sfun_in.py: Example and Test </td></tr><tr valign="top"><td>
<a href="#5">5: cpp</a><br> </td><td> The C++ Interface to dismod_pde </td></tr><tr valign="top"><td>
<a href="#5.2">5.2: create_grid</a><br> </td><td> Create an Age-Cohort Grid For a Measurement Set </td></tr><tr valign="top"><td>
<a href="#4">4: csv</a><br> </td><td> The CSV File Interface to dismod_pde </td></tr><tr valign="top"><td>
<a href="#5.4">5.4: csv_read</a><br> </td><td> Read an Entire CSV File Into Memory </td></tr><tr valign="top"><td>
<a href="#5.4.1">5.4.1: csv_read_tst.cpp</a><br> </td><td> Example and Test of dismod_pde csv_read Procedure </td></tr><tr valign="top"><td>

<b><big><a name="D">D</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#4.2.1">4.2.1: d4_bubble.py</a><br> </td><td> Bubble Plots of Values in Csv File </td></tr><tr valign="top"><td>
<a href="#4.2.2">4.2.2: d4_change_sfun_in.py</a><br> </td><td> Change The dismod_pde Stochastic Function Input File </td></tr><tr valign="top"><td>
<a href="#4.2.3">4.2.3: d4_compare_sfun.py</a><br> </td><td> Compare sfun_out.csv and d4_simulate.py Solution File </td></tr><tr valign="top"><td>
<a href="#4.2.4">4.2.4: d4_contour.py</a><br> </td><td> Contour Plots of Values in Csv File </td></tr><tr valign="top"><td>
<a href="#4.2.5">4.2.5: d4_cumulative.py</a><br> </td><td> Plot the Cumulative Distribution for a Csv File Column </td></tr><tr valign="top"><td>
<a href="#4.2.6">4.2.6: d4_plot.py</a><br> </td><td> Line and Point Plots of CSV Files </td></tr><tr valign="top"><td>
<a href="#4.2.7">4.2.7: d4_sfun_der.py</a><br> </td><td> Create Derived Stochastic Function Output Files </td></tr><tr valign="top"><td>
<a href="#4.2.8">4.2.8: d4_sfun_grid.py</a><br> </td><td> Convert From Age-Cohort Grid to Age-Time Rectangular Grid </td></tr><tr valign="top"><td>
<a href="#4.2.9">4.2.9: d4_simulate.py</a><br> </td><td> Simulated dismod_pde Data and Solution Files </td></tr><tr valign="top"><td>
<a href="#6.2">6.2: diabetes.sh</a><br> </td><td> A Diabetes Incidence Estimation Example </td></tr><tr valign="top"><td>
<a href="#">: dismod_pde</a><br> </td><td> dismod_pde: 
Estimation of Disease Mortality as a Stochastic Function of Age and Cohort </td></tr><tr valign="top"><td>
<a href="#4.1">4.1: dismod_pde_csv</a><br> </td><td> dismod_pde Command Line Program </td></tr><tr valign="top"><td>
<a href="#5.1.3">5.1.3: dismoditis.cpp</a><br> </td><td> A dismod_pde C++ Optimize Example and Test </td></tr><tr valign="top"><td>
<a href="#5.1.3.1">5.1.3.1: dismoditis.sh</a><br> </td><td> Create C++ Files Corresponding to Dismod Data and Expected Results </td></tr><tr valign="top"><td>

<b><big><a name="E">E</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#6">6: example</a><br> </td><td> dismod_pde Examples </td></tr><tr valign="top"><td>

<b><big><a name="G">G</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#6.3">6.3: gaussian.sh</a><br> </td><td> Simulate and Fit Where Incidence is Gaussian in Age an Cohort </td></tr><tr valign="top"><td>
<a href="#6.1.1">6.1.1: get_started.py</a><br> </td><td> get_started.py: Example and Test of dismod_pde_csv </td></tr><tr valign="top"><td>
<a href="#6.1">6.1: get_started.sh</a><br> </td><td> get_started.sh: Example and Test of dismod_pde_csv </td></tr><tr valign="top"><td>

<b><big><a name="I">I</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#3">3: install</a><br> </td><td> Installing dismod_pde </td></tr><tr valign="top"><td>
<a href="#5.1.1">5.1.1: ipopt_trace</a><br> </td><td> Description of Ipopt Tracing Output </td></tr><tr valign="top"><td>

<b><big><a name="O">O</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#5.1">5.1: optimize</a><br> </td><td> Optimization of dismod_pde Objective Function </td></tr><tr valign="top"><td>
<a href="#5.1.2">5.1.2: optimize_xam.cpp</a><br> </td><td> Example and Test of dismod_pde C++ Optimize Procedure </td></tr><tr valign="top"><td>

<b><big><a name="P">P</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#5.3">5.3: pair2index</a><br> </td><td> Convert Between Age-Cohort Pairs and a Single Grid Index </td></tr><tr valign="top"><td>
<a href="#5.3.1">5.3.1: pair2index.cpp</a><br> </td><td> Example and Test of dismod_pde pair2index Procedure </td></tr><tr valign="top"><td>
<a href="#4.2">4.2: python_csv</a><br> </td><td> dismod_pde Python CSV Helper Scripts </td></tr><tr valign="top"><td>

<b><big><a name="S">S</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#4.2.8.1">4.2.8.1: sfun_grid.sh</a><br> </td><td> d4_sfun_grid.py: Example and Test </td></tr><tr valign="top"><td>
<a href="#5.5">5.5: str_char_vec</a><br> </td><td> Convert a Sub-vector of a Character Vector to a String </td></tr><tr valign="top"><td>
<a href="#5.5.1">5.5.1: str_char_vec_tst.cpp</a><br> </td><td> Example and Test of Conversion from Ascii to String </td></tr><tr valign="top"><td>

<b><big><a name="W">W</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="#2">2: whats_new</a><br> </td><td> Changes and Additions to dismod_pde </td></tr><tr valign="top"><td>
<a href="#7">7: wish_list</a><br> </td><td> Wish List For Improvements to dismod_pde </td></tr><tr valign="top"><td>
</td></tr></table>

<hr>
<center><b><big><big><a name="10">10: Keyword Index</a>
</big></big></b></center>

<b><big><a name="A">A</a></big></b>
<br>
accuracy<br>
&#160;&#160;&#160;&#160;&#160;of<b>&nbsp;</b>estimate&#160;<a href="#7.e">7.e: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Estimator&nbsp;Standard&nbsp;Deviation</a><br>
age&#160;<a href="#5.3.c">5.3.c: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;age</a><br>
&#160;&#160;&#160;&#160;&#160;delta&#160;<a href="#5.2.b">5.2.b: Create&nbsp;an&nbsp;Age-Cohort&nbsp;Grid&nbsp;For&nbsp;a&nbsp;Measurement&nbsp;Set:&#160;delta_age</a><br>
&#160;&#160;&#160;&#160;&#160;grid&#160;<a href="#4.1.e.a">4.1.e.a: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;parameter.csv.age_grid</a><br>
&#160;&#160;&#160;&#160;&#160;limits&#160;<a href="#4.1.f.c">4.1.f.c: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;measure_in.csv.age_lower,&nbsp;age_upper</a><br>
&#160;&#160;&#160;&#160;&#160;order&#160;<a href="#4.1.g.g">4.1.g.g: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_in.csv.order</a><br>
age<b>-</b>cohort<br>
&#160;&#160;&#160;&#160;&#160;grid<b>&nbsp;</b>index&#160;<a href="#5.3">5.3: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index</a><br>
age<b>_</b>index&#160;<a href="#5.3.n">5.3.n: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;age_index</a><br>
age<b>_</b>lower&#160;<a href="#7.c">7.c: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Lower&nbsp;Age&nbsp;Limit</a><br>
age<b>_</b>unpack&#160;<a href="#5.3.r">5.3.r: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;age_unpack</a><br>
api<br>
&#160;&#160;&#160;&#160;&#160;changes&#160;<a href="#2">2: Changes&nbsp;and&nbsp;Additions&nbsp;to&nbsp;dismod_pde</a><br>
approximation<br>
&#160;&#160;&#160;&#160;&#160;integral&#160;<a href="#7.d">7.d: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Measurement&nbsp;Model&nbsp;Integral</a><br>

<b><big><a name="B">B</a></big></b>
<br>
bug<br>
&#160;&#160;&#160;&#160;&#160;fixes&#160;<a href="#2">2: Changes&nbsp;and&nbsp;Additions&nbsp;to&nbsp;dismod_pde</a><br>
&#160;&#160;&#160;&#160;&#160;list&#160;<a href="#8">8: List&nbsp;of&nbsp;Known&nbsp;Bugs</a><br>
build<br>
&#160;&#160;&#160;&#160;&#160;documentation&#160;<a href="#3.g">3.g: Installing&nbsp;dismod_pde:&#160;Documentation</a><br>

<b><big><a name="C">C</a></big></b>
<br>
Comment&#160;<a href="#4.1.f.j">4.1.f.j: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;measure_in.csv.Comments</a><br>
c<b>++</b><br>
&#160;&#160;&#160;&#160;&#160;example<b>&nbsp;</b>data<b>&nbsp;</b>structure&#160;<a href="#5.1.3.1">5.1.3.1: Create&nbsp;C++&nbsp;Files&nbsp;Corresponding&nbsp;to&nbsp;Dismod&nbsp;Data&nbsp;and&nbsp;Expected&nbsp;Results</a><br>
&#160;&#160;&#160;&#160;&#160;optimize<b>&nbsp;</b>example&#160;<a href="#5.1.3">5.1.3: A&nbsp;dismod_pde&nbsp;C++&nbsp;Optimize&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;optimize<b>&nbsp;</b>example&#160;<a href="#5.1.2">5.1.2: Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde&nbsp;C++&nbsp;Optimize&nbsp;Procedure</a><br>
changelog&#160;<a href="#2">2: Changes&nbsp;and&nbsp;Additions&nbsp;to&nbsp;dismod_pde</a><br>
changes<br>
&#160;&#160;&#160;&#160;&#160;api&#160;<a href="#2">2: Changes&nbsp;and&nbsp;Additions&nbsp;to&nbsp;dismod_pde</a><br>
cohort&#160;<a href="#5.3.d">5.3.d: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;cohort</a><br>
&#160;&#160;&#160;&#160;&#160;delta&#160;<a href="#5.2.c">5.2.c: Create&nbsp;an&nbsp;Age-Cohort&nbsp;Grid&nbsp;For&nbsp;a&nbsp;Measurement&nbsp;Set:&#160;delta_cohort</a><br>
&#160;&#160;&#160;&#160;&#160;grid&#160;<a href="#4.1.e.b">4.1.e.b: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;parameter.csv.cohort_grid</a><br>
&#160;&#160;&#160;&#160;&#160;order&#160;<a href="#4.1.g.g">4.1.g.g: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_in.csv.order</a><br>
cohort<b>_</b>index&#160;<a href="#5.3.o">5.3.o: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;cohort_index</a><br>
cohort<b>_</b>unpack&#160;<a href="#5.3.s">5.3.s: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;cohort_unpack</a><br>
column<br>
&#160;&#160;&#160;&#160;&#160;function&#160;<a href="#4.1.g.c">4.1.g.c: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_in.csv.function</a><br>
covariate<br>
&#160;&#160;&#160;&#160;&#160;effect<b>&nbsp;</b>initial&#160;<a href="#4.1.h.d">4.1.h.d: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_in.csv.initial</a><br>
&#160;&#160;&#160;&#160;&#160;effect<b>&nbsp;</b>lower&#160;<a href="#4.1.h.c">4.1.h.c: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_in.csv.lower</a><br>
&#160;&#160;&#160;&#160;&#160;effect<b>&nbsp;</b>upper&#160;<a href="#4.1.h.e">4.1.h.e: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_in.csv.upper</a><br>
&#160;&#160;&#160;&#160;&#160;name<b>&nbsp;</b>x<b>_</b>&#160;<a href="#4.1.h.b">4.1.h.b: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_in.csv.covariate</a><br>
&#160;&#160;&#160;&#160;&#160;value<b>&nbsp;</b>X&#160;<a href="#5.1.k">5.1.k: Optimization&nbsp;of&nbsp;dismod_pde&nbsp;Objective&nbsp;Function:&#160;covariate_value</a><br>
covariates&#160;<a href="#7.i">7.i: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Covariates</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#4.1.f.i">4.1.f.i: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;measure_in.csv.Covariates</a><br>
create<br>
&#160;&#160;&#160;&#160;&#160;grid&#160;<a href="#5.2">5.2: Create&nbsp;an&nbsp;Age-Cohort&nbsp;Grid&nbsp;For&nbsp;a&nbsp;Measurement&nbsp;Set</a><br>
csv<br>
&#160;&#160;&#160;&#160;&#160;file<b>&nbsp;</b>specification&#160;<a href="#4.a">4.a: The&nbsp;CSV&nbsp;File&nbsp;Interface&nbsp;to&nbsp;dismod_pde:&#160;dismod_pde&nbsp;CSV&nbsp;Files</a><br>

<b><big><a name="D">D</a></big></b>
<br>
d4<b>_</b>change<b>_</b>sfun<b>_</b>in<b>.</b>py<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="#4.2.2.1">4.2.2.1: d4_change_sfun_in.py:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
d4<b>_</b>sfun<b>_</b>grid<b>.</b>py<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="#4.2.8.1">4.2.8.1: d4_sfun_grid.py:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
delta<br>
&#160;&#160;&#160;&#160;&#160;age&#160;<a href="#5.2.b">5.2.b: Create&nbsp;an&nbsp;Age-Cohort&nbsp;Grid&nbsp;For&nbsp;a&nbsp;Measurement&nbsp;Set:&#160;delta_age</a><br>
&#160;&#160;&#160;&#160;&#160;cohort&#160;<a href="#5.2.c">5.2.c: Create&nbsp;an&nbsp;Age-Cohort&nbsp;Grid&nbsp;For&nbsp;a&nbsp;Measurement&nbsp;Set:&#160;delta_cohort</a><br>
diabetes<br>
&#160;&#160;&#160;&#160;&#160;incidence<b>&nbsp;</b>estimation&#160;<a href="#6.2">6.2: A&nbsp;Diabetes&nbsp;Incidence&nbsp;Estimation&nbsp;Example</a><br>
dismod<b>_</b>pde&#160;<a href="#">: dismod_pde:&nbsp;<br>
Estimation&nbsp;of&nbsp;Disease&nbsp;Mortality&nbsp;as&nbsp;a&nbsp;Stochastic&nbsp;Function&nbsp;of&nbsp;Age&nbsp;and&nbsp;Cohort</a><br>
&#160;&#160;&#160;&#160;&#160;install&#160;<a href="#3">3: Installing&nbsp;dismod_pde</a><br>
&#160;&#160;&#160;&#160;&#160;test&#160;<a href="#3.h">3.h: Installing&nbsp;dismod_pde:&#160;Test</a><br>
dismod<b>_</b>pde<b>_</b>csv<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="#6.1">6.1: get_started.sh:&nbsp;Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde_csv</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="#6">6: dismod_pde&nbsp;Examples</a><br>
&#160;&#160;&#160;&#160;&#160;get<b>_</b>started&#160;<a href="#6.1">6.1: get_started.sh:&nbsp;Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde_csv</a><br>
&#160;&#160;&#160;&#160;&#160;program&#160;<a href="#4.1">4.1: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program</a><br>
display<br>
&#160;&#160;&#160;&#160;&#160;latex&#160;<a href="#">: dismod_pde:&nbsp;<br>
Estimation&nbsp;of&nbsp;Disease&nbsp;Mortality&nbsp;as&nbsp;a&nbsp;Stochastic&nbsp;Function&nbsp;of&nbsp;Age&nbsp;and&nbsp;Cohort</a><br>
&#160;&#160;&#160;&#160;&#160;mathml&#160;<a href="#">: dismod_pde:&nbsp;<br>
Estimation&nbsp;of&nbsp;Disease&nbsp;Mortality&nbsp;as&nbsp;a&nbsp;Stochastic&nbsp;Function&nbsp;of&nbsp;Age&nbsp;and&nbsp;Cohort</a><br>
distribution<br>
&#160;&#160;&#160;&#160;&#160;posterior&#160;<a href="#7.f">7.f: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Information&nbsp;Matrix</a><br>
documentation<br>
&#160;&#160;&#160;&#160;&#160;build&#160;<a href="#3.g">3.g: Installing&nbsp;dismod_pde:&#160;Documentation</a><br>
download&#160;<a href="#3.b">3.b: Installing&nbsp;dismod_pde:&#160;Download</a><br>

<b><big><a name="E">E</a></big></b>
<br>
effect<br>
&#160;&#160;&#160;&#160;&#160;covariate<b>&nbsp;</b>initial&#160;<a href="#4.1.h.d">4.1.h.d: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_in.csv.initial</a><br>
&#160;&#160;&#160;&#160;&#160;covariate<b>&nbsp;</b>lower&#160;<a href="#4.1.h.c">4.1.h.c: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_in.csv.lower</a><br>
&#160;&#160;&#160;&#160;&#160;covariate<b>&nbsp;</b>upper&#160;<a href="#4.1.h.e">4.1.h.e: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_in.csv.upper</a><br>
&#160;&#160;&#160;&#160;&#160;measurement<b>&nbsp;</b>estimate&#160;<a href="#4.1.k.c">4.1.k.c: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_out.csv.effect</a><br>
effect<b>_</b>in<b>.</b>csv&#160;<a href="#4.1.h">4.1.h: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_in.csv</a><br>
effect<b>_</b>out<b>.</b>csv&#160;<a href="#4.1.k">4.1.k: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_out.csv</a><br>
estimate<br>
&#160;&#160;&#160;&#160;&#160;measurement<b>&nbsp;</b>effect&#160;<a href="#4.1.k.c">4.1.k.c: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_out.csv.effect</a><br>
&#160;&#160;&#160;&#160;&#160;standard<b>&nbsp;</b>deviation&#160;<a href="#7.e">7.e: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Estimator&nbsp;Standard&nbsp;Deviation</a><br>
estimation<br>
&#160;&#160;&#160;&#160;&#160;diabetes<b>&nbsp;</b>incidence&#160;<a href="#6.2">6.2: A&nbsp;Diabetes&nbsp;Incidence&nbsp;Estimation&nbsp;Example</a><br>
example<br>
&#160;&#160;&#160;&#160;&#160;atof<b>_</b>char<b>_</b>vec&#160;<a href="#5.6.1">5.6.1: Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;Conversion&nbsp;from&nbsp;Ascii&nbsp;to&nbsp;Double</a><br>
&#160;&#160;&#160;&#160;&#160;c<b>++&nbsp;</b>data<b>&nbsp;</b>structure&#160;<a href="#5.1.3.1">5.1.3.1: Create&nbsp;C++&nbsp;Files&nbsp;Corresponding&nbsp;to&nbsp;Dismod&nbsp;Data&nbsp;and&nbsp;Expected&nbsp;Results</a><br>
&#160;&#160;&#160;&#160;&#160;c<b>++&nbsp;</b>optimize&#160;<a href="#5.1.3">5.1.3: A&nbsp;dismod_pde&nbsp;C++&nbsp;Optimize&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;c<b>++&nbsp;</b>optimize&#160;<a href="#5.1.2">5.1.2: Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde&nbsp;C++&nbsp;Optimize&nbsp;Procedure</a><br>
&#160;&#160;&#160;&#160;&#160;csv<b>_</b>read&#160;<a href="#5.4.1">5.4.1: Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde&nbsp;csv_read&nbsp;Procedure</a><br>
&#160;&#160;&#160;&#160;&#160;d4<b>_</b>change<b>_</b>sfun<b>_</b>in<b>.</b>py&#160;<a href="#4.2.2.1">4.2.2.1: d4_change_sfun_in.py:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;d4<b>_</b>change<b>_</b>sfun<b>_</b>in<b>.</b>py&#160;<a href="#4.2.2.o">4.2.2.o: Change&nbsp;The&nbsp;dismod_pde&nbsp;Stochastic&nbsp;Function&nbsp;Input&nbsp;File:&#160;Example</a><br>
&#160;&#160;&#160;&#160;&#160;d4<b>_</b>sfun<b>_</b>grid<b>.</b>py&#160;<a href="#4.2.8.1">4.2.8.1: d4_sfun_grid.py:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;d4<b>_</b>sfun<b>_</b>grid<b>.</b>py&#160;<a href="#4.2.8.h">4.2.8.h: Convert&nbsp;From&nbsp;Age-Cohort&nbsp;Grid&nbsp;to&nbsp;Age-Time&nbsp;Rectangular&nbsp;Grid:&#160;Example</a><br>
&#160;&#160;&#160;&#160;&#160;dismod<b>_</b>pde<b>_</b>csv&#160;<a href="#6.1">6.1: get_started.sh:&nbsp;Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde_csv</a><br>
&#160;&#160;&#160;&#160;&#160;dismod<b>_</b>pde<b>_</b>csv&#160;<a href="#6">6: dismod_pde&nbsp;Examples</a><br>
&#160;&#160;&#160;&#160;&#160;pair2index&#160;<a href="#5.3.1">5.3.1: Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde&nbsp;pair2index&nbsp;Procedure</a><br>
&#160;&#160;&#160;&#160;&#160;str<b>_</b>char<b>_</b>vec&#160;<a href="#5.5.1">5.5.1: Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;Conversion&nbsp;from&nbsp;Ascii&nbsp;to&nbsp;String</a><br>
example<b>&nbsp;</b>grid&#160;<a href="#5.3.1">5.3.1: Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde&nbsp;pair2index&nbsp;Procedure</a><br>
external<br>
&#160;&#160;&#160;&#160;&#160;packages&#160;<a href="#3.d">3.d: Installing&nbsp;dismod_pde:&#160;External&nbsp;Packages</a><br>

<b><big><a name="F">F</a></big></b>
<br>
feature<br>
&#160;&#160;&#160;&#160;&#160;changes&#160;<a href="#2">2: Changes&nbsp;and&nbsp;Additions&nbsp;to&nbsp;dismod_pde</a><br>
field<br>
&#160;&#160;&#160;&#160;&#160;function&#160;<a href="#4.1.g.c">4.1.g.c: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_in.csv.function</a><br>
file<br>
&#160;&#160;&#160;&#160;&#160;csv<b>&nbsp;</b>specification&#160;<a href="#4.a">4.a: The&nbsp;CSV&nbsp;File&nbsp;Interface&nbsp;to&nbsp;dismod_pde:&#160;dismod_pde&nbsp;CSV&nbsp;Files</a><br>
fit<br>
&#160;&#160;&#160;&#160;&#160;simulated<b>&nbsp;</b>gaussian&#160;<a href="#6.3">6.3: Simulate&nbsp;and&nbsp;Fit&nbsp;Where&nbsp;Incidence&nbsp;is&nbsp;Gaussian&nbsp;in&nbsp;Age&nbsp;an&nbsp;Cohort</a><br>
fixes<br>
&#160;&#160;&#160;&#160;&#160;bugs&#160;<a href="#2">2: Changes&nbsp;and&nbsp;Additions&nbsp;to&nbsp;dismod_pde</a><br>
function<br>
&#160;&#160;&#160;&#160;&#160;column&#160;<a href="#4.1.g.c">4.1.g.c: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_in.csv.function</a><br>

<b><big><a name="G">G</a></big></b>
<br>
G&#160;<a href="#5.1.i.a">5.1.i.a: Optimization&nbsp;of&nbsp;dismod_pde&nbsp;Objective&nbsp;Function:&#160;grid.G</a><br>
gaussian<br>
&#160;&#160;&#160;&#160;&#160;simulate<b>&nbsp;</b>fit&#160;<a href="#6.3">6.3: Simulate&nbsp;and&nbsp;Fit&nbsp;Where&nbsp;Incidence&nbsp;is&nbsp;Gaussian&nbsp;in&nbsp;Age&nbsp;an&nbsp;Cohort</a><br>
get<b>_</b>started<br>
&#160;&#160;&#160;&#160;&#160;dismod<b>_</b>pde<b>_</b>csv&#160;<a href="#6.1">6.1: get_started.sh:&nbsp;Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde_csv</a><br>
grid&#160;<a href="#5.2.e">5.2.e: Create&nbsp;an&nbsp;Age-Cohort&nbsp;Grid&nbsp;For&nbsp;a&nbsp;Measurement&nbsp;Set:&#160;grid</a><br>
&#160;&#160;&#160;&#160;&#160;age&#160;<a href="#4.1.e.a">4.1.e.a: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;parameter.csv.age_grid</a><br>
&#160;&#160;&#160;&#160;&#160;cohort&#160;<a href="#4.1.e.b">4.1.e.b: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;parameter.csv.cohort_grid</a><br>
&#160;&#160;&#160;&#160;&#160;convert<b>&nbsp;</b>index&#160;<a href="#5.3">5.3: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index</a><br>
&#160;&#160;&#160;&#160;&#160;convert<b>&nbsp;</b>pair&#160;<a href="#5.3">5.3: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index</a><br>
&#160;&#160;&#160;&#160;&#160;create&#160;<a href="#5.2">5.2: Create&nbsp;an&nbsp;Age-Cohort&nbsp;Grid&nbsp;For&nbsp;a&nbsp;Measurement&nbsp;Set</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="#5.3.1">5.3.1: Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde&nbsp;pair2index&nbsp;Procedure</a><br>
&#160;&#160;&#160;&#160;&#160;notation&#160;<a href="#5.3.m">5.3.m: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;Notation</a><br>
&#160;&#160;&#160;&#160;&#160;valid<b>&nbsp;</b>pair&#160;<a href="#5.3.p">5.3.p: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;valid</a><br>
&#160;&#160;&#160;&#160;&#160;valid<b>&nbsp;</b>pair&#160;<a href="#5.3.m.b">5.3.m.b: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;Notation.Computational&nbsp;Grid</a><br>
grid<b>.</b>age&#160;<a href="#5.3.h">5.3.h: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;grid.age</a><br>
grid<b>.</b>cohort&#160;<a href="#5.3.i">5.3.i: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;grid.cohort</a><br>
grid<b>.</b>size&#160;<a href="#5.3.l">5.3.l: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;grid.size</a><br>
grid<b>.</b>time<b>_</b>lower&#160;<a href="#5.3.j">5.3.j: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;grid.time_lower</a><br>
grid<b>.</b>time<b>_</b>upper&#160;<a href="#5.3.k">5.3.k: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;grid.time_upper</a><br>
grid<b>_</b>index<br>
&#160;&#160;&#160;&#160;&#160;convert<b>&nbsp;</b>to<b>&nbsp;</b>pair&#160;<a href="#5.3.t">5.3.t: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;grid_index</a><br>
grid<b>_</b>pack&#160;<a href="#5.3.q">5.3.q: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;grid_pack</a><br>

<b><big><a name="I">I</a></big></b>
<br>
incidence<br>
&#160;&#160;&#160;&#160;&#160;estimation<b>&nbsp;</b>diabetes&#160;<a href="#6.2">6.2: A&nbsp;Diabetes&nbsp;Incidence&nbsp;Estimation&nbsp;Example</a><br>
index<br>
&#160;&#160;&#160;&#160;&#160;grid<b>&nbsp;</b>pair&#160;<a href="#5.3">5.3: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index</a><br>
infinity&#160;<a href="#4.1.d">4.1.d: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;Infinity</a><br>
information<br>
&#160;&#160;&#160;&#160;&#160;matrix&#160;<a href="#7.f">7.f: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Information&nbsp;Matrix</a><br>
initial<br>
&#160;&#160;&#160;&#160;&#160;change&#160;<a href="#4.2.2.h">4.2.2.h: Change&nbsp;The&nbsp;dismod_pde&nbsp;Stochastic&nbsp;Function&nbsp;Input&nbsp;File:&#160;initial</a><br>
&#160;&#160;&#160;&#160;&#160;change&#160;<a href="#4.2.2.f">4.2.2.f: Change&nbsp;The&nbsp;dismod_pde&nbsp;Stochastic&nbsp;Function&nbsp;Input&nbsp;File:&#160;comment</a><br>
&#160;&#160;&#160;&#160;&#160;covariate<b>&nbsp;</b>effect&#160;<a href="#4.1.h.d">4.1.h.d: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_in.csv.initial</a><br>
input<br>
&#160;&#160;&#160;&#160;&#160;change<b>&nbsp;</b>sfun<b>_</b>in<b>.</b>csv&#160;<a href="#4.2.2">4.2.2: Change&nbsp;The&nbsp;dismod_pde&nbsp;Stochastic&nbsp;Function&nbsp;Input&nbsp;File</a><br>
&#160;&#160;&#160;&#160;&#160;sfun<b>_</b>in<b>.</b>csv&#160;<a href="#4.1.g.b">4.1.g.b: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_in.csv.Input&nbsp;File</a><br>
install<br>
&#160;&#160;&#160;&#160;&#160;dismod<b>_</b>pde&#160;<a href="#3">3: Installing&nbsp;dismod_pde</a><br>
integral<br>
&#160;&#160;&#160;&#160;&#160;measurement&#160;<a href="#7.d">7.d: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Measurement&nbsp;Model&nbsp;Integral</a><br>
integrand&#160;<a href="#7.d">7.d: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Measurement&nbsp;Model&nbsp;Integral</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#4.1.h.a">4.1.h.a: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_in.csv.integrand</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="#4.1.f.b">4.1.f.b: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;measure_in.csv.integrand</a><br>

<b><big><a name="K">K</a></big></b>
<br>
kappa<b>(</b>j<br>
&#160;&#160;&#160;&#160;&#160;l<b>)</b>&#160;<a href="#5.3.m.a">5.3.m.a: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;Notation.kappa</a><br>
&#160;&#160;&#160;&#160;&#160;u<b>)</b>&#160;<a href="#5.3.m.a">5.3.m.a: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;Notation.kappa</a><br>

<b><big><a name="L">L</a></big></b>
<br>
Likelihood<b>_</b>Enum&#160;<a href="#5.1.f.b">5.1.f.b: Optimization&nbsp;of&nbsp;dismod_pde&nbsp;Objective&nbsp;Function:&#160;Likelihood&nbsp;Functions.Likelihood_Enum</a><br>
latex<br>
&#160;&#160;&#160;&#160;&#160;display&#160;<a href="#">: dismod_pde:&nbsp;<br>
Estimation&nbsp;of&nbsp;Disease&nbsp;Mortality&nbsp;as&nbsp;a&nbsp;Stochastic&nbsp;Function&nbsp;of&nbsp;Age&nbsp;and&nbsp;Cohort</a><br>
likelihood<br>
&#160;&#160;&#160;&#160;&#160;C<b>++&nbsp;</b>optimize<b>&nbsp;</b>example&#160;<a href="#5.1.2.d">5.1.2.d: Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde&nbsp;C++&nbsp;Optimize&nbsp;Procedure:&#160;likelihood</a><br>
&#160;&#160;&#160;&#160;&#160;name&#160;<a href="#4.1.g.d">4.1.g.d: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_in.csv.name</a><br>
&#160;&#160;&#160;&#160;&#160;name&#160;<a href="#4.1.f.e">4.1.f.e: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;measure_in.csv.meas_like</a><br>
&#160;&#160;&#160;&#160;&#160;sigma&#160;<a href="#4.1.f.g">4.1.f.g: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;measure_in.csv.meas_sigma</a><br>
&#160;&#160;&#160;&#160;&#160;zeta&#160;<a href="#4.1.f.f">4.1.f.f: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;measure_in.csv.meas_zeta</a><br>
limit<br>
&#160;&#160;&#160;&#160;&#160;age<b>_</b>lower&#160;<a href="#7.c">7.c: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Lower&nbsp;Age&nbsp;Limit</a><br>
list<br>
&#160;&#160;&#160;&#160;&#160;bug&#160;<a href="#8">8: List&nbsp;of&nbsp;Known&nbsp;Bugs</a><br>
&#160;&#160;&#160;&#160;&#160;which&#160;<a href="#7">7: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde</a><br>
lower<br>
&#160;&#160;&#160;&#160;&#160;age&#160;<a href="#4.1.f.c">4.1.f.c: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;measure_in.csv.age_lower,&nbsp;age_upper</a><br>
&#160;&#160;&#160;&#160;&#160;age<b>&nbsp;</b>limit&#160;<a href="#7.c">7.c: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Lower&nbsp;Age&nbsp;Limit</a><br>
&#160;&#160;&#160;&#160;&#160;change&#160;<a href="#4.2.2.g">4.2.2.g: Change&nbsp;The&nbsp;dismod_pde&nbsp;Stochastic&nbsp;Function&nbsp;Input&nbsp;File:&#160;lower</a><br>
&#160;&#160;&#160;&#160;&#160;covariate<b>&nbsp;</b>effect&#160;<a href="#4.1.h.c">4.1.h.c: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_in.csv.lower</a><br>
&#160;&#160;&#160;&#160;&#160;time&#160;<a href="#4.1.f.d">4.1.f.d: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;measure_in.csv.time_lower,&nbsp;time_upper</a><br>

<b><big><a name="M">M</a></big></b>
<br>
mathml<br>
&#160;&#160;&#160;&#160;&#160;display&#160;<a href="#">: dismod_pde:&nbsp;<br>
Estimation&nbsp;of&nbsp;Disease&nbsp;Mortality&nbsp;as&nbsp;a&nbsp;Stochastic&nbsp;Function&nbsp;of&nbsp;Age&nbsp;and&nbsp;Cohort</a><br>
matrix<br>
&#160;&#160;&#160;&#160;&#160;information&#160;<a href="#7.f">7.f: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Information&nbsp;Matrix</a><br>
max<br>
&#160;&#160;&#160;&#160;&#160;time&#160;<a href="#5.3.f">5.3.f: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;time_upper</a><br>
mean<br>
&#160;&#160;&#160;&#160;&#160;change&#160;<a href="#4.2.2.m">4.2.2.m: Change&nbsp;The&nbsp;dismod_pde&nbsp;Stochastic&nbsp;Function&nbsp;Input&nbsp;File:&#160;mean</a><br>
measure<b>_</b>in&#160;<a href="#5.2.d">5.2.d: Create&nbsp;an&nbsp;Age-Cohort&nbsp;Grid&nbsp;For&nbsp;a&nbsp;Measurement&nbsp;Set:&#160;measure_in</a><br>
measure<b>_</b>in<b>.</b>csv&#160;<a href="#4.1.f">4.1.f: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;measure_in.csv</a><br>
measure<b>_</b>out<b>.</b>csv&#160;<a href="#4.1.j">4.1.j: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;measure_out.csv</a><br>
measurement<br>
&#160;&#160;&#160;&#160;&#160;effect<b>&nbsp;</b>estimate&#160;<a href="#4.1.k.c">4.1.k.c: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_out.csv.effect</a><br>
&#160;&#160;&#160;&#160;&#160;integral&#160;<a href="#7.d">7.d: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Measurement&nbsp;Model&nbsp;Integral</a><br>
&#160;&#160;&#160;&#160;&#160;model&#160;<a href="#7.d">7.d: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Measurement&nbsp;Model&nbsp;Integral</a><br>
min<br>
&#160;&#160;&#160;&#160;&#160;time&#160;<a href="#5.3.e">5.3.e: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;time_lower</a><br>
model<br>
&#160;&#160;&#160;&#160;&#160;measurement&#160;<a href="#7.d">7.d: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Measurement&nbsp;Model&nbsp;Integral</a><br>

<b><big><a name="N">N</a></big></b>
<br>
n<b>_</b>age<br>
&#160;&#160;&#160;&#160;&#160;C<b>++&nbsp;</b>optimize<b>&nbsp;</b>example&#160;<a href="#5.1.2.b">5.1.2.b: Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde&nbsp;C++&nbsp;Optimize&nbsp;Procedure:&#160;n_age</a><br>
n<b>_</b>cohort<br>
&#160;&#160;&#160;&#160;&#160;C<b>++&nbsp;</b>optimize<b>&nbsp;</b>example&#160;<a href="#5.1.2.c">5.1.2.c: Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde&nbsp;C++&nbsp;Optimize&nbsp;Procedure:&#160;n_cohort</a><br>
name<br>
&#160;&#160;&#160;&#160;&#160;covariate<b>&nbsp;</b>x<b>_</b>&#160;<a href="#4.1.h.b">4.1.h.b: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_in.csv.covariate</a><br>
&#160;&#160;&#160;&#160;&#160;likelihood&#160;<a href="#4.1.g.d">4.1.g.d: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_in.csv.name</a><br>
&#160;&#160;&#160;&#160;&#160;likelihood&#160;<a href="#4.1.f.e">4.1.f.e: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;measure_in.csv.meas_like</a><br>
&#160;&#160;&#160;&#160;&#160;sfun<b>_</b>in<b>.</b>csv&#160;<a href="#4.2.2.j">4.2.2.j: Change&nbsp;The&nbsp;dismod_pde&nbsp;Stochastic&nbsp;Function&nbsp;Input&nbsp;File:&#160;name</a><br>
notation<br>
&#160;&#160;&#160;&#160;&#160;grid&#160;<a href="#5.3.m">5.3.m: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;Notation</a><br>

<b><big><a name="O">O</a></big></b>
<br>
optimize<br>
&#160;&#160;&#160;&#160;&#160;c<b>++&nbsp;</b>example&#160;<a href="#5.1.3">5.1.3: A&nbsp;dismod_pde&nbsp;C++&nbsp;Optimize&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;c<b>++&nbsp;</b>example&#160;<a href="#5.1.2">5.1.2: Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde&nbsp;C++&nbsp;Optimize&nbsp;Procedure</a><br>
order<br>
&#160;&#160;&#160;&#160;&#160;age<b>&nbsp;</b>and<b>&nbsp;</b>cohort&#160;<a href="#4.1.g.g">4.1.g.g: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_in.csv.order</a><br>
&#160;&#160;&#160;&#160;&#160;change&#160;<a href="#4.2.2.n">4.2.2.n: Change&nbsp;The&nbsp;dismod_pde&nbsp;Stochastic&nbsp;Function&nbsp;Input&nbsp;File:&#160;order</a><br>

<b><big><a name="P">P</a></big></b>
<br>
pack<br>
&#160;&#160;&#160;&#160;&#160;index&#160;<a href="#5.3.q">5.3.q: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;grid_pack</a><br>
packages<br>
&#160;&#160;&#160;&#160;&#160;externals&#160;<a href="#3.d">3.d: Installing&nbsp;dismod_pde:&#160;External&nbsp;Packages</a><br>
pair<br>
&#160;&#160;&#160;&#160;&#160;grid<b>&nbsp;</b>convert&#160;<a href="#5.3">5.3: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index</a><br>
&#160;&#160;&#160;&#160;&#160;valid<b>&nbsp;</b>grid&#160;<a href="#5.3.p">5.3.p: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;valid</a><br>
&#160;&#160;&#160;&#160;&#160;valid<b>&nbsp;</b>grid&#160;<a href="#5.3.m.b">5.3.m.b: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;Notation.Computational&nbsp;Grid</a><br>
parameter<b>.</b>csv&#160;<a href="#4.1.e">4.1.e: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;parameter.csv</a><br>
posterior<br>
&#160;&#160;&#160;&#160;&#160;distribution&#160;<a href="#7.f">7.f: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Information&nbsp;Matrix</a><br>
program<br>
&#160;&#160;&#160;&#160;&#160;dismod<b>_</b>pde<b>_</b>csv&#160;<a href="#4.1">4.1: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program</a><br>

<b><big><a name="R">R</a></big></b>
<br>
requirements&#160;<a href="#3.a">3.a: Installing&nbsp;dismod_pde:&#160;Requirements</a><br>
residual<br>
&#160;&#160;&#160;&#160;&#160;scaled&#160;<a href="#4.1.i.a">4.1.i.a: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_out.csv.Scaled&nbsp;Residuals</a><br>

<b><big><a name="S">S</a></big></b>
<br>
Stochastic<b>_</b>Enum&#160;<a href="#5.1.c">5.1.c: Optimization&nbsp;of&nbsp;dismod_pde&nbsp;Objective&nbsp;Function:&#160;Stochastic_Enum</a><br>
scaled<br>
&#160;&#160;&#160;&#160;&#160;residual&#160;<a href="#4.1.i.a">4.1.i.a: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_out.csv.Scaled&nbsp;Residuals</a><br>
sfun<b>_</b>in<b>.</b>csv&#160;<a href="#4.1.g">4.1.g: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_in.csv</a><br>
&#160;&#160;&#160;&#160;&#160;change&#160;<a href="#4.2.2">4.2.2: Change&nbsp;The&nbsp;dismod_pde&nbsp;Stochastic&nbsp;Function&nbsp;Input&nbsp;File</a><br>
&#160;&#160;&#160;&#160;&#160;input&#160;<a href="#4.1.g.b">4.1.g.b: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_in.csv.Input&nbsp;File</a><br>
&#160;&#160;&#160;&#160;&#160;template&#160;<a href="#4.1.g.a">4.1.g.a: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_in.csv.Output&nbsp;Template</a><br>
sfun<b>_</b>out<b>.</b>csv&#160;<a href="#4.1.i">4.1.i: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_out.csv</a><br>
sigma&#160;<a href="#4.1.g.f">4.1.g.f: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_in.csv.sigma</a><br>
&#160;&#160;&#160;&#160;&#160;change&#160;<a href="#4.2.2.l">4.2.2.l: Change&nbsp;The&nbsp;dismod_pde&nbsp;Stochastic&nbsp;Function&nbsp;Input&nbsp;File:&#160;sigma</a><br>
&#160;&#160;&#160;&#160;&#160;likelihood&#160;<a href="#4.1.f.g">4.1.f.g: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;measure_in.csv.meas_sigma</a><br>
simulate<br>
&#160;&#160;&#160;&#160;&#160;gaussian<b>&nbsp;</b>fit&#160;<a href="#6.3">6.3: Simulate&nbsp;and&nbsp;Fit&nbsp;Where&nbsp;Incidence&nbsp;is&nbsp;Gaussian&nbsp;in&nbsp;Age&nbsp;an&nbsp;Cohort</a><br>
specification<br>
&#160;&#160;&#160;&#160;&#160;csv<b>&nbsp;</b>file&#160;<a href="#4.a">4.a: The&nbsp;CSV&nbsp;File&nbsp;Interface&nbsp;to&nbsp;dismod_pde:&#160;dismod_pde&nbsp;CSV&nbsp;Files</a><br>
standard<b>&nbsp;</b>deviation<br>
&#160;&#160;&#160;&#160;&#160;estimate&#160;<a href="#7.e">7.e: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Estimator&nbsp;Standard&nbsp;Deviation</a><br>
structure<br>
&#160;&#160;&#160;&#160;&#160;c<b>++&nbsp;</b>data<b>&nbsp;</b>example&#160;<a href="#5.1.3.1">5.1.3.1: Create&nbsp;C++&nbsp;Files&nbsp;Corresponding&nbsp;to&nbsp;Dismod&nbsp;Data&nbsp;and&nbsp;Expected&nbsp;Results</a><br>

<b><big><a name="T">T</a></big></b>
<br>
template<br>
&#160;&#160;&#160;&#160;&#160;sfun<b>_</b>in<b>.</b>csv&#160;<a href="#4.1.g.a">4.1.g.a: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_in.csv.Output&nbsp;Template</a><br>
template<b>.</b>csv<br>
&#160;&#160;&#160;&#160;&#160;change&#160;<a href="#4.2.2">4.2.2: Change&nbsp;The&nbsp;dismod_pde&nbsp;Stochastic&nbsp;Function&nbsp;Input&nbsp;File</a><br>
test<br>
&#160;&#160;&#160;&#160;&#160;atof<b>_</b>char<b>_</b>vec&#160;<a href="#5.6.1">5.6.1: Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;Conversion&nbsp;from&nbsp;Ascii&nbsp;to&nbsp;Double</a><br>
&#160;&#160;&#160;&#160;&#160;c<b>++&nbsp;</b>optimize&#160;<a href="#5.1.2">5.1.2: Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde&nbsp;C++&nbsp;Optimize&nbsp;Procedure</a><br>
&#160;&#160;&#160;&#160;&#160;csv<b>_</b>read&#160;<a href="#5.4.1">5.4.1: Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde&nbsp;csv_read&nbsp;Procedure</a><br>
&#160;&#160;&#160;&#160;&#160;d4<b>_</b>change<b>_</b>sfun<b>_</b>in<b>.</b>py&#160;<a href="#4.2.2.1">4.2.2.1: d4_change_sfun_in.py:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;d4<b>_</b>sfun<b>_</b>grid<b>.</b>py&#160;<a href="#4.2.8.1">4.2.8.1: d4_sfun_grid.py:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;dismod<b>_</b>pde&#160;<a href="#3.h">3.h: Installing&nbsp;dismod_pde:&#160;Test</a><br>
&#160;&#160;&#160;&#160;&#160;dismod<b>_</b>pde<b>_</b>csv&#160;<a href="#6.1">6.1: get_started.sh:&nbsp;Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde_csv</a><br>
&#160;&#160;&#160;&#160;&#160;pair2index&#160;<a href="#5.3.1">5.3.1: Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;dismod_pde&nbsp;pair2index&nbsp;Procedure</a><br>
&#160;&#160;&#160;&#160;&#160;str<b>_</b>char<b>_</b>vec&#160;<a href="#5.5.1">5.5.1: Example&nbsp;and&nbsp;Test&nbsp;of&nbsp;Conversion&nbsp;from&nbsp;Ascii&nbsp;to&nbsp;String</a><br>
time<br>
&#160;&#160;&#160;&#160;&#160;limits&#160;<a href="#4.1.f.d">4.1.f.d: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;measure_in.csv.time_lower,&nbsp;time_upper</a><br>
&#160;&#160;&#160;&#160;&#160;max&#160;<a href="#5.3.f">5.3.f: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;time_upper</a><br>
&#160;&#160;&#160;&#160;&#160;min&#160;<a href="#5.3.e">5.3.e: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;time_lower</a><br>
top<br>
&#160;&#160;&#160;&#160;&#160;tree&#160;<a href="#">: dismod_pde:&nbsp;<br>
Estimation&nbsp;of&nbsp;Disease&nbsp;Mortality&nbsp;as&nbsp;a&nbsp;Stochastic&nbsp;Function&nbsp;of&nbsp;Age&nbsp;and&nbsp;Cohort</a><br>
tree<br>
&#160;&#160;&#160;&#160;&#160;top&#160;<a href="#">: dismod_pde:&nbsp;<br>
Estimation&nbsp;of&nbsp;Disease&nbsp;Mortality&nbsp;as&nbsp;a&nbsp;Stochastic&nbsp;Function&nbsp;of&nbsp;Age&nbsp;and&nbsp;Cohort</a><br>

<b><big><a name="U">U</a></big></b>
<br>
unpack<br>
&#160;&#160;&#160;&#160;&#160;age&#160;<a href="#5.3.r">5.3.r: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;age_unpack</a><br>
&#160;&#160;&#160;&#160;&#160;cohort&#160;<a href="#5.3.s">5.3.s: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;cohort_unpack</a><br>
upper<br>
&#160;&#160;&#160;&#160;&#160;age&#160;<a href="#4.1.f.c">4.1.f.c: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;measure_in.csv.age_lower,&nbsp;age_upper</a><br>
&#160;&#160;&#160;&#160;&#160;change&#160;<a href="#4.2.2.i">4.2.2.i: Change&nbsp;The&nbsp;dismod_pde&nbsp;Stochastic&nbsp;Function&nbsp;Input&nbsp;File:&#160;upper</a><br>
&#160;&#160;&#160;&#160;&#160;covariate<b>&nbsp;</b>effect&#160;<a href="#4.1.h.e">4.1.h.e: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_in.csv.upper</a><br>
&#160;&#160;&#160;&#160;&#160;time&#160;<a href="#4.1.f.d">4.1.f.d: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;measure_in.csv.time_lower,&nbsp;time_upper</a><br>

<b><big><a name="V">V</a></big></b>
<br>
valid<br>
&#160;&#160;&#160;&#160;&#160;grid<b>&nbsp;</b>pair&#160;<a href="#5.3.p">5.3.p: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;valid</a><br>
&#160;&#160;&#160;&#160;&#160;grid<b>&nbsp;</b>pair&#160;<a href="#5.3.m.b">5.3.m.b: Convert&nbsp;Between&nbsp;Age-Cohort&nbsp;Pairs&nbsp;and&nbsp;a&nbsp;Single&nbsp;Grid&nbsp;Index:&#160;Notation.Computational&nbsp;Grid</a><br>
value<br>
&#160;&#160;&#160;&#160;&#160;covariate<b>&nbsp;</b>X&#160;<a href="#5.1.k">5.1.k: Optimization&nbsp;of&nbsp;dismod_pde&nbsp;Objective&nbsp;Function:&#160;covariate_value</a><br>
variance<br>
&#160;&#160;&#160;&#160;&#160;estimate&#160;<a href="#7.e">7.e: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde:&#160;Estimator&nbsp;Standard&nbsp;Deviation</a><br>

<b><big><a name="W">W</a></big></b>
<br>
whats<b>_</b>new&#160;<a href="#2">2: Changes&nbsp;and&nbsp;Additions&nbsp;to&nbsp;dismod_pde</a><br>
wish<br>
&#160;&#160;&#160;&#160;&#160;list&#160;<a href="#7">7: Wish&nbsp;List&nbsp;For&nbsp;Improvements&nbsp;to&nbsp;dismod_pde</a><br>

<b><big><a name="X">X</a></big></b>
<br>
X<br>
&#160;&#160;&#160;&#160;&#160;covariate<b>&nbsp;</b>value&#160;<a href="#5.1.k">5.1.k: Optimization&nbsp;of&nbsp;dismod_pde&nbsp;Objective&nbsp;Function:&#160;covariate_value</a><br>
x<b>_</b><br>
&#160;&#160;&#160;&#160;&#160;covariate&#160;<a href="#4.1.h.b">4.1.h.b: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;effect_in.csv.covariate</a><br>

<b><big><a name="Z">Z</a></big></b>
<br>
zeta&#160;<a href="#4.1.g.e">4.1.g.e: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;sfun_in.csv.zeta</a><br>
&#160;&#160;&#160;&#160;&#160;change&#160;<a href="#4.2.2.k">4.2.2.k: Change&nbsp;The&nbsp;dismod_pde&nbsp;Stochastic&nbsp;Function&nbsp;Input&nbsp;File:&#160;zeta</a><br>
&#160;&#160;&#160;&#160;&#160;likelihood&#160;<a href="#4.1.f.f">4.1.f.f: dismod_pde&nbsp;Command&nbsp;Line&nbsp;Program:&#160;measure_in.csv.meas_zeta</a><br>

<hr>
<center><b><big><big><a name="11">11: External Internet References</a>
</big></big></b></center>
<table>
<tr valign="top"><td>
<b>Reference</b></td><td>
<b>Location</b></td></tr>

<tr valign="top"><td><a href="/http://winthrop.ihme.washington.edu/public/intro.html" target="_top">/http://winthrop.ihme.washington.edu/public/intro.html</a></td><td><a href="#7.k">7.k: wish_list#Import Dismod3 Data</a></td></tr>

<tr valign="top"><td><a href="_printable.htm" target="_top">_printable.htm</a></td><td><a href="#">: dismod_pde</a></td></tr>

<tr valign="top"><td><a href="_printable.xml" target="_top">_printable.xml</a></td><td><a href="#">: dismod_pde</a></td></tr>

<tr valign="top"><td><a href="dismod_pde-2013.0000.1.tgz" target="_top">dismod_pde-2013.0000.1.tgz</a></td><td><a href="#3.b">3.b: install#Download</a></td></tr>

<tr valign="top"><td><a href="dismod_pde-2013.1130.tgz" target="_top">dismod_pde-2013.1130.tgz</a></td><td><a href="#3.b">3.b: install#Download</a></td></tr>

<tr valign="top"><td><a href="http://docs.python.org/library/" target="_top">http://docs.python.org/library/</a></td><td><a href="#3.a">3.a: install#Requirements</a></td></tr>

<tr valign="top"><td><a href="http://www.coin-or.org/CppAD" target="_top">http://www.coin-or.org/CppAD</a></td><td><a href="#3.d">3.d: install#External Packages</a></td></tr>

<tr valign="top"><td><a href="http://www.coin-or.org/CppAD/" target="_top">http://www.coin-or.org/CppAD/</a></td><td><a href="#2.j">2.j: whats_new#2012-11-09</a></td></tr>

<tr valign="top"><td><a href="http://www.coin-or.org/CppAD/Doc/rosen34.xml" target="_top">http://www.coin-or.org/CppAD/Doc/rosen34.xml</a></td><td><a href="#2.bp">2.bp: whats_new#2011-08-05</a></td></tr>

<tr valign="top"><td><a href="http://www.coin-or.org/CppAD/Doc/runge45.xml" target="_top">http://www.coin-or.org/CppAD/Doc/runge45.xml</a></td><td><a href="#2.bp">2.bp: whats_new#2011-08-05</a></td></tr>

<tr valign="top"><td><a href="http://www.coin-or.org/CppAD/Doc/simplevector.xml" target="_top">http://www.coin-or.org/CppAD/Doc/simplevector.xml</a></td><td><a href="#5.1.g">5.1.g: optimize#Vector</a></td></tr>

<tr valign="top"><td><a href="http://www.opensource.org/licenses/gpl-3.0.html" target="_top">http://www.opensource.org/licenses/gpl-3.0.html</a></td><td><a href="#d">d: dismod_pde#License</a></td></tr>

<tr valign="top"><td><a href="http://www.seanet.com/~bradbell" target="_top">http://www.seanet.com/~bradbell</a></td><td><a href="#b">b: dismod_pde#Author</a></td></tr>

<tr valign="top"><td><a href="http://www.seanet.com/~bradbell/omhelp/overview.xml" target="_top">http://www.seanet.com/~bradbell/omhelp/overview.xml</a></td><td><a href="#3.d">3.d: install#External Packages</a></td></tr>

<tr valign="top"><td><a href="https://projects.coin-or.org/Ipopt" target="_top">https://projects.coin-or.org/Ipopt</a></td><td><a href="#2.a">2.a: whats_new#2013-11-30</a></td></tr>

<tr valign="top"><td><a href="https://projects.coin-or.org/Ipopt" target="_top">https://projects.coin-or.org/Ipopt</a></td><td><a href="#3.d">3.d: install#External Packages</a></td></tr>

<tr valign="top"><td><a href="https://projects.coin-or.org/Ipopt/ticket/214" target="_top">https://projects.coin-or.org/Ipopt/ticket/214</a></td><td><a href="#2.a">2.a: whats_new#2013-11-30</a></td></tr>

<tr valign="top"><td><a href="index.htm" target="_top">index.htm</a></td><td><a href="#">: dismod_pde</a></td></tr>

<tr valign="top"><td><a href="index.xml" target="_top">index.xml</a></td><td><a href="#">: dismod_pde</a></td></tr>

<tr valign="top"><td><a href="www.mortality.org" target="_top">www.mortality.org</a></td><td><a href="#2.bh">2.bh: whats_new#2011-10-07</a></td></tr>
</table>
</body>
</html>
