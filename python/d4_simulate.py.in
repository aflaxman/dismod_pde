#! @PYTHON_PREFIX@/bin/python
# $begin d4_simulate.py$$ $newlinech #$$
# $escape $$ $comment so can use \ as a normal character in codei$$
# $spell
# 	pde
#	init
#	num
#	integrands
#	exp
#	expr
#	Dismod
#	Dismoditis
#	cpp
#	py
#	csv
#	sim
#	omega
#	cv
#	ax
#	cx
#	cn
# $$
#
# $section Simulated dismod_pde Data and Solution Files$$
#
# $head Syntax$$
# $codei%d4_simulate.py \
# -files   %measure_in.csv% %solution.csv% \
# -age     %age_init% %age_step%  %age_min%  %age_max%  %age_bound% \
# -time    %time_add% %time_step% %time_min% %time_max% %time_bound% \
# -iota    %iota_expr%  \
# -rho     %rho_expr%  \
# -chi     %chi_expr%  \
# -omega   %omega_expr% \
# -measure %integrand% %number% %like% %sim_zeta% %fit_zeta% %sim_cv% %fit_cv% 
# %$$
#
# $head Purpose$$
# This is a preliminary simulation program that
# generates data to be analyzed by $cref/dismod_pde_csv/$$ and $cref/optimize/$$. 
#
# $head Convention$$
# The order of the command line flags (arguments that begin with a minus sign)
# does not matter, but the order of the values following each of the flags 
# does matter. 
# In addition, with the exception of the
# $cref/measure/d4_simulate.py/measure/$$ group,
# each of the command line arguments must be present once and only once.
#
# $head measure_in.csv$$
# This command line argument specifies the name of the measurement
# output file generated by $code d4_simulate.py$$.
# This file has the same format and meaning as
# $cref/measure_in.csv/dismod_pde_csv/measure_in.csv/$$ in $code dismod_pde_csv$$.
#
# $head solution.csv$$
# This command line argument specifies the name of the solution
# output file generated by $code d4_simulate.py$$
# The solution file give the actual values of the 
# $cref/stochastic functions/optimize/Stochastic Functions/$$
# that were used to simulate the data. 
# The fields in the solution file are
# $table
# $bold Field$$  $cnext $bold Description$$   
# $rnext
# $code age$$    $cnext age for the corresponding line of data
# $rnext
# $code cohort$$ $cnext cohort for the corresponding line of data
# $rnext
# $code time$$   $cnext time for the corresponding line of data (age + cohort)
# $rnext
# $code S$$      $cnext $latex S( \cdot )$$ for this (age, cohort)
# $rnext
# $code C$$      $cnext $latex C( \cdot )$$ for this (age, cohort)
# $rnext
# $code iota$$   $cnext $latex \iota( \cdot )$$ for this (age, cohort)
# $rnext
# $code rho$$    $cnext $latex \rho ( \cdot )$$ for this (age, cohort)
# $rnext
# $code chi$$    $cnext $latex \chi ( \cdot )$$ for this (age, cohort)
# $rnext
# $code omega$$  $cnext $latex \omega ( \cdot )$$ for this (age, cohort)
# $tend
# The solution is written on a rectangular grid in age, and cohort
# that surrounds all of the measurement age and time intervals.
# The lines are written with age varying first, then cohort.
# An extra buffer of plus and minus $icode time_add$$ are included
# before the minimum time and after the maximum time.
#
# $head age_init$$
# The command line argument $icode age_init$$
# specifies the initial age before which the susceptible population fraction 
# is one and the with condition fraction is zero; i.e.,
# their derivatives are zero for ages before $icode age_init$$.
# 
# $head age_step$$
# The command line argument $icode age_step$$ 
# specifies the difference between age values is the solution file.
# It must be a positive integer.
#
# $head age_min, age_max$$
# The command line arguments
# $icode%age_min%$$, and
# $icode%age_max%$$,
# specify the minimum lower age limit and maximum upper age limit 
# for a simulated measurement age range.
# These must be positive integers.
# We sometimes use $latex a_n$$ and $latex a_x$$ below to denote these 
# minimum and maximum age limits.
#
# $head age_bound$$
# The command line argument $icode age_bound$$ is the maximum
# difference $icode%age_upper% - %age_lower%$$ for a single measurement.
# $codei%
#	0 <= %age_bound% <= %age_max% - %age_min%
# %$$  
# It must be a non-negative integer.
# 
# $head time_add$$
# The command line argument $icode time_add$$ 
# specifies the amount of time subtracted from the minimum time,
# and added to the maximum time, before computing the necessary output
# cohort limits.
# It must be a positive integer.
# 
# $head time_step$$
# The command line argument $icode time_step$$ 
# specifies the difference between time (and cohort)
# values int the solution file.
# It must be a positive integer.
#
# $head time_min, time_max$$
# The command line arguments
# $icode%time_min%$$, and
# $icode%time_max%$$,
# specify the minimum lower time limit and maximum upper time limit 
# for a simulated measurement time range.
# These must be positive integers.
#
# $head time_bound$$
# The command line argument $icode time_bound$$ is the maximum
# difference $icode%time_upper% - %time_lower%$$ for a single measurement.
# $codei%
#	0 <= %time_bound% <= %time_max% - %time_min%
# %$$  
# It must be a non-negative integer.
#
# $head expressions$$
# The simulated value for the corresponding stochastic function as expressions
# where a is age and c is cohort; for example,
# $codep
#	'1e-4 * max(0. ,  (20.10 - c/100.) )'
# $$ 
# would have value zero for cohort 2010 and value 1e-4 for cohort 
# 1910.
# These expressions are limited to the variables $code a$$ (age),
# $code c$$ (cohort), $code t$$ (time), 
# the operators $code +$$, $code -$$, $code *$$, $code /$$, $code **$$,
# the functions $code min$$, $code max$$, $code exp$$, and numeric constants.
#
# $subhead iota_expr$$
# This expression defines the value for incidence in the simulation.
#
# $subhead rho_expr$$
# This expression defines the value for remission in the simulation.
#
# $subhead chi_expr$$
# This expression defines the value for excess mortality
# (mortality caused by the condition)  in the simulation.
#
# $subhead omega_expr$$
# This expression defines the value for other cause mortality
# (mortality not caused by the condition)  in the simulation.
#
# $head measure$$
# The $code -measure$$ may appear any number of times with a different
# $cref/integrand/d4_simulate.py/measure/integrand/$$ 
# each time (and must appear at least once).
#
# $subhead Offset Log Transform$$
# If $icode zeta$$ is an offset value,
# $icode model$$ is the model for the data without noise,
# and $icode noise$$ is a measurement noise value,
# the data is given by the relation
# $codei%
#	log( %zeta% + %data% ) = log( %zeta% + %model% ) + %noise%
# %$$
# The corresponding approximate coefficient of variation is
# $codei%
#	%cv% = %sigma% / (%zeta% + %model%)
# %$$
# where $icode sigma$$ is the standard deviation of the $icode noise$$.
#
# $subhead integrand$$
# The command line argument $icode integrand$$ is one of the
# integrands listed below:
# $table
# $bold Definition$$ 
# 	$cnext $pre  $$ $bold integrand$$
# 	$cnext $pre  $$ $bold Description$$
# $rnext
# $latex I^\iota ( \cdot ) = \iota( \cdot )$$
# 	$cnext $pre  $$ $code incidence$$
# 	$cnext $pre  $$ incidence rate
# 
# $rnext
# $latex I^\rho ( \cdot ) = \rho( \cdot )$$
# 	$cnext $pre  $$ $code remission$$
# 	$cnext $pre  $$ remission rate
# 
# $rnext
# $latex I^\chi ( \cdot ) = \chi( \cdot )$$
# 	$cnext $pre  $$ $code m_excess$$
# 	$cnext $pre  $$ excess mortality rate
# 
# $rnext
# $latex I^\omega ( \cdot ) = \omega( \cdot ) $$
# 	$cnext $pre  $$ $code m_other$$
# 	$cnext $pre  $$ other cause mortality rate
# 
# $rnext
# $latex I^w ( \cdot ) = \omega( \cdot ) + \chi ( \cdot ) $$
# 	$cnext $pre  $$ $code m_with$$
# 	$cnext $pre  $$ with condition mortality rate
# 
# $rnext
# $latex I^p ( \cdot ) = C( \cdot ) / [ S( \cdot ) + C( \cdot ) ]$$
# 	$cnext $pre  $$ $code prevalence$$
# 	$cnext $pre  $$ prevalence
# 
# $rnext
# $latex I^e ( \cdot ) = \chi( \cdot ) I^p ( \cdot ) $$
# 	$cnext $pre  $$ $code m_prevalence$$
# 	$cnext $pre  $$ excess mortality rate times prevalence
# 	
# $rnext
# $latex I^s ( \cdot ) = I^e ( \cdot )  $$
# 	$cnext $pre  $$ $code m_specific$$
# 	$cnext $pre  $$ cause specific mortality rate
# 
# $rnext
# $latex I^a ( \cdot ) = 
# 	\omega ( \cdot ) +  I^e ( \cdot )$$
# 	$cnext $pre  $$ $code m_all$$
# 	$cnext $pre  $$ all cause mortality rate
# 
# $rnext
# $latex I^\sigma ( \cdot ) = I^w ( \cdot ) / I^a ( \cdot )  $$
# 	$cnext $pre  $$ $code m_standard$$
# 	$cnext $pre  $$ standardized mortality ratio
# 
# $rnext
# $latex I^{C} ( \cdot ) = C  $$
# 	$cnext $pre  $$ $code pop_C$$
# 	$cnext $pre  $$ with-condition population size
# 
# $rnext
# $latex I^r ( \cdot ) = I^w ( \cdot ) / \omega ( \cdot )$$
# 	$cnext $pre  $$ $code relative_risk$$
# 	$cnext $pre  $$ relative risk ratio
# $tend
# For example, $code "incidence remission m_excess m_all"$$
# would specify that the corresponding measurements are to be included
# in $icode measure_in.csv$$.
#
# $subhead number$$
# The command line argument $icode number$$ specifies the
# number of measurements to simulate and output in the file
# $icode measure_in.csv$$ (for this integrand).
# If it is an integer, it is a direct specification of the number
# of data points and the location and span for the points is chosen at random.
# If $icode number$$ contains a decimal point, 
# the points are on a rectangular grid in age and time,
# the minimum age (time) grid value is $icode age_min$$ ($icode time_min$$),
# the maximum age (time) grid value is $icode age_max$$ ($icode time_max$$).
# In this case, the integer part of $icode number$$ specifies the number of
# age points and the factional part specifies the number of time points; e.g,
# the value $code 10.20$$ specifies 10 age grid values and 20 time grid values
# for a total of 200 data points.
#
# $subhead like$$
# The command line argument $icode like$$ is the
# likelihood of the noise added to the simulated measurements.
# Currently $code gaussian$$ is the only valid choice.
#
# $subhead sim_zeta$$
# The command line argument $icode sim_zeta$$ is the value of $icode zeta$$
# in the
# $cref/offset log transform/d4_simulate.py/measure/Offset Log Transform/$$
# during simulation of the $icode data$$ value.
#
# $subhead fit_zeta$$
# The command line argument $icode fit_zeta$$ is the value of $icode zeta$$
# in the during fitting; i.e.,
# the corresponding offset is placed in
# $cref/measure_in.csv/d4_simulate.py/measure_in.csv/$$.
# Note that the difference $icode%fit_zeta%-%sim_zeta%$$ corresponds to a
# bias in the simulated fit.
#
# $subhead sim_cv$$
# The command line argument $icode sim_cv$$ is the
# approximation coefficient of variation 
# for the noise added to the simulated measurements.
#
# $subhead fit_cv$$
# The command line argument $icode fit_cv$$ is the
# approximate coefficient of variation 
# for the measurement noise during fitting; i.e.
# the corresponding standard deviation is placed in
# $cref/measure_in.csv/d4_simulate.py/measure_in.csv/$$.
#
# $head Testing dismod_pde_csv$$
# The routine $cref d4_compare_sfun.py$$
# is meant be used to compare the results obtained by $cref dismod_pde_csv$$
# with the true solution used by $cref d4_simulate.py$$ to generate
# the corresponding data.
#
# $head Testing optimize$$
# The bash shell script $cref dismoditis.sh$$ uses
# by $code d4_simulate.py$$ to create CSV files that it then 
# converts to C++ source code.
# The C++ routine $cref dismoditis.cpp$$ is an example and test of
# $cref optimize$$ that use these C++ measurement and solution files.
# 
# $end
# --------------------------------------------------------------------------
# Other simulation parameters intended to just make results accurate
n_ode_step  = 1        # number of ODE integration steps per year
random_seed = 3        # seed for random number generator
#
# --------------------------------------------------------------------------
import sys
import csv
import random
import numpy
from math import exp
from math import log
# --------------------------------------------------------------------------
usage = '''
usage: d4_simulate.py \\
	-files      measure_in.csv solution.csv \\
	-age        age_init age_step age_min age_max age_bound \\
	-time       time_add time_step time_min time_max time_bound \\
	-iota       iota_expr \\
	-rho        rho_expr \\
	-chi        chi_expr \\
	-omega      omega_expr \\
	-measure    integrand number like sim_zeta fit_zeta sim_cv fit_cv 

measure_in.csv: a dismod_pde_csv measurement input file (output)
solution.csv:   file with stochastic funcition value during simulation (output)


age_init     initial time for integration of ODE.
age_step:    step size for age in solution.csv (positive integer)
age_min:     minimum lower age limit for a measurements (integer > 0)
age_max:     maximum upper age limit for a measurements (integer > 0)
age_bound:   bound on age_upper - age_lower for a measurement (integer >= 0)

time_add:    amount subtracted from minimum and added to maximum time. 
time_step:   step size for time (and cohort) in solution.csv (positive integer)
time_min:    minimum lower time limit for a measurements (integer > 0)
time_max:    maximum upper time limit for a measurements (integer > 0)
time_bound:  bound on time_upper - time_lower for a measurement (integer > 0)

The following expressions use a for age, c for cohort, and t for time: 
iota_expr:    incidence rate during the simulations
rho_expr:     remission rate during simulations
chi_expr:     rate of excess death due to the disease
omega_expr:   rate of death from other causes

integrand:    integrands corresponding to simulated measurements
number:       number of measurements for this integrand, fractions are special 
like:         likelihood used to simulate measurement noise
sim_zeta:     offset in log transform during simulation
fit_zeta:     offset in log transform during fitting
sim_cv:       coefficient of variation for simulated measurement noise 
fit_cv:       coefficient of variation for measurement noise during fit
'''
num_arg = len( sys.argv)
expect  = 3 + 6 + 6 + 2 + 2 + 2 + 2 + 8
if num_arg < expect + 1 :
	expect = str(expect)
	found  = str(num_arg - 1)
	msg ="d4_simulate.py: expected at least " + expect + " but found " + found
	msg = msg + " arguments after d4_simulate.py."
	print usage
	sys.exit(msg)
arg            = sys.argv.__iter__()
#
program_name    = arg.next()
count_arg       = 1
files_done      = False
age_done        = False
time_done       = False
iota_done       = False
rho_done        = False
chi_done        = False
omega_done      = False
measure         = []
while count_arg < num_arg :
	flag           = arg.next()
	if flag == '-files' and not files_done and count_arg + 3 <= num_arg :
		files_done     = True
		measure_in_csv = arg.next()
		solution_csv   = arg.next()
		count_arg      = count_arg + 3
	elif flag == '-age' and not age_done and count_arg + 6 <= num_arg :
		age_done        = True
		age_init        = arg.next()
		age_step        = arg.next()
		age_min         = arg.next()
		age_max         = arg.next()
		age_bound       = arg.next()
		count_arg       = count_arg + 6
	elif flag == '-time' and not time_done and count_arg + 4 <= num_arg :
		time_done       = True
		time_add        = arg.next()
		time_step       = arg.next()
		time_min        = arg.next()
		time_max        = arg.next()
		time_bound      = arg.next()
		count_arg       = count_arg + 6
	elif flag == '-iota' and not iota_done and count_arg + 2 <= num_arg :
		iota_done       = True
		iota_expr       = arg.next()
		count_arg       = count_arg + 2
	elif flag == '-rho' and not rho_done and count_arg + 2 <= num_arg :
		rho_done        = True
		rho_expr        = arg.next()
		count_arg       = count_arg + 2
	elif flag == '-chi' and not chi_done and count_arg + 2 <= num_arg :
		chi_done        = True
		chi_expr        = arg.next()
		count_arg       = count_arg + 2
	elif flag == '-omega' and not omega_done and count_arg + 2 <= num_arg :
		omega_done      = True
		omega_expr      = arg.next()
		count_arg       = count_arg + 2
	elif flag == '-measure' and count_arg + 8 <= num_arg :
		integrand       = arg.next()
		number          = arg.next()
		like            = arg.next()
		sim_zeta        = arg.next() 
		fit_zeta        = arg.next()
		sim_cv          = arg.next() 
		fit_cv          = arg.next()
		count_arg       = count_arg + 8
		entry           = {
			'integrand'      : integrand       ,
			'number'         : number          ,
			'like'           : like            ,
			'sim_zeta'       : sim_zeta        ,
			'fit_zeta'       : fit_zeta        ,
			'sim_cv'         : sim_cv          ,
			'fit_cv'         : fit_cv
		}
		measure.append( entry )
	else:
		msg = 'd4_simulate.py: command line argument number %d \n' % count_arg
		msg = msg + 'unknown flag = ' + flag 
		print usage
		sys.exit(msg)
#
def str2int(name_value, str_value) :
	try :
		int_value     = int(str_value)
		float_value   = float(str_value)
		assert float_value == float( int_value ) 
		return int_value
	except :
		msg = 'd4_simulate.py: error converting ' + name_value + ' to int'
		sys.exit(msg)
	
print "d4_simulate.py:"
print "measure_in_csv     = ", measure_in_csv
print "solution_csv       = ", solution_csv
print "age_init           = ", age_init
print "age_step           = ", age_step
print "age_min            = ", age_min 
print "age_max            = ", age_max 
print "age_bound          = ", age_bound
print "time_add           = ", time_add
print "time_step          = ", time_step
print "time_min           = ", time_min
print "time_max           = ", time_max
print "time_bound         = ", time_bound
print "iota_expr          = ", iota_expr
print "rho_expr           = ", rho_expr
print "chi_expr           = ", chi_expr
print "omega_expr         = ", omega_expr
age_init    = str2int('age_init',    age_init)
age_step    = str2int('age_step',    age_step)
age_min     = str2int('age_min',     age_min)
age_max     = str2int('age_max',     age_max)
age_bound   = str2int('age_bound',   age_bound)
time_add    = str2int('time_add',    time_add)
time_step   = str2int('time_step',   time_step)
time_min    = str2int('time_min',    time_min)
time_max    = str2int('time_max',    time_max)
time_bound  = str2int('time_bound',  time_bound)
fmt         = '%13s%13s%13s%13s%13s%13s'
print fmt % ('integrand', 'number', 'sim_zeta', 'fit_zeta', 'sim_cv', 'fit_cv')
for entry in measure :
	integrand      = entry['integrand' ]
	number         = entry['number']
	sim_zeta       = entry['sim_zeta']
	fit_zeta       = entry['fit_zeta']
	sim_cv         = entry['sim_cv']
	fit_cv         = entry['fit_cv']
	print fmt % (integrand, number, sim_zeta, fit_zeta, sim_cv, fit_cv)
	if like != 'gaussian' :
		msg='gaussian != like'
		print usage
		sys.exit(msg)
	number              = number.split('.')
	if len(number) == 1 :
		number         = [ int(number[0]) ]
	else:
		number         = [ int(number[0]) , int(number[1]) ]
	entry['number']     = number
	entry['sim_zeta' ]  = float( sim_zeta )
	entry['fit_zeta' ]  = float( fit_zeta )
	entry['sim_cv' ]    = float( sim_cv )
	entry['fit_cv' ]    = float( fit_cv )
#
# --------------------------------------------------------------------------
# Fields in the solution file
sol_fields = [ 
	'age', 'cohort', 'time', 'S', 'C', 'iota', 'rho', 'chi', 'omega' 
] 
# 
# Fields in the measurement file
meas_fields = [ 
	'integrand'        ,
	'age_lower'        ,
	'age_upper'        ,
	'time_lower'       ,
	'time_upper'       ,
	'meas_like'        ,
	'meas_zeta'        ,
	'meas_sigma'       ,
	'meas_value'
]
integrand_name = [     # names used for measurement model integrands
	'incidence'       ,  # 0:     = iota
	'remission'       ,  # 1:     = rho
	'm_excess'        ,  # 2:     = chi
	'm_other'         ,  # 3:     = omega 
	'm_with'          ,  # 4: I^w = omega + chi 
	'prevalence'      ,  # 5: I^p = C / (S + C)
	'm_prevalence'    ,  # 6: I^e = chi * I^p
	'm_specific'      ,  # 7:     = I^e
	'm_all'           ,  # 8: I^a = omega + I^e
	'm_standard'      ,  # 9: I^s = I^w / I^a
	'pop_C'           ,  #10:     = C
	'relative_risk'      #11: I^w / omega
]
# --------------------------------------------------------------------------
# safe evalutation of expressions defined on the command line
def safe_eval(expression, a, c) :
	import math
	t   = a + c
	loc = { 'a' : a , 'c' : c , 't' : t , 
			'min' : min , 'max' : max , 'exp' : exp 
	}
	glo = {'__builtins__' : None}
	return eval(expression, glo, loc)
# 
# Fouth order Runge-Kutta solver
# Copied from the following web page where there is documentation
# http://www.seanet.com/~bradbell/pycppad/runge_kutta_4.xml
def runge_kutta_4(f, ti, yi, dt) :
	k1 = dt * f(ti         , yi)
	k2 = dt * f(ti + .5*dt , yi + .5*k1) 
	k3 = dt * f(ti + .5*dt , yi + .5*k2) 
	k4 = dt * f(ti + dt    , yi + k3)
	yf = yi + (1./6.) * ( k1 + 2.*k2 + 2.*k3 + k4 )
	return yf 

#
# set cohort limits 
cohort_min = time_min - age_max - time_add
cohort_max = time_max - age_min + time_add
cohort_min = cohort_min - (cohort_min % time_step)
if cohort_max % time_step != 0 :
	cohort_max = cohort_max - (cohort_max % time_step)
	cohort_max = cohort_max + time_step
#
# Dismod age ODE for S, C, and then all the measured values.
dismod_ode_cohort = 0.    # cohort for current evaluation of dismod_ode
dismod_ode_before = True  # is this interval before age_init
def dismod_ode(a, y) :
	S          = y[0]
	C          = y[1]
	i          = safe_eval(iota_expr, a, dismod_ode_cohort)
	r          = safe_eval(rho_expr,  a, dismod_ode_cohort)
	x          = safe_eval(chi_expr,  a, dismod_ode_cohort)
	o          = safe_eval(omega_expr,   a, dismod_ode_cohort)
	# now compute the derivatives
	if  dismod_ode_before  :
		dS = 0.0
		dC = 0.0
	else :
		dS         = -(i + o) * S +   r           * C
		dC         =   i      * S - ( r + o + x ) * C
	incidence     = i
	remission     = r
	m_excess      = x
	m_other       = o 
	m_with        = o + x
	prevalence    = C / (S + C)
	m_prevalence  = x * prevalence
	m_specific    = m_prevalence
	m_all         = o + m_prevalence
	m_standard    = m_with / m_all
	pop_C         = C
	relative_risk = m_with / o
	dy = numpy.array([ 
		dS,
		dC,
		incidence,
		remission,
		m_excess,
		m_other,
		m_with,
		prevalence,
		m_prevalence,
		m_specific,
		m_all,
		m_standard,
		pop_C,
		relative_risk
	])
	return dy
#
# ------------------------------------------------------------------
# Solve for S, C, and integrate all the measurement values w.r.t. age
# and cohort on a grid of age-cohort values with a step size of one
#
n_cohort_all = cohort_max - cohort_min + 1
n_age_all    = age_max + 1
n_integrand  = len( integrand_name )
y_all        = numpy.zeros( [n_integrand + 2, n_age_all , n_cohort_all ] )
y_all[0,0,:] = 1.                 # S to be one at age zero and for all cohorts
da           = 1. / n_ode_step    # integration step size w.r.t age
for c_index in range(n_cohort_all) :
	c                 = cohort_min + c_index 
	dismod_ode_cohort =  c
	yi                = y_all[:,0, c_index]
	for a_index  in range(age_max) :
		ai      = float(a_index)
		for step in range(n_ode_step) :
			# note that if ai + da == age_init, the interval is still before
			dismod_ode_before = ai < age_init
			yi = runge_kutta_4(dismod_ode, ai, yi, da) 
			ai = ai + da
		y_all[:,a_index+1,c_index] = yi
#
# Now simulate the measurements
data=[]
time_diff   = time_max - time_min
age_diff    = age_max  - age_min
random.seed(random_seed)
for entry in measure :
	integrand      = entry['integrand' ]
	number         = entry['number']
	sim_zeta       = entry['sim_zeta']
	fit_zeta       = entry['fit_zeta']
	sim_cv         = entry['sim_cv']
	fit_cv         = entry['fit_cv']
	index          = 0
	for i in range( len( integrand_name ) ) :
		if integrand_name[i] == integrand :
			index = i
	if integrand_name[index] != integrand :
		msg='d4_simulate.py: invalid integrand = ' + integrand
		sys.exit(msg)
	if len(number) == 1 :
		total_number = number[0]
	else:
		total_number = number[0] * number[1]
	for ell in range(total_number) :
		# choose time limits
		time_range = random.choice(range(time_bound)) + 1
		time_lower = time_min + random.choice(range(time_diff - time_range))
		time_upper = time_lower + time_range
		# choose age limits
		age_range  = random.choice( range(age_bound + 1) )
		age_lower  = age_min + random.choice(range(age_diff - age_range + 1))
		age_upper  = age_lower + age_range
		# check for case where using a uniform grid in age and time
		if len(number) == 2 :
			j = ell % number[0]
			k = int( ell / number[0] )
			assert ell == k * number[0] + j
			a = age_min + (age_max - age_min) * float(j) /(number[0] - 1)
			age_lower  = a
			age_upper  = a
			t = time_min + (time_max - time_min) * float(k) /(number[1] - 1)
			time_lower = t
			time_upper = t
		# determine the corresponding cohort limits 
		# note that the first and last cohort have no extent in age
		cohort_lower = time_lower - age_upper
		cohort_upper = time_upper - age_lower
		# initialize for the integration with respect to age and cohort
		model        = 0
		units        = 0
		c            = cohort_lower
		while c <= cohort_upper :
			# determine lower age limit for this cohort
			if c + age_lower <= time_lower :
				a_lower = time_lower - c 
			else	:
				a_lower = age_lower
			# determine upper age limit for this cohort
			if c + age_upper <= time_upper :
				a_upper = age_upper
			else	:
				a_upper = time_upper - c
			c_index     = c - cohort_min
			if age_upper == age_lower :
				y                 = y_all[0:2, a_upper, c_index]
				dismod_ode_cohort = c
				f                 = dismod_ode(a_upper, y)
				model             = model + f[index + 2]
				units             = units + 1
			else :
				model       = model + y_all[index + 2, a_upper, c_index]
				model       = model - y_all[index + 2, a_lower, c_index]
				units       = units + a_upper - a_lower
			c           = c + 1
		model = model / units
		# convert cv to standard deviation for difference of logs
		sim_sigma  = log(1.0 + sim_cv);
		# simulation noise of offset log 
		sim_noise  = random.normalvariate(0, 1.) * sim_sigma
		# log(zeta + meas_value) - log(zeta + model) = sim_noise
		meas_value = exp(log(sim_zeta + model) - sim_noise) - sim_zeta
		fit_sigma     = fit_cv * model
		fit_sigma     = fit_sigma / (fit_zeta + model)
		#
		# formatting output
		time_lower  = '%d'     % time_lower
		time_upper  = '%d'     % time_upper 
		age_lower   = '%d'     % age_lower
		age_upper   = '%d'     % age_upper 
		meas_name   = 'gaussian'
		meas_sigma  = '%.3e'   % fit_sigma
		meas_zeta   = '%.3e'   % fit_zeta
		measure     = '%.3e'   % meas_value
		row = [ 
			integrand                 ,
			age_lower                 , 
			age_upper                 ,
			time_lower                , 
			time_upper                ,
			meas_name                 ,
			meas_zeta                 ,
			meas_sigma                ,
			measure
		]
		data.append(row)
data.sort(key = lambda row : ( int(row[1]) + int(row[2]) ) / 2 )
# -------------------------------------------------------
meas_fp = csv.writer(
	open(measure_in_csv, 'w'), 
)
meas_fp.writerow(meas_fields)
meas_fp.writerows(data)
# -------------------------------------------------------
sol_fp = csv.writer(
	open(solution_csv, 'w'), 
)
sol_fp.writerow(sol_fields)
#
# age output grid in sol_file
n_age           = int( 1.5 + age_max / age_step )
# cohort output grid in sol_file
n_cohort        = int( 1.5 + (cohort_max - cohort_min) / time_step ) 
for c_index in range(n_cohort) :
	c       = cohort_min + c_index * time_step
	c_str   = '%d'     % c
	for a_index in range(n_age) :
		a      = a_index * age_step
		t      = a + c
		S      = y_all[0, a, c - cohort_min]
		C      = y_all[1, a, c - cohort_min]
		i      = safe_eval(iota_expr, a, c)
		r      = safe_eval(rho_expr,  a, c)
		x      = safe_eval(chi_expr,  a, c)
		m      = safe_eval(omega_expr,   a, c)
		#
		# formatting output
		a   = '%d'     % a
		t   = '%d'     % t
		S   = '%.3e'   % S
		C   = '%.3e'   % C
		i   = '%.3e'   % i
		r   = '%.3e'   % r
		x   = '%.3e'   % x
		m   = '%.3e'   % m
		row = [ a, c_str , t,  S, C, i, r, x, m]
		sol_fp.writerow(row)
