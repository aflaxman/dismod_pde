#! /bin/bash -e
# $OMhelpKeyCharacter=&
#
# The following commands are only useful during testing of gaussian.sh
# befor dismod_pde is installed. You can ignore them:
top_builddir=@abs_top_builddir@
top_srcdir=@abs_top_srcdir@
#
# Test a case where one of the mortality rates is gaussian w.r.t age and cohort
# ----------------------------------------------------------------------------
# &begin gaussian.sh&& &newlinech #&&
# &spell
# 	pde
#	sed
#	wc
#	vec
#	var
#	done done
#	init
#	yyyymmdd
#	sim_cv
#	bc
#	solution solution
#	compare compare
#	age age
#	cohort cohort
#	time time
#	iota iota
#	rho rho
#	chi chi
#	omega omega
#	pdf
#	eps
#	png
#	icode
#	fi
#	cpp
#	rm
#	sfun
#	py
#	inf
#	csv
#	expr
#	dir
#	dismod
#	builddir
#	csv
#	covariates
#	exp
# &&
# &section Simulate and Fit Where Incidence is Gaussian in Age an Cohort&&
# &index simulate, gaussian fit&&
# &index gaussian, simulate fit&&
# &index fit, simulated gaussian&&
#
# &head Syntax&&
# &codei%./gaussian.sh %grid_step% %prevalence_cv%&&
# &codep
if [ "$2" == '' ]
then
	echo 'usage: ./gaussian grid_step prevalence_cv'
	exit 1
fi
# &&
#
# &head Purpose&&
# This is a simulation example and test of the dismod_pde. 
# It exits with status zero if the test passes
# and with status one if the test fails.
# This example is located in the file
#	&codei%
#	%dismod_pde_prefix%/share/doc/dismod_pde-%yyyymmdd%/example/gaussian.sh
# %&&
# where &icode dismod_pde_prefix&& is the 
# &cref/prefix/install/Prefix/&& 
# specified during the install procedure. 
#
# &head grid_step&&
# The command line argument &icode grid_step&& is a positive integer that
# specifies the step between age and cohort grid points.
# &codep
global_grid_step="$1"
# &&
#
# &head prevalence_cv&&
# Coefficient of variation for the prevalence data, 
# &codei%prevalence_cv% = .1%&& corresponds to ten percent
# coefficient of variation.
# &codep
global_prevalence_cv="$2"
# &&
#
# &head python_path&&
# The following command sets the directory where the dismod_pde python
# scripts are located. This should not be necessary once dismod_pde is installed.
# &codep
global_python_path="$top_builddir/python"
# && 
#
# &head dismod_pde_path&&
# The following command sets the directory where the binary &code dismod_pde_csv&&
# file is located. This should not be necessary once dismod_pde is installed.
# &codep
global_dismod_pde_path="$top_builddir/cpp"
# && 
#
# &head grid function&&
# first argument is initial value,
# second argument is the ending value, and the third argument
# is the increment between values.
# The grid will include the initial value and a value at least as large
# as the ending value.
# &codep
make_grid() {
	initial="$1" ; ending="$2" ; inc="$3" ; grid=''
	for (( value = initial; value < ending+inc; value = value+inc ))
	do
		grid="$grid $value"
	done
}
# &&
#
# &head Global Parameters&&
# The following parameters are used globally in this file and do not change:
# &codep
## age grid parameters
global_age_min=20 
global_age_max=80
age_step="$global_grid_step"
make_grid $global_age_min $global_age_max $age_step
global_age_grid="$grid"  # age grid values
echo "age_grid=$global_age_grid"
##
## minimum and maximum time value in the data
global_time_min=1975
global_time_max=2010
##
## cohort grid
age_max=`echo "$global_age_grid" | sed -e 's|.* ||'`
cohort_min=`expr $global_time_min - $age_max`
cohort_max=`expr $global_time_max - $global_age_min`
cohort_step="$global_grid_step"
make_grid $cohort_min $cohort_max $cohort_step
global_cohort_grid="$grid"
echo "cohort_grid=$global_cohort_grid"
##
global_zeta=1e-6         # value of zeta in all cases
# &&
#
#
# ----------------------------------------------------------------------------
# &head parameter.csv&&
# The &cref/parameter.csv/dismod_pde_csv/parameter.csv/&& 
# file for this example is as follows:
# &comment BEGIN COMMENT
echo 'create parameter.csv'
cat << EOF > parameter.csv
name,value
age_grid,$global_age_grid
cohort_grid,$global_cohort_grid
max_ode_step,1.0
print_level,5
max_iteration,50
converge_tolerance,1e-3
debug_output,1
EOF
# END COMMENT&&
# &code
# &verbatim%build/example/gaussian/parameter.csv%&&
# &&
#
# ----------------------------------------------------------------------------
# &head effect_in.csv&&
# For this example, there are no covariates and
# the &cref/effect_in.csv/dismod_pde_csv/effect_in.csv/&& file is as follows:
# &comment BEGIN COMMENT
echo 'create effect_in.csv'
cat << EOF > effect_in.csv
integrand,covariate,lower,initial,upper
EOF
# END COMMENT&& 
# &code
# &verbatim%build/example/gaussian/effect_in.csv%&&
# &&
#
# ----------------------------------------------------------------------------
# &head measure_in.csv&&
# Use &cref d4_simulate.py&& to simulate the file
# &cref/measure_in.csv/dismod_pde_csv/measure_in.csv/&&.
# &codep
echo 'create measure_in.csv'
measure_in_csv='measure_in.csv'
solution_csv='solution.csv'
age_init=0
age_step=1
age_min="$global_age_min"
age_max="$global_age_max"
age_bound=10
n_age=7
n_time=4
grid="$n_age.$n_time"
number=30
like='gaussian'
sim_zeta="$global_zeta"
fit_zeta="$global_zeta"
sim_cv="$global_prevalence_cv"
fit_cv="$global_prevalence_cv"
time_add=10
time_step=1
time_min="$global_time_min"
time_max="$global_time_max"
time_bound=10
rho_true=0.0
##
time_plus=`expr $time_max + $time_add`
age_max="$global_age_max"
age_min="$global_age_min"
age_mid=`expr $age_max / 2 + $age_min / 2`
time_mid=`expr $time_max / 2 + $time_min / 2`
scale=`echo "($age_max - $age_min) / 4" | bc`
linear="(.01 + a/$age_max. + ($time_plus.-t)/($time_plus.-$time_min))/2.01"
quadratic="- ((a-$age_mid)/$scale.)**2 - ((t-$time_mid)/$scale.)**2"
##
chi_true="1e-1 * $linear"
omega_true="1e-2 * $linear"
iota_max=1e-2
iota_min=1e-3
iota_true="($iota_max-$iota_min)*exp($quadratic) + $iota_min"
##
$global_python_path/d4_simulate.py  \
-files      $measure_in_csv $solution_csv \
-age        $age_init $age_step $age_min  $age_max $age_bound \
-time       $time_add $time_step $time_min $time_max $time_bound \
-iota       "$iota_true" \
-rho         $rho_true  \
-chi        "$chi_true" \
-omega      "$omega_true" \
-measure    prevalence    $number $like $sim_zeta $fit_zeta $sim_cv $fit_cv  \
-measure    relative_risk $grid   $like $sim_zeta $fit_zeta     0.0     0.0  \
-measure    m_all         $grid   $like $sim_zeta $fit_zeta     0.0     0.0
# &&
# ----------------------------------------------------------------------------
# 
# &head template.csv&&
# Remove the file 
# &cref/template.csv/dismod_pde_csv/sfun_in.csv/Output Template/&& 
# (if it exists) and then recreate it.
# &codep
echo 'create template.csv'
rm -f template.csv
echo 'dismod_pde_csv parameter.csv measure_in.csv template.csv'
$global_dismod_pde_path/dismod_pde_csv parameter.csv measure_in.csv template.csv
# &&
# ----------------------------------------------------------------------------
# &head sfun_in.csv&&
# is a version of template.csv with certain values modified by 
# d4_change_sfun_in.py.
# &codep
echo 'create sfun_in.csv'
zeta="$global_zeta"
sigma=2e-1
zero_inf='0.0 if a < 20.1 else inf'
$global_python_path/d4_change_sfun_in.py template.csv sfun_in.csv \
-comment            'zeta      lower           initial          upper' \
-optimize_S         $zeta        0.0             0.50            1.0 \
-optimize_C         $zeta        0.0             1e-2            1.0 \
-optimize_iota      $zeta        0.0             1e-2            1.0 \
-optimize_rho       $zeta        0.0             0.00            0.0 \
-optimize_chi       $zeta        0.0             1e-2            1.0 \
-optimize_omega     $zeta        0.0             1e-2            1.0 \
\
-comment            'like       zeta            sigma           mean' \
-prior_S         gaussian      $zeta       "$zero_inf"           1.0 \
-prior_C         gaussian      $zeta              inf            0.0 \
-prior_iota      gaussian      $zeta              inf    "$iota_true" \
-prior_rho       gaussian      $zeta              inf      $rho_true  \
-prior_chi       gaussian      $zeta              inf     "$chi_true" \
-prior_omega     gaussian      $zeta              inf   "$omega_true" \
\
-comment            'like       zeta            sigma          order' \
-age_S           gaussian      $zeta              0.0             1 \
-age_C           gaussian      $zeta              0.0             1 \
-age_iota        gaussian      $zeta           $sigma             2 \
-age_rho         gaussian      $zeta              inf             2 \
-age_chi         gaussian      $zeta           $sigma             2 \
-age_omega       gaussian      $zeta           $sigma             2 \
\
-comment            'like       zeta            sigma          order' \
-cohort_S        gaussian      $zeta           $sigma             2 \
-cohort_C        gaussian      $zeta           $sigma             2 \
-cohort_iota     gaussian      $zeta           $sigma             2 \
-cohort_rho      gaussian      $zeta              inf             2 \
-cohort_chi      gaussian      $zeta           $sigma             2 \
-cohort_omega    gaussian      $zeta           $sigma             2 \
\
-comment            'name       zeta            sigma' \
-cross_S         gaussian      $zeta           $sigma  \
-cross_C         gaussian      $zeta           $sigma  \
-cross_iota      gaussian      $zeta           $sigma  \
-cross_rho       gaussian      $zeta              inf  \
-cross_chi       gaussian      $zeta           $sigma  \
-cross_omega     gaussian      $zeta           $sigma  
# &&
# ----------------------------------------------------------------------------
# &head Running dismod_pde_csv&&
# Next we use &cref dismod_pde_csv&& to generate the files
# &cref/measure_out.csv/dismod_pde_csv/measure_out.csv/&&,
# &cref/sfun_out.csv/dismod_pde_csv/sfun_out.csv/&&, and
# &cref/effect_out.csv/dismod_pde_csv/effect_out.csv/&&.
# &codep
echo 'create effect_out.csv, measure_out.csv, sfun_out.csv'
echo 'dismod_pde_csv parameter.csv                 \\'
echo '     measure_in.csv     measure_out.csv   \\'
echo '     sfun_in.csv        sfun_out.csv      \\'
echo '     effect_in.csv      effect_out.csv'
if $global_dismod_pde_path/dismod_pde_csv parameter.csv  \
     measure_in.csv     measure_out.csv   \
     sfun_in.csv        sfun_out.csv      \
     effect_in.csv      effect_out.csv
then
	dismod_pde_csv_ok='yes'
else
	dismod_pde_csv_ok='no'
fi
# &&
# ----------------------------------------------------------------------------
# &head prevalence_residual&&
# Next we use &cref d4_bubble.py&& to plot of the prevalence
# residuals as a function of age and time.
# These plots are called 
# &codei%prevalence_residual.%ext%&&
# for &icode ext&& in &code { pdf , eps, png}&&.
# &codep
csv_file='measure_out.csv'
x_name='time'
x_min="$global_time_min"
x_max="$global_time_max"
y_name='age'
y_min="$global_age_min"
y_max="$global_age_max"
s_name='scaled'
s_min=0.25
s_between=1.0
s_max=2.0
f_name='integrand'
f_min='prevalence'
f_max='prevalence'
title='Scaled Prevalence Residuals'
for ext in pdf eps png
do
	plot_file="prevalence_residual.$ext"
	echo "create $plot_file"
	$global_python_path/d4_bubble.py $csv_file $plot_file "$title" \
			$x_name $x_min $x_max $y_name $y_min $y_max \
			$s_name $s_min $s_between $s_max $f_name $f_min $f_max
done
# &&
# Below is the &code png&& version of this plot:
# &image%
#	build/example/gaussian/prevalence_residual.png%
#	gaussian_prevalence_residual.png
# %&&
# -----------------------------------------------------------------------------
# &head sfun_grid.csv&&
# Next we use &cref d4_sfun_grid.py&& 
# to create &code sfun_grid.csv&&, which is a version of 
# the stochastic function output information &code sfun_out.csv&&
# interpolated to a rectangular grid with respect to age and time.
# &codep
n_age=`echo $global_age_grid | wc -w`
time_start="$global_time_min"
time_end="$global_time_max"
n_time="$n_age"
echo 'create sfun_grid.csv'
$global_python_path/d4_sfun_grid.py sfun_out.csv sfun_grid.csv \
	$time_start $time_end $n_time
# &&
# ---------------------------------------------------------------------------- 
# &head sfun_der.csv&&
# Next we use &cref d4_sfun_der.py&& 
# to create &code sfun_der.csv&& which has the format expected
# by &cref d4_contour.py&&; 
# i.e., each variable has its own column.
# In addition, the columns are:
# &codep
# 	age, cohort, time, S, C, iota, rho, chi, omega, prevalence, m_all, risk
# &&
# &codep
echo 'create sfun_der.csv'
$global_python_path/d4_sfun_der.py \
	sfun_grid.csv sfun_der.csv \
	age           age \
	cohort        cohort \
	time          time \
	S             S_estimate \
	C             C_estimate \
	iota          iota_estimate \
	rho           rho_estimate \
	chi           chi_estimate \
	omega         omega_estimate \
	prevalence    "C / (S + C)" \
	m_all         "omega + chi * prevalence"    \
	risk          "(omega + chi) / omega"
# &&
# -----------------------------------------------------------------------------
# &head Prevalence Contour Plot&&
# Next we generate &cref/contour/d4_contour.py/&& 
# plots of the model fit for prevalence 
# as a function of age and time.
# These plots are called 
# &codei%prevalence_estimate.%ext%&& 
# for &icode ext&& in &code { pdf , eps , png}&&.
# &codep
csv_file='sfun_der.csv'
x_name='time'
x_min="$global_time_min"
x_max="$global_time_max"
y_name='age'
y_min="$global_age_min"
y_max="$global_age_max"
z_name='prevalence'
z_min=0.001
z_max=1.0
title='Contours of Prevalence Estimate'
for ext in pdf eps png
do
	plot_file="prevalence_estimate.$ext"
	echo "create $plot_file"
	../../python/d4_contour.py $csv_file $plot_file "$title" \
		$x_name $x_min $x_max \
		$y_name $y_min $y_max \
		$z_name $z_min $z_max
done
# &&
# Below is the &code png&& version of this plot:
# &image%
#	build/example/gaussian/prevalence_estimate.png%
#	gaussian_prevalence_estimate.png
# %&&
# -----------------------------------------------------------------------------
# &head Rate Contour Plots&&
# Next we generate &cref/contour/d4_contour.py/&& plots for 
# other cause mortality &code omega&&, 
# excess mortality &code chi&&, 
# and incidence &code iota&&
# as a function of age and time.
# These plots are called 
# &icode%var%_%type%.%ext%&&
# for &icode var&& in &code { omega , chi , iota }&&,
# &icode type&& in &code { estimate , true }&&,
# and &icode ext&& in &code { pdf , eps , png}&&.
# &codep
var_vec=(   'omega'                 'chi'              'iota'      )
name_vec=(  'Other Cause Mortality' 'Excess Mortality' 'Incidence' )
#
csv_file_vec=(  'sfun_der.csv'  'solution.csv'  )
plot_type_vec=( 'estimate'       'true'         ) 
#
for var_index in 0 1 2
do
	var="${var_vec[$var_index]}"
	name="${name_vec[$var_index]}"
	for type_index in 0 1
	do
		plot_type="${plot_type_vec[$type_index]}"
		csv_file="${csv_file_vec[$type_index]}"
		for ext in pdf eps png
		do
			plot_file="${var}_${plot_type}.${ext}"
			if [ "$plot_type" == 'estimate' ]
			then
				title="Contours of $name Estimate"
			else
				title="Contours of $name Truth"
			fi
			x_name='time'
			x_min="$global_time_min"
			x_max="$global_time_max"
			y_name='age'
			y_min="$global_age_min"
			y_max="$global_age_max"
			z_name="$var"
			z_min=0.001
			z_max=1.0
			echo "create $plot_file"
			../../python/d4_contour.py $csv_file $plot_file "$title" \
				$x_name $x_min $x_max \
				$y_name $y_min $y_max \
				$z_name $z_min $z_max
		done
	done
done
# &&
# &subhead omega_estimate&&
# &image%
#	build/example/gaussian/omega_estimate.png%
#	gaussian_omega_estimate.png
# %&&
# &subhead omega_true&&
# &image%
#	build/example/gaussian/omega_true.png%
#	gaussian_omega_true.png
# %&&
# &subhead chi_estimate&&
# &image%
#	build/example/gaussian/chi_estimate.png%
#	gaussian_chi_estimate.png
# %&&
# &subhead chi_true&&
# &image%
#	build/example/gaussian/chi_true.png%
#	gaussian_chi_true.png
# %&&
# &subhead iota_estimate&&
# &image%
#	build/example/gaussian/iota_estimate.png%
#	gaussian_iota_estimate.png
# %&&
# &subhead iota_true&&
# &image%
#	build/example/gaussian/iota_true.png%
#	gaussian_iota_true.png
# %&&
# &comment ----------------------------------------------------------------&&
# &head Check Solution&&
# Next we check that the solution matches the simulated values for the
# functions &icode iota&&, &icode rho&&, &icode chi&&, and &icode omega&&.
# Note that only the times and ages within the data limits are checked.
# Note that the functions &icode S&& and &icode C&& are not checked because
# the fit has re-scaled &icode S&& to be one at age
# &icode global_age_min&& (it is one at age zero for the simulations).
# The function &icode rho&& is not checked because it is zero
# (hence relative errors are &code nan&&).
# &codep
echo 'gaussian.sh: check sfun_out.csv'
include_expr="f!='S' and f!='C' and f!='rho'"
include_expr="$include_expr and $global_time_min<=t and t<=$global_time_max" 
value_expr='nan if s == 0. else abs(1-e/s)'
median_bound="$global_prevalence_cv"
average_bound=`echo "1.5 * $global_prevalence_cv" | bc -l`
maximum_bound=`echo "10. * $global_prevalence_cv" | bc -l` 
$global_python_path/d4_compare_sfun.py \
	--sfun_out  sfun_out.csv \
	--solution  solution.csv \
	--compare   compare.csv \
	--include   "$include_expr" \
	--value     "$value_expr" \
	--median    "$median_bound" \
	--average   "$average_bound" \
	--maximum   "$maximum_bound"
# &&
# ---------------------------------------------------------------------------- 
# &head Final Message&&
# If this shell script reaches here, then all the tests have passed
# (except that dismod_pde_csv may have returned an error flag).
# &codep
if [ $dismod_pde_csv_ok == 'no' ]
then
	exit 1
fi
echo "gaussian.sh: $global_grid_step $global_prevalence_cv OK"
# &&
# &end
